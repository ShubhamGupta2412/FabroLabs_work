
nucleo-f042k6-vcp-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000756c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800762c  0800762c  0000862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a4  080077a4  0000917c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080077a4  080077a4  0000917c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080077a4  080077a4  0000917c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a4  080077a4  000087a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077a8  080077a8  000087a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  080077ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e4  2000017c  08007928  0000917c  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  20001360  08007928  00009360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000917c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b322  00000000  00000000  000091a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284a  00000000  00000000  000144c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00016d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000725  00000000  00000000  000176d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ebe  00000000  00000000  00017dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e07e  00000000  00000000  00031cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089378  00000000  00000000  0003fd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c90b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002088  00000000  00000000  000c90f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000cb17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007614 	.word	0x08007614

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08007614 	.word	0x08007614

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f91f 	bl	8000468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f819 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f86b 	bl	8000308 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000232:	f006 fc85 	bl	8006b40 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t buffer[] = "Hello, World!\r\n";
 8000236:	003b      	movs	r3, r7
 8000238:	4a08      	ldr	r2, [pc, #32]	@ (800025c <main+0x3c>)
 800023a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800023c:	c313      	stmia	r3!, {r0, r1, r4}
 800023e:	6812      	ldr	r2, [r2, #0]
 8000240:	601a      	str	r2, [r3, #0]
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 8000242:	003b      	movs	r3, r7
 8000244:	2110      	movs	r1, #16
 8000246:	0018      	movs	r0, r3
 8000248:	f006 fcfe 	bl	8006c48 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800024c:	23fa      	movs	r3, #250	@ 0xfa
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	0018      	movs	r0, r3
 8000252:	f000 f96d 	bl	8000530 <HAL_Delay>
  {
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	e7ed      	b.n	8000236 <main+0x16>
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	0800762c 	.word	0x0800762c

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b099      	sub	sp, #100	@ 0x64
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	242c      	movs	r4, #44	@ 0x2c
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2334      	movs	r3, #52	@ 0x34
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f007 f9a3 	bl	80075bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	231c      	movs	r3, #28
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f007 f99b 	bl	80075bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	0018      	movs	r0, r3
 800028a:	2318      	movs	r3, #24
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f007 f994 	bl	80075bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2220      	movs	r2, #32
 8000298:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2201      	movs	r2, #1
 800029e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2200      	movs	r2, #0
 80002a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	0018      	movs	r0, r3
 80002aa:	f002 f885 	bl	80023b8 <HAL_RCC_OscConfig>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002b2:	f000 f841 	bl	8000338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	211c      	movs	r1, #28
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2207      	movs	r2, #7
 80002bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2203      	movs	r2, #3
 80002c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2101      	movs	r1, #1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f002 fbf5 	bl	8002ac4 <HAL_RCC_ClockConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002de:	f000 f82b 	bl	8000338 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0292      	lsls	r2, r2, #10
 80002e8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	0018      	movs	r0, r3
 80002f4:	f002 fd32 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 80002f8:	1e03      	subs	r3, r0, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002fc:	f000 f81c 	bl	8000338 <Error_Handler>
  }
}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b019      	add	sp, #100	@ 0x64
 8000306:	bd90      	pop	{r4, r7, pc}

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <MX_GPIO_Init+0x2c>)
 8000310:	695a      	ldr	r2, [r3, #20]
 8000312:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <MX_GPIO_Init+0x2c>)
 8000314:	2180      	movs	r1, #128	@ 0x80
 8000316:	0289      	lsls	r1, r1, #10
 8000318:	430a      	orrs	r2, r1
 800031a:	615a      	str	r2, [r3, #20]
 800031c:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <MX_GPIO_Init+0x2c>)
 800031e:	695a      	ldr	r2, [r3, #20]
 8000320:	2380      	movs	r3, #128	@ 0x80
 8000322:	029b      	lsls	r3, r3, #10
 8000324:	4013      	ands	r3, r2
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800032a:	46c0      	nop			@ (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b002      	add	sp, #8
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			@ (mov r8, r8)
 8000334:	40021000 	.word	0x40021000

08000338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033c:	b672      	cpsid	i
}
 800033e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000340:	46c0      	nop			@ (mov r8, r8)
 8000342:	e7fd      	b.n	8000340 <Error_Handler+0x8>

08000344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800034a:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <HAL_MspInit+0x44>)
 800034c:	699a      	ldr	r2, [r3, #24]
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <HAL_MspInit+0x44>)
 8000350:	2101      	movs	r1, #1
 8000352:	430a      	orrs	r2, r1
 8000354:	619a      	str	r2, [r3, #24]
 8000356:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <HAL_MspInit+0x44>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	2201      	movs	r2, #1
 800035c:	4013      	ands	r3, r2
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000362:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <HAL_MspInit+0x44>)
 8000364:	69da      	ldr	r2, [r3, #28]
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <HAL_MspInit+0x44>)
 8000368:	2180      	movs	r1, #128	@ 0x80
 800036a:	0549      	lsls	r1, r1, #21
 800036c:	430a      	orrs	r2, r1
 800036e:	61da      	str	r2, [r3, #28]
 8000370:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <HAL_MspInit+0x44>)
 8000372:	69da      	ldr	r2, [r3, #28]
 8000374:	2380      	movs	r3, #128	@ 0x80
 8000376:	055b      	lsls	r3, r3, #21
 8000378:	4013      	ands	r3, r2
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b002      	add	sp, #8
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	40021000 	.word	0x40021000

0800038c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000390:	46c0      	nop			@ (mov r8, r8)
 8000392:	e7fd      	b.n	8000390 <NMI_Handler+0x4>

08000394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000398:	46c0      	nop			@ (mov r8, r8)
 800039a:	e7fd      	b.n	8000398 <HardFault_Handler+0x4>

0800039c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003a0:	46c0      	nop			@ (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b4:	f000 f8a0 	bl	80004f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003c4:	4b03      	ldr	r3, [pc, #12]	@ (80003d4 <USB_IRQHandler+0x14>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 face 	bl	8000968 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80003cc:	46c0      	nop			@ (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	20000e64 	.word	0x20000e64

080003d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80003dc:	46c0      	nop			@ (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e4:	4813      	ldr	r0, [pc, #76]	@ (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003e6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e8:	f7ff fff6 	bl	80003d8 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80003ec:	4812      	ldr	r0, [pc, #72]	@ (8000438 <LoopForever+0x6>)
    LDR R1, [R0]
 80003ee:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80003f0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80003f2:	4a12      	ldr	r2, [pc, #72]	@ (800043c <LoopForever+0xa>)
    CMP R1, R2
 80003f4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80003f6:	d105      	bne.n	8000404 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80003f8:	4811      	ldr	r0, [pc, #68]	@ (8000440 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80003fa:	4912      	ldr	r1, [pc, #72]	@ (8000444 <LoopForever+0x12>)
    STR R1, [R0]
 80003fc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80003fe:	4812      	ldr	r0, [pc, #72]	@ (8000448 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000400:	4912      	ldr	r1, [pc, #72]	@ (800044c <LoopForever+0x1a>)
    STR R1, [R0]
 8000402:	6001      	str	r1, [r0, #0]

08000404 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000404:	4812      	ldr	r0, [pc, #72]	@ (8000450 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000406:	4913      	ldr	r1, [pc, #76]	@ (8000454 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000408:	4a13      	ldr	r2, [pc, #76]	@ (8000458 <LoopForever+0x26>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a10      	ldr	r2, [pc, #64]	@ (800045c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800041c:	4c10      	ldr	r4, [pc, #64]	@ (8000460 <LoopForever+0x2e>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042a:	f007 f8cf 	bl	80075cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff fef7 	bl	8000220 <main>

08000432 <LoopForever>:

LoopForever:
    b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000438:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800043c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000440:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000444:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000448:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800044c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000458:	080077ac 	.word	0x080077ac
  ldr r2, =_sbss
 800045c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000460:	20001360 	.word	0x20001360

08000464 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC1_IRQHandler>
	...

08000468 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <HAL_Init+0x24>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <HAL_Init+0x24>)
 8000472:	2110      	movs	r1, #16
 8000474:	430a      	orrs	r2, r1
 8000476:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000478:	2003      	movs	r0, #3
 800047a:	f000 f809 	bl	8000490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800047e:	f7ff ff61 	bl	8000344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000482:	2300      	movs	r3, #0
}
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	40022000 	.word	0x40022000

08000490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000498:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <HAL_InitTick+0x5c>)
 800049a:	681c      	ldr	r4, [r3, #0]
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <HAL_InitTick+0x60>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	0019      	movs	r1, r3
 80004a2:	23fa      	movs	r3, #250	@ 0xfa
 80004a4:	0098      	lsls	r0, r3, #2
 80004a6:	f7ff fe2f 	bl	8000108 <__udivsi3>
 80004aa:	0003      	movs	r3, r0
 80004ac:	0019      	movs	r1, r3
 80004ae:	0020      	movs	r0, r4
 80004b0:	f7ff fe2a 	bl	8000108 <__udivsi3>
 80004b4:	0003      	movs	r3, r0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 f92f 	bl	800071a <HAL_SYSTICK_Config>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80004c0:	2301      	movs	r3, #1
 80004c2:	e00f      	b.n	80004e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b03      	cmp	r3, #3
 80004c8:	d80b      	bhi.n	80004e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 f8fc 	bl	80006d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <HAL_InitTick+0x64>)
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	e000      	b.n	80004e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80004e2:	2301      	movs	r3, #1
}
 80004e4:	0018      	movs	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b003      	add	sp, #12
 80004ea:	bd90      	pop	{r4, r7, pc}
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000008 	.word	0x20000008
 80004f4:	20000004 	.word	0x20000004

080004f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <HAL_IncTick+0x1c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	001a      	movs	r2, r3
 8000502:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <HAL_IncTick+0x20>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	18d2      	adds	r2, r2, r3
 8000508:	4b03      	ldr	r3, [pc, #12]	@ (8000518 <HAL_IncTick+0x20>)
 800050a:	601a      	str	r2, [r3, #0]
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	20000008 	.word	0x20000008
 8000518:	20000198 	.word	0x20000198

0800051c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  return uwTick;
 8000520:	4b02      	ldr	r3, [pc, #8]	@ (800052c <HAL_GetTick+0x10>)
 8000522:	681b      	ldr	r3, [r3, #0]
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	20000198 	.word	0x20000198

08000530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000538:	f7ff fff0 	bl	800051c <HAL_GetTick>
 800053c:	0003      	movs	r3, r0
 800053e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3301      	adds	r3, #1
 8000548:	d005      	beq.n	8000556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800054a:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <HAL_Delay+0x44>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	001a      	movs	r2, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	189b      	adds	r3, r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	f7ff ffe0 	bl	800051c <HAL_GetTick>
 800055c:	0002      	movs	r2, r0
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	429a      	cmp	r2, r3
 8000566:	d8f7      	bhi.n	8000558 <HAL_Delay+0x28>
  {
  }
}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b004      	add	sp, #16
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	20000008 	.word	0x20000008

08000578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	0002      	movs	r2, r0
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b7f      	cmp	r3, #127	@ 0x7f
 800058a:	d809      	bhi.n	80005a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	001a      	movs	r2, r3
 8000592:	231f      	movs	r3, #31
 8000594:	401a      	ands	r2, r3
 8000596:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <__NVIC_EnableIRQ+0x30>)
 8000598:	2101      	movs	r1, #1
 800059a:	4091      	lsls	r1, r2
 800059c:	000a      	movs	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
  }
}
 80005a0:	46c0      	nop			@ (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	e000e100 	.word	0xe000e100

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	0002      	movs	r2, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b7f      	cmp	r3, #127	@ 0x7f
 80005c0:	d828      	bhi.n	8000614 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000680 <__NVIC_SetPriority+0xd4>)
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	089b      	lsrs	r3, r3, #2
 80005cc:	33c0      	adds	r3, #192	@ 0xc0
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	589b      	ldr	r3, [r3, r2]
 80005d2:	1dfa      	adds	r2, r7, #7
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	0011      	movs	r1, r2
 80005d8:	2203      	movs	r2, #3
 80005da:	400a      	ands	r2, r1
 80005dc:	00d2      	lsls	r2, r2, #3
 80005de:	21ff      	movs	r1, #255	@ 0xff
 80005e0:	4091      	lsls	r1, r2
 80005e2:	000a      	movs	r2, r1
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	401a      	ands	r2, r3
 80005e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	019b      	lsls	r3, r3, #6
 80005ee:	22ff      	movs	r2, #255	@ 0xff
 80005f0:	401a      	ands	r2, r3
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	0018      	movs	r0, r3
 80005f8:	2303      	movs	r3, #3
 80005fa:	4003      	ands	r3, r0
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000600:	481f      	ldr	r0, [pc, #124]	@ (8000680 <__NVIC_SetPriority+0xd4>)
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b25b      	sxtb	r3, r3
 8000608:	089b      	lsrs	r3, r3, #2
 800060a:	430a      	orrs	r2, r1
 800060c:	33c0      	adds	r3, #192	@ 0xc0
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000612:	e031      	b.n	8000678 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000614:	4a1b      	ldr	r2, [pc, #108]	@ (8000684 <__NVIC_SetPriority+0xd8>)
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	0019      	movs	r1, r3
 800061c:	230f      	movs	r3, #15
 800061e:	400b      	ands	r3, r1
 8000620:	3b08      	subs	r3, #8
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	3306      	adds	r3, #6
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	18d3      	adds	r3, r2, r3
 800062a:	3304      	adds	r3, #4
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1dfa      	adds	r2, r7, #7
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	0011      	movs	r1, r2
 8000634:	2203      	movs	r2, #3
 8000636:	400a      	ands	r2, r1
 8000638:	00d2      	lsls	r2, r2, #3
 800063a:	21ff      	movs	r1, #255	@ 0xff
 800063c:	4091      	lsls	r1, r2
 800063e:	000a      	movs	r2, r1
 8000640:	43d2      	mvns	r2, r2
 8000642:	401a      	ands	r2, r3
 8000644:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	019b      	lsls	r3, r3, #6
 800064a:	22ff      	movs	r2, #255	@ 0xff
 800064c:	401a      	ands	r2, r3
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	0018      	movs	r0, r3
 8000654:	2303      	movs	r3, #3
 8000656:	4003      	ands	r3, r0
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800065c:	4809      	ldr	r0, [pc, #36]	@ (8000684 <__NVIC_SetPriority+0xd8>)
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	001c      	movs	r4, r3
 8000664:	230f      	movs	r3, #15
 8000666:	4023      	ands	r3, r4
 8000668:	3b08      	subs	r3, #8
 800066a:	089b      	lsrs	r3, r3, #2
 800066c:	430a      	orrs	r2, r1
 800066e:	3306      	adds	r3, #6
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	18c3      	adds	r3, r0, r3
 8000674:	3304      	adds	r3, #4
 8000676:	601a      	str	r2, [r3, #0]
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b003      	add	sp, #12
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	e000e100 	.word	0xe000e100
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	1e5a      	subs	r2, r3, #1
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	045b      	lsls	r3, r3, #17
 8000698:	429a      	cmp	r2, r3
 800069a:	d301      	bcc.n	80006a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800069c:	2301      	movs	r3, #1
 800069e:	e010      	b.n	80006c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <SysTick_Config+0x44>)
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	3a01      	subs	r2, #1
 80006a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006a8:	2301      	movs	r3, #1
 80006aa:	425b      	negs	r3, r3
 80006ac:	2103      	movs	r1, #3
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff ff7c 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <SysTick_Config+0x44>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <SysTick_Config+0x44>)
 80006bc:	2207      	movs	r2, #7
 80006be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	0018      	movs	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	210f      	movs	r1, #15
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	1c02      	adds	r2, r0, #0
 80006e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff ff5d 	bl	80005ac <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b004      	add	sp, #16
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	0002      	movs	r2, r0
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff ff33 	bl	8000578 <__NVIC_EnableIRQ>
}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}

0800071a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff ffaf 	bl	8000688 <SysTick_Config>
 800072a:	0003      	movs	r3, r0
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}

08000734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d101      	bne.n	8000746 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e0e4      	b.n	8000910 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a73      	ldr	r2, [pc, #460]	@ (8000918 <HAL_PCD_Init+0x1e4>)
 800074a:	5c9b      	ldrb	r3, [r3, r2]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d108      	bne.n	8000764 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	23a4      	movs	r3, #164	@ 0xa4
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	2100      	movs	r1, #0
 800075a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	0018      	movs	r0, r3
 8000760:	f006 fbd0 	bl	8006f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a6c      	ldr	r2, [pc, #432]	@ (8000918 <HAL_PCD_Init+0x1e4>)
 8000768:	2103      	movs	r1, #3
 800076a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	0018      	movs	r0, r3
 8000772:	f002 fbf7 	bl	8002f64 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000776:	230f      	movs	r3, #15
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	e047      	b.n	8000810 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000780:	200f      	movs	r0, #15
 8000782:	183b      	adds	r3, r7, r0
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	0013      	movs	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	189b      	adds	r3, r3, r2
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	18cb      	adds	r3, r1, r3
 8000792:	3311      	adds	r3, #17
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000798:	183b      	adds	r3, r7, r0
 800079a:	781a      	ldrb	r2, [r3, #0]
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	0013      	movs	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	189b      	adds	r3, r3, r2
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	18cb      	adds	r3, r1, r3
 80007a8:	3310      	adds	r3, #16
 80007aa:	183a      	adds	r2, r7, r0
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007b0:	183b      	adds	r3, r7, r0
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	0013      	movs	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	189b      	adds	r3, r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	18cb      	adds	r3, r1, r3
 80007c0:	3313      	adds	r3, #19
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80007c6:	183b      	adds	r3, r7, r0
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	0013      	movs	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	189b      	adds	r3, r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	18cb      	adds	r3, r1, r3
 80007d6:	3320      	adds	r3, #32
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007dc:	183b      	adds	r3, r7, r0
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	0013      	movs	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	189b      	adds	r3, r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	18cb      	adds	r3, r1, r3
 80007ec:	3324      	adds	r3, #36	@ 0x24
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007f2:	183b      	adds	r3, r7, r0
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	0013      	movs	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	189b      	adds	r3, r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	2200      	movs	r2, #0
 8000804:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000806:	183b      	adds	r3, r7, r0
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	183b      	adds	r3, r7, r0
 800080c:	3201      	adds	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	210f      	movs	r1, #15
 8000816:	187a      	adds	r2, r7, r1
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	429a      	cmp	r2, r3
 800081c:	d3b0      	bcc.n	8000780 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e056      	b.n	80008d4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000826:	240f      	movs	r4, #15
 8000828:	193b      	adds	r3, r7, r4
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	2352      	movs	r3, #82	@ 0x52
 8000830:	33ff      	adds	r3, #255	@ 0xff
 8000832:	0019      	movs	r1, r3
 8000834:	0013      	movs	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	189b      	adds	r3, r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	18c3      	adds	r3, r0, r3
 800083e:	185b      	adds	r3, r3, r1
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	781a      	ldrb	r2, [r3, #0]
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	23a8      	movs	r3, #168	@ 0xa8
 800084c:	0059      	lsls	r1, r3, #1
 800084e:	0013      	movs	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	189b      	adds	r3, r3, r2
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	18c3      	adds	r3, r0, r3
 8000858:	185b      	adds	r3, r3, r1
 800085a:	193a      	adds	r2, r7, r4
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	2354      	movs	r3, #84	@ 0x54
 8000868:	33ff      	adds	r3, #255	@ 0xff
 800086a:	0019      	movs	r1, r3
 800086c:	0013      	movs	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	189b      	adds	r3, r3, r2
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	18c3      	adds	r3, r0, r3
 8000876:	185b      	adds	r3, r3, r1
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	23b0      	movs	r3, #176	@ 0xb0
 8000884:	0059      	lsls	r1, r3, #1
 8000886:	0013      	movs	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	189b      	adds	r3, r3, r2
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	18c3      	adds	r3, r0, r3
 8000890:	185b      	adds	r3, r3, r1
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	23b2      	movs	r3, #178	@ 0xb2
 800089e:	0059      	lsls	r1, r3, #1
 80008a0:	0013      	movs	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	189b      	adds	r3, r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	18c3      	adds	r3, r0, r3
 80008aa:	185b      	adds	r3, r3, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	23b4      	movs	r3, #180	@ 0xb4
 80008b8:	0059      	lsls	r1, r3, #1
 80008ba:	0013      	movs	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	189b      	adds	r3, r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	18c3      	adds	r3, r0, r3
 80008c4:	185b      	adds	r3, r3, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	3201      	adds	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	220f      	movs	r2, #15
 80008da:	18ba      	adds	r2, r7, r2
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d3a1      	bcc.n	8000826 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6859      	ldr	r1, [r3, #4]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	f002 fb54 	bl	8002f98 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <HAL_PCD_Init+0x1e4>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7a9b      	ldrb	r3, [r3, #10]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d103      	bne.n	800090e <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	0018      	movs	r0, r3
 800090a:	f001 fd1f 	bl	800234c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b005      	add	sp, #20
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	00000291 	.word	0x00000291

0800091c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	23a4      	movs	r3, #164	@ 0xa4
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	5cd3      	ldrb	r3, [r2, r3]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d101      	bne.n	8000934 <HAL_PCD_Start+0x18>
 8000930:	2302      	movs	r3, #2
 8000932:	e014      	b.n	800095e <HAL_PCD_Start+0x42>
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	23a4      	movs	r3, #164	@ 0xa4
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	2101      	movs	r1, #1
 800093c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	0018      	movs	r0, r3
 8000944:	f002 faf8 	bl	8002f38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	0018      	movs	r0, r3
 800094e:	f004 faed 	bl	8004f2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	23a4      	movs	r3, #164	@ 0xa4
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	2100      	movs	r1, #0
 800095a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	0018      	movs	r0, r3
 8000976:	f004 faef 	bl	8004f58 <USB_ReadInterrupts>
 800097a:	0003      	movs	r3, r0
 800097c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	4013      	ands	r3, r2
 8000986:	d004      	beq.n	8000992 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fb60 	bl	8001050 <PCD_EP_ISR_Handler>

    return;
 8000990:	e11d      	b.n	8000bce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	2380      	movs	r3, #128	@ 0x80
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	4013      	ands	r3, r2
 800099a:	d015      	beq.n	80009c8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2244      	movs	r2, #68	@ 0x44
 80009a2:	5a9b      	ldrh	r3, [r3, r2]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	498a      	ldr	r1, [pc, #552]	@ (8000bd4 <HAL_PCD_IRQHandler+0x26c>)
 80009ac:	400a      	ands	r2, r1
 80009ae:	b291      	uxth	r1, r2
 80009b0:	2244      	movs	r2, #68	@ 0x44
 80009b2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	0018      	movs	r0, r3
 80009b8:	f006 fb2f 	bl	800701a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2100      	movs	r1, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 f915 	bl	8000bf0 <HAL_PCD_SetAddress>

    return;
 80009c6:	e102      	b.n	8000bce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	2380      	movs	r3, #128	@ 0x80
 80009cc:	01db      	lsls	r3, r3, #7
 80009ce:	4013      	ands	r3, r2
 80009d0:	d00c      	beq.n	80009ec <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2244      	movs	r2, #68	@ 0x44
 80009d8:	5a9b      	ldrh	r3, [r3, r2]
 80009da:	b29a      	uxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	497d      	ldr	r1, [pc, #500]	@ (8000bd8 <HAL_PCD_IRQHandler+0x270>)
 80009e2:	400a      	ands	r2, r1
 80009e4:	b291      	uxth	r1, r2
 80009e6:	2244      	movs	r2, #68	@ 0x44
 80009e8:	5299      	strh	r1, [r3, r2]

    return;
 80009ea:	e0f0      	b.n	8000bce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	2380      	movs	r3, #128	@ 0x80
 80009f0:	019b      	lsls	r3, r3, #6
 80009f2:	4013      	ands	r3, r2
 80009f4:	d00c      	beq.n	8000a10 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2244      	movs	r2, #68	@ 0x44
 80009fc:	5a9b      	ldrh	r3, [r3, r2]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4975      	ldr	r1, [pc, #468]	@ (8000bdc <HAL_PCD_IRQHandler+0x274>)
 8000a06:	400a      	ands	r2, r1
 8000a08:	b291      	uxth	r1, r2
 8000a0a:	2244      	movs	r2, #68	@ 0x44
 8000a0c:	5299      	strh	r1, [r3, r2]

    return;
 8000a0e:	e0de      	b.n	8000bce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	2380      	movs	r3, #128	@ 0x80
 8000a14:	015b      	lsls	r3, r3, #5
 8000a16:	4013      	ands	r3, r2
 8000a18:	d038      	beq.n	8000a8c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2240      	movs	r2, #64	@ 0x40
 8000a20:	5a9b      	ldrh	r3, [r3, r2]
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2104      	movs	r1, #4
 8000a2a:	438a      	bics	r2, r1
 8000a2c:	b291      	uxth	r1, r2
 8000a2e:	2240      	movs	r2, #64	@ 0x40
 8000a30:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2240      	movs	r2, #64	@ 0x40
 8000a38:	5a9b      	ldrh	r3, [r3, r2]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2108      	movs	r1, #8
 8000a42:	438a      	bics	r2, r1
 8000a44:	b291      	uxth	r1, r2
 8000a46:	2240      	movs	r2, #64	@ 0x40
 8000a48:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	23b2      	movs	r3, #178	@ 0xb2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	5cd3      	ldrb	r3, [r2, r3]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d109      	bne.n	8000a6a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	23b2      	movs	r3, #178	@ 0xb2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2100      	movs	r1, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 fc9b 	bl	80023a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f006 fb15 	bl	800709c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2244      	movs	r2, #68	@ 0x44
 8000a78:	5a9b      	ldrh	r3, [r3, r2]
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4957      	ldr	r1, [pc, #348]	@ (8000be0 <HAL_PCD_IRQHandler+0x278>)
 8000a82:	400a      	ands	r2, r1
 8000a84:	b291      	uxth	r1, r2
 8000a86:	2244      	movs	r2, #68	@ 0x44
 8000a88:	5299      	strh	r1, [r3, r2]

    return;
 8000a8a:	e0a0      	b.n	8000bce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	4013      	ands	r3, r2
 8000a94:	d028      	beq.n	8000ae8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2240      	movs	r2, #64	@ 0x40
 8000a9c:	5a9b      	ldrh	r3, [r3, r2]
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	b291      	uxth	r1, r2
 8000aaa:	2240      	movs	r2, #64	@ 0x40
 8000aac:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2244      	movs	r2, #68	@ 0x44
 8000ab4:	5a9b      	ldrh	r3, [r3, r2]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4949      	ldr	r1, [pc, #292]	@ (8000be4 <HAL_PCD_IRQHandler+0x27c>)
 8000abe:	400a      	ands	r2, r1
 8000ac0:	b291      	uxth	r1, r2
 8000ac2:	2244      	movs	r2, #68	@ 0x44
 8000ac4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2240      	movs	r2, #64	@ 0x40
 8000acc:	5a9b      	ldrh	r3, [r3, r2]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	b291      	uxth	r1, r2
 8000ada:	2240      	movs	r2, #64	@ 0x40
 8000adc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f006 fabf 	bl	8007064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ae6:	e072      	b.n	8000bce <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2280      	movs	r2, #128	@ 0x80
 8000aec:	4013      	ands	r3, r2
 8000aee:	d046      	beq.n	8000b7e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2244      	movs	r2, #68	@ 0x44
 8000af6:	5a9b      	ldrh	r3, [r3, r2]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2180      	movs	r1, #128	@ 0x80
 8000b00:	438a      	bics	r2, r1
 8000b02:	b291      	uxth	r1, r2
 8000b04:	2244      	movs	r2, #68	@ 0x44
 8000b06:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	23b2      	movs	r3, #178	@ 0xb2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d12f      	bne.n	8000b74 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2240      	movs	r2, #64	@ 0x40
 8000b1a:	5a9b      	ldrh	r3, [r3, r2]
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2104      	movs	r1, #4
 8000b24:	430a      	orrs	r2, r1
 8000b26:	b291      	uxth	r1, r2
 8000b28:	2240      	movs	r2, #64	@ 0x40
 8000b2a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2240      	movs	r2, #64	@ 0x40
 8000b32:	5a9b      	ldrh	r3, [r3, r2]
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	b291      	uxth	r1, r2
 8000b40:	2240      	movs	r2, #64	@ 0x40
 8000b42:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	23b2      	movs	r3, #178	@ 0xb2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2254      	movs	r2, #84	@ 0x54
 8000b54:	5a9b      	ldrh	r3, [r3, r2]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	223c      	movs	r2, #60	@ 0x3c
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	0019      	movs	r1, r3
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	23b3      	movs	r3, #179	@ 0xb3
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f001 fc17 	bl	80023a0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000b72:	e02c      	b.n	8000bce <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	0018      	movs	r0, r3
 8000b78:	f006 fa74 	bl	8007064 <HAL_PCD_SuspendCallback>
    return;
 8000b7c:	e027      	b.n	8000bce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4013      	ands	r3, r2
 8000b86:	d010      	beq.n	8000baa <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2244      	movs	r2, #68	@ 0x44
 8000b8e:	5a9b      	ldrh	r3, [r3, r2]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4914      	ldr	r1, [pc, #80]	@ (8000be8 <HAL_PCD_IRQHandler+0x280>)
 8000b98:	400a      	ands	r2, r1
 8000b9a:	b291      	uxth	r1, r2
 8000b9c:	2244      	movs	r2, #68	@ 0x44
 8000b9e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f006 fa2a 	bl	8006ffc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ba8:	e011      	b.n	8000bce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	d00c      	beq.n	8000bce <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2244      	movs	r2, #68	@ 0x44
 8000bba:	5a9b      	ldrh	r3, [r3, r2]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	490a      	ldr	r1, [pc, #40]	@ (8000bec <HAL_PCD_IRQHandler+0x284>)
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	b291      	uxth	r1, r2
 8000bc8:	2244      	movs	r2, #68	@ 0x44
 8000bca:	5299      	strh	r1, [r3, r2]

    return;
 8000bcc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b004      	add	sp, #16
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	fffffbff 	.word	0xfffffbff
 8000bd8:	ffffbfff 	.word	0xffffbfff
 8000bdc:	ffffdfff 	.word	0xffffdfff
 8000be0:	ffffefff 	.word	0xffffefff
 8000be4:	fffff7ff 	.word	0xfffff7ff
 8000be8:	fffffdff 	.word	0xfffffdff
 8000bec:	fffffeff 	.word	0xfffffeff

08000bf0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	000a      	movs	r2, r1
 8000bfa:	1cfb      	adds	r3, r7, #3
 8000bfc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	23a4      	movs	r3, #164	@ 0xa4
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	5cd3      	ldrb	r3, [r2, r3]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d101      	bne.n	8000c0e <HAL_PCD_SetAddress+0x1e>
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e016      	b.n	8000c3c <HAL_PCD_SetAddress+0x4c>
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	23a4      	movs	r3, #164	@ 0xa4
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	2101      	movs	r1, #1
 8000c16:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	1cfa      	adds	r2, r7, #3
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	1cfb      	adds	r3, r7, #3
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	0019      	movs	r1, r3
 8000c2a:	0010      	movs	r0, r2
 8000c2c:	f004 f96a 	bl	8004f04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	23a4      	movs	r3, #164	@ 0xa4
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	2100      	movs	r1, #0
 8000c38:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	0010      	movs	r0, r2
 8000c50:	0019      	movs	r1, r3
 8000c52:	1cfb      	adds	r3, r7, #3
 8000c54:	1c22      	adds	r2, r4, #0
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	003b      	movs	r3, r7
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
 8000c5e:	1cbb      	adds	r3, r7, #2
 8000c60:	1c0a      	adds	r2, r1, #0
 8000c62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c64:	230b      	movs	r3, #11
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c6c:	1cfb      	adds	r3, r7, #3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	da0f      	bge.n	8000c96 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c76:	1cfb      	adds	r3, r7, #3
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	0013      	movs	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	189b      	adds	r3, r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	3310      	adds	r3, #16
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	18d3      	adds	r3, r2, r3
 8000c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2201      	movs	r2, #1
 8000c92:	705a      	strb	r2, [r3, #1]
 8000c94:	e00f      	b.n	8000cb6 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c96:	1cfb      	adds	r3, r7, #3
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	401a      	ands	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	3351      	adds	r3, #81	@ 0x51
 8000ca8:	33ff      	adds	r3, #255	@ 0xff
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	18d3      	adds	r3, r2, r3
 8000cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000cb6:	1cfb      	adds	r3, r7, #3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2207      	movs	r2, #7
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000cc4:	003b      	movs	r3, r7
 8000cc6:	881a      	ldrh	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	1cba      	adds	r2, r7, #2
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000cd4:	1cbb      	adds	r3, r7, #2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d102      	bne.n	8000ce2 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	23a4      	movs	r3, #164	@ 0xa4
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	5cd3      	ldrb	r3, [r2, r3]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <HAL_PCD_EP_Open+0xae>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e013      	b.n	8000d1a <HAL_PCD_EP_Open+0xd6>
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	23a4      	movs	r3, #164	@ 0xa4
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	0011      	movs	r1, r2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f002 f963 	bl	8002fd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	23a4      	movs	r3, #164	@ 0xa4
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	2100      	movs	r1, #0
 8000d12:	54d1      	strb	r1, [r2, r3]

  return ret;
 8000d14:	230b      	movs	r3, #11
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	781b      	ldrb	r3, [r3, #0]
}
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b005      	add	sp, #20
 8000d20:	bd90      	pop	{r4, r7, pc}

08000d22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	1cfb      	adds	r3, r7, #3
 8000d2e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d30:	1cfb      	adds	r3, r7, #3
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da0f      	bge.n	8000d5a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d3a:	1cfb      	adds	r3, r7, #3
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2207      	movs	r2, #7
 8000d40:	401a      	ands	r2, r3
 8000d42:	0013      	movs	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	189b      	adds	r3, r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	3310      	adds	r3, #16
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	18d3      	adds	r3, r2, r3
 8000d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2201      	movs	r2, #1
 8000d56:	705a      	strb	r2, [r3, #1]
 8000d58:	e00f      	b.n	8000d7a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d5a:	1cfb      	adds	r3, r7, #3
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2207      	movs	r2, #7
 8000d60:	401a      	ands	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	189b      	adds	r3, r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	3351      	adds	r3, #81	@ 0x51
 8000d6c:	33ff      	adds	r3, #255	@ 0xff
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	18d3      	adds	r3, r2, r3
 8000d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d7a:	1cfb      	adds	r3, r7, #3
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2207      	movs	r2, #7
 8000d80:	4013      	ands	r3, r2
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	23a4      	movs	r3, #164	@ 0xa4
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d101      	bne.n	8000d98 <HAL_PCD_EP_Close+0x76>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e011      	b.n	8000dbc <HAL_PCD_EP_Close+0x9a>
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	23a4      	movs	r3, #164	@ 0xa4
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	2101      	movs	r1, #1
 8000da0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f002 fcb8 	bl	8003720 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	23a4      	movs	r3, #164	@ 0xa4
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	2100      	movs	r1, #0
 8000db8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b004      	add	sp, #16
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	200b      	movs	r0, #11
 8000dd2:	183b      	adds	r3, r7, r0
 8000dd4:	1c0a      	adds	r2, r1, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000dd8:	0001      	movs	r1, r0
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2207      	movs	r2, #7
 8000de0:	401a      	ands	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	189b      	adds	r3, r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	3351      	adds	r3, #81	@ 0x51
 8000dec:	33ff      	adds	r3, #255	@ 0xff
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2207      	movs	r2, #7
 8000e12:	4013      	ands	r3, r2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f002 fe3c 	bl	8003aa0 <USB_EPStartXfer>

  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b006      	add	sp, #24
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	000a      	movs	r2, r1
 8000e3c:	1cfb      	adds	r3, r7, #3
 8000e3e:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000e40:	1cfb      	adds	r3, r7, #3
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2207      	movs	r2, #7
 8000e46:	401a      	ands	r2, r3
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	23b6      	movs	r3, #182	@ 0xb6
 8000e4c:	0059      	lsls	r1, r3, #1
 8000e4e:	0013      	movs	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	189b      	adds	r3, r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	18c3      	adds	r3, r0, r3
 8000e58:	185b      	adds	r3, r3, r1
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	200b      	movs	r0, #11
 8000e72:	183b      	adds	r3, r7, r0
 8000e74:	1c0a      	adds	r2, r1, #0
 8000e76:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e78:	183b      	adds	r3, r7, r0
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	401a      	ands	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	189b      	adds	r3, r3, r2
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	3310      	adds	r3, #16
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2224      	movs	r2, #36	@ 0x24
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000eb6:	183b      	adds	r3, r7, r0
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2207      	movs	r2, #7
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	0011      	movs	r1, r2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f002 fde7 	bl	8003aa0 <USB_EPStartXfer>

  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b006      	add	sp, #24
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	1cfb      	adds	r3, r7, #3
 8000ee8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000eea:	1cfb      	adds	r3, r7, #3
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2207      	movs	r2, #7
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	7912      	ldrb	r2, [r2, #4]
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d901      	bls.n	8000efe <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e046      	b.n	8000f8c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000efe:	1cfb      	adds	r3, r7, #3
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da0f      	bge.n	8000f28 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f08:	1cfb      	adds	r3, r7, #3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	401a      	ands	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	189b      	adds	r3, r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	3310      	adds	r3, #16
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	18d3      	adds	r3, r2, r3
 8000f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2201      	movs	r2, #1
 8000f24:	705a      	strb	r2, [r3, #1]
 8000f26:	e00d      	b.n	8000f44 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f28:	1cfb      	adds	r3, r7, #3
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	189b      	adds	r3, r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	3351      	adds	r3, #81	@ 0x51
 8000f36:	33ff      	adds	r3, #255	@ 0xff
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	18d3      	adds	r3, r2, r3
 8000f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2201      	movs	r2, #1
 8000f48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f4a:	1cfb      	adds	r3, r7, #3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2207      	movs	r2, #7
 8000f50:	4013      	ands	r3, r2
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	23a4      	movs	r3, #164	@ 0xa4
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_PCD_EP_SetStall+0x8c>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e011      	b.n	8000f8c <HAL_PCD_EP_SetStall+0xb0>
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	23a4      	movs	r3, #164	@ 0xa4
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	2101      	movs	r1, #1
 8000f70:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f003 fec0 	bl	8004d00 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	23a4      	movs	r3, #164	@ 0xa4
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	2100      	movs	r1, #0
 8000f88:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b004      	add	sp, #16
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	1cfb      	adds	r3, r7, #3
 8000fa0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000fa2:	1cfb      	adds	r3, r7, #3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	4013      	ands	r3, r2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	7912      	ldrb	r2, [r2, #4]
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e048      	b.n	8001048 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000fb6:	1cfb      	adds	r3, r7, #3
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da0f      	bge.n	8000fe0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fc0:	1cfb      	adds	r3, r7, #3
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	189b      	adds	r3, r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	3310      	adds	r3, #16
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	18d3      	adds	r3, r2, r3
 8000fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	705a      	strb	r2, [r3, #1]
 8000fde:	e00f      	b.n	8001000 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fe0:	1cfb      	adds	r3, r7, #3
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	189b      	adds	r3, r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	3351      	adds	r3, #81	@ 0x51
 8000ff2:	33ff      	adds	r3, #255	@ 0xff
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	18d3      	adds	r3, r2, r3
 8000ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001006:	1cfb      	adds	r3, r7, #3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2207      	movs	r2, #7
 800100c:	4013      	ands	r3, r2
 800100e:	b2da      	uxtb	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	23a4      	movs	r3, #164	@ 0xa4
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_PCD_EP_ClrStall+0x90>
 8001020:	2302      	movs	r3, #2
 8001022:	e011      	b.n	8001048 <HAL_PCD_EP_ClrStall+0xb4>
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	23a4      	movs	r3, #164	@ 0xa4
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	2101      	movs	r1, #1
 800102c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	0011      	movs	r1, r2
 8001036:	0018      	movs	r0, r3
 8001038:	f003 feb2 	bl	8004da0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	23a4      	movs	r3, #164	@ 0xa4
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	2100      	movs	r1, #0
 8001044:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b004      	add	sp, #16
 800104e:	bd80      	pop	{r7, pc}

08001050 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b096      	sub	sp, #88	@ 0x58
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001058:	f000 fbea 	bl	8001830 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2048      	movs	r0, #72	@ 0x48
 8001062:	183b      	adds	r3, r7, r0
 8001064:	2144      	movs	r1, #68	@ 0x44
 8001066:	5a52      	ldrh	r2, [r2, r1]
 8001068:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800106a:	183b      	adds	r3, r7, r0
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	244f      	movs	r4, #79	@ 0x4f
 8001072:	193b      	adds	r3, r7, r4
 8001074:	210f      	movs	r1, #15
 8001076:	400a      	ands	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800107a:	193b      	adds	r3, r7, r4
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d000      	beq.n	8001084 <PCD_EP_ISR_Handler+0x34>
 8001082:	e18d      	b.n	80013a0 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001084:	183b      	adds	r3, r7, r0
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2210      	movs	r2, #16
 800108a:	4013      	ands	r3, r2
 800108c:	d152      	bne.n	8001134 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b29a      	uxth	r2, r3
 8001096:	200e      	movs	r0, #14
 8001098:	183b      	adds	r3, r7, r0
 800109a:	49ba      	ldr	r1, [pc, #744]	@ (8001384 <PCD_EP_ISR_Handler+0x334>)
 800109c:	400a      	ands	r2, r1
 800109e:	801a      	strh	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	183a      	adds	r2, r7, r0
 80010a6:	8812      	ldrh	r2, [r2, #0]
 80010a8:	49b7      	ldr	r1, [pc, #732]	@ (8001388 <PCD_EP_ISR_Handler+0x338>)
 80010aa:	430a      	orrs	r2, r1
 80010ac:	b292      	uxth	r2, r2
 80010ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3310      	adds	r3, #16
 80010b4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2250      	movs	r2, #80	@ 0x50
 80010bc:	5a9b      	ldrh	r3, [r3, r2]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	001a      	movs	r2, r3
 80010c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	18d2      	adds	r2, r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	18d3      	adds	r3, r2, r3
 80010d0:	4aae      	ldr	r2, [pc, #696]	@ (800138c <PCD_EP_ISR_Handler+0x33c>)
 80010d2:	4694      	mov	ip, r2
 80010d4:	4463      	add	r3, ip
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	059b      	lsls	r3, r3, #22
 80010da:	0d9a      	lsrs	r2, r3, #22
 80010dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80010e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	18d2      	adds	r2, r2, r3
 80010ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2100      	movs	r1, #0
 80010f2:	0018      	movs	r0, r3
 80010f4:	f005 ff64 	bl	8006fc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7b1b      	ldrb	r3, [r3, #12]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <PCD_EP_ISR_Handler+0xb6>
 8001102:	f000 fb95 	bl	8001830 <PCD_EP_ISR_Handler+0x7e0>
 8001106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <PCD_EP_ISR_Handler+0xc2>
 800110e:	f000 fb8f 	bl	8001830 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7b1b      	ldrb	r3, [r3, #12]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2280      	movs	r2, #128	@ 0x80
 800111a:	4252      	negs	r2, r2
 800111c:	4313      	orrs	r3, r2
 800111e:	b2da      	uxtb	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0011      	movs	r1, r2
 8001126:	224c      	movs	r2, #76	@ 0x4c
 8001128:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	731a      	strb	r2, [r3, #12]
 8001130:	f000 fb7e 	bl	8001830 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3351      	adds	r3, #81	@ 0x51
 8001138:	33ff      	adds	r3, #255	@ 0xff
 800113a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	214c      	movs	r1, #76	@ 0x4c
 8001142:	187b      	adds	r3, r7, r1
 8001144:	8812      	ldrh	r2, [r2, #0]
 8001146:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001148:	187b      	adds	r3, r7, r1
 800114a:	881a      	ldrh	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4013      	ands	r3, r2
 8001152:	d037      	beq.n	80011c4 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2250      	movs	r2, #80	@ 0x50
 800115a:	5a9b      	ldrh	r3, [r3, r2]
 800115c:	b29b      	uxth	r3, r3
 800115e:	001a      	movs	r2, r3
 8001160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	18d2      	adds	r2, r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	18d3      	adds	r3, r2, r3
 800116e:	4a88      	ldr	r2, [pc, #544]	@ (8001390 <PCD_EP_ISR_Handler+0x340>)
 8001170:	4694      	mov	ip, r2
 8001172:	4463      	add	r3, ip
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	059b      	lsls	r3, r3, #22
 8001178:	0d9a      	lsrs	r2, r3, #22
 800117a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800117c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	22a6      	movs	r2, #166	@ 0xa6
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	1899      	adds	r1, r3, r2
 800118a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800118c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800118e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001190:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001192:	b29b      	uxth	r3, r3
 8001194:	f003 ff38 	bl	8005008 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	2010      	movs	r0, #16
 80011a2:	183b      	adds	r3, r7, r0
 80011a4:	497b      	ldr	r1, [pc, #492]	@ (8001394 <PCD_EP_ISR_Handler+0x344>)
 80011a6:	400a      	ands	r2, r1
 80011a8:	801a      	strh	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	183a      	adds	r2, r7, r0
 80011b0:	8812      	ldrh	r2, [r2, #0]
 80011b2:	2180      	movs	r1, #128	@ 0x80
 80011b4:	430a      	orrs	r2, r1
 80011b6:	b292      	uxth	r2, r2
 80011b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	0018      	movs	r0, r3
 80011be:	f005 fec9 	bl	8006f54 <HAL_PCD_SetupStageCallback>
 80011c2:	e335      	b.n	8001830 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011c4:	234c      	movs	r3, #76	@ 0x4c
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	5e9b      	ldrsh	r3, [r3, r2]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db00      	blt.n	80011d2 <PCD_EP_ISR_Handler+0x182>
 80011d0:	e32e      	b.n	8001830 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	201e      	movs	r0, #30
 80011dc:	183b      	adds	r3, r7, r0
 80011de:	496d      	ldr	r1, [pc, #436]	@ (8001394 <PCD_EP_ISR_Handler+0x344>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	801a      	strh	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	183a      	adds	r2, r7, r0
 80011ea:	8812      	ldrh	r2, [r2, #0]
 80011ec:	2180      	movs	r1, #128	@ 0x80
 80011ee:	430a      	orrs	r2, r1
 80011f0:	b292      	uxth	r2, r2
 80011f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2250      	movs	r2, #80	@ 0x50
 80011fa:	5a9b      	ldrh	r3, [r3, r2]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	001a      	movs	r2, r3
 8001200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	18d2      	adds	r2, r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	4a60      	ldr	r2, [pc, #384]	@ (8001390 <PCD_EP_ISR_Handler+0x340>)
 8001210:	4694      	mov	ip, r2
 8001212:	4463      	add	r3, ip
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	059b      	lsls	r3, r3, #22
 8001218:	0d9a      	lsrs	r2, r3, #22
 800121a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800121c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800121e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d01a      	beq.n	800125c <PCD_EP_ISR_Handler+0x20c>
 8001226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d016      	beq.n	800125c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001234:	6959      	ldr	r1, [r3, #20]
 8001236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001238:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800123a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800123c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800123e:	b29b      	uxth	r3, r3
 8001240:	f003 fee2 	bl	8005008 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	18d2      	adds	r2, r2, r3
 800124e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001250:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2100      	movs	r1, #0
 8001256:	0018      	movs	r0, r3
 8001258:	f005 fe91 	bl	8006f7e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	214c      	movs	r1, #76	@ 0x4c
 8001262:	187b      	adds	r3, r7, r1
 8001264:	8812      	ldrh	r2, [r2, #0]
 8001266:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001268:	187b      	adds	r3, r7, r1
 800126a:	881a      	ldrh	r2, [r3, #0]
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	4013      	ands	r3, r2
 8001272:	d000      	beq.n	8001276 <PCD_EP_ISR_Handler+0x226>
 8001274:	e2dc      	b.n	8001830 <PCD_EP_ISR_Handler+0x7e0>
 8001276:	187b      	adds	r3, r7, r1
 8001278:	881a      	ldrh	r2, [r3, #0]
 800127a:	23c0      	movs	r3, #192	@ 0xc0
 800127c:	019b      	lsls	r3, r3, #6
 800127e:	401a      	ands	r2, r3
 8001280:	23c0      	movs	r3, #192	@ 0xc0
 8001282:	019b      	lsls	r3, r3, #6
 8001284:	429a      	cmp	r2, r3
 8001286:	d100      	bne.n	800128a <PCD_EP_ISR_Handler+0x23a>
 8001288:	e2d2      	b.n	8001830 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2250      	movs	r2, #80	@ 0x50
 8001296:	5a9b      	ldrh	r3, [r3, r2]
 8001298:	b29b      	uxth	r3, r3
 800129a:	001a      	movs	r2, r3
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	189b      	adds	r3, r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4a3a      	ldr	r2, [pc, #232]	@ (8001390 <PCD_EP_ISR_Handler+0x340>)
 80012a6:	4694      	mov	ip, r2
 80012a8:	4463      	add	r3, ip
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	059b      	lsls	r3, r3, #22
 80012b4:	0d9b      	lsrs	r3, r3, #22
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	801a      	strh	r2, [r3, #0]
 80012bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d108      	bne.n	80012d6 <PCD_EP_ISR_Handler+0x286>
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001388 <PCD_EP_ISR_Handler+0x338>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	801a      	strh	r2, [r3, #0]
 80012d4:	e035      	b.n	8001342 <PCD_EP_ISR_Handler+0x2f2>
 80012d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b3e      	cmp	r3, #62	@ 0x3e
 80012dc:	d817      	bhi.n	800130e <PCD_EP_ISR_Handler+0x2be>
 80012de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	085b      	lsrs	r3, r3, #1
 80012e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80012e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4013      	ands	r3, r2
 80012ee:	d002      	beq.n	80012f6 <PCD_EP_ISR_Handler+0x2a6>
 80012f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012f2:	3301      	adds	r3, #1
 80012f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012fe:	b29b      	uxth	r3, r3
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	b29b      	uxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b29a      	uxth	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	801a      	strh	r2, [r3, #0]
 800130c:	e019      	b.n	8001342 <PCD_EP_ISR_Handler+0x2f2>
 800130e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	647b      	str	r3, [r7, #68]	@ 0x44
 8001316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	221f      	movs	r2, #31
 800131c:	4013      	ands	r3, r2
 800131e:	d102      	bne.n	8001326 <PCD_EP_ISR_Handler+0x2d6>
 8001320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001322:	3b01      	subs	r3, #1
 8001324:	647b      	str	r3, [r7, #68]	@ 0x44
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800132e:	b29b      	uxth	r3, r3
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	b29b      	uxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <PCD_EP_ISR_Handler+0x338>)
 800133a:	4313      	orrs	r3, r2
 800133c:	b29a      	uxth	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	b29a      	uxth	r2, r3
 800134a:	2012      	movs	r0, #18
 800134c:	183b      	adds	r3, r7, r0
 800134e:	4912      	ldr	r1, [pc, #72]	@ (8001398 <PCD_EP_ISR_Handler+0x348>)
 8001350:	400a      	ands	r2, r1
 8001352:	801a      	strh	r2, [r3, #0]
 8001354:	183b      	adds	r3, r7, r0
 8001356:	183a      	adds	r2, r7, r0
 8001358:	8812      	ldrh	r2, [r2, #0]
 800135a:	2180      	movs	r1, #128	@ 0x80
 800135c:	0149      	lsls	r1, r1, #5
 800135e:	404a      	eors	r2, r1
 8001360:	801a      	strh	r2, [r3, #0]
 8001362:	183b      	adds	r3, r7, r0
 8001364:	183a      	adds	r2, r7, r0
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	2180      	movs	r1, #128	@ 0x80
 800136a:	0189      	lsls	r1, r1, #6
 800136c:	404a      	eors	r2, r1
 800136e:	801a      	strh	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	183a      	adds	r2, r7, r0
 8001376:	8812      	ldrh	r2, [r2, #0]
 8001378:	4908      	ldr	r1, [pc, #32]	@ (800139c <PCD_EP_ISR_Handler+0x34c>)
 800137a:	430a      	orrs	r2, r1
 800137c:	b292      	uxth	r2, r2
 800137e:	801a      	strh	r2, [r3, #0]
 8001380:	e256      	b.n	8001830 <PCD_EP_ISR_Handler+0x7e0>
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	ffff8f0f 	.word	0xffff8f0f
 8001388:	ffff8000 	.word	0xffff8000
 800138c:	00000402 	.word	0x00000402
 8001390:	00000406 	.word	0x00000406
 8001394:	00000f8f 	.word	0x00000f8f
 8001398:	ffffbf8f 	.word	0xffffbf8f
 800139c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	001a      	movs	r2, r3
 80013a6:	204f      	movs	r0, #79	@ 0x4f
 80013a8:	183b      	adds	r3, r7, r0
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	18d2      	adds	r2, r2, r3
 80013b0:	214c      	movs	r1, #76	@ 0x4c
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	8812      	ldrh	r2, [r2, #0]
 80013b6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2200      	movs	r2, #0
 80013bc:	5e9b      	ldrsh	r3, [r3, r2]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db00      	blt.n	80013c4 <PCD_EP_ISR_Handler+0x374>
 80013c2:	e0fa      	b.n	80015ba <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	001a      	movs	r2, r3
 80013ca:	183b      	adds	r3, r7, r0
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	18d3      	adds	r3, r2, r3
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	244a      	movs	r4, #74	@ 0x4a
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	49d1      	ldr	r1, [pc, #836]	@ (8001720 <PCD_EP_ISR_Handler+0x6d0>)
 80013dc:	400a      	ands	r2, r1
 80013de:	801a      	strh	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	001a      	movs	r2, r3
 80013e6:	183b      	adds	r3, r7, r0
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	193a      	adds	r2, r7, r4
 80013f0:	8812      	ldrh	r2, [r2, #0]
 80013f2:	2180      	movs	r1, #128	@ 0x80
 80013f4:	430a      	orrs	r2, r1
 80013f6:	b292      	uxth	r2, r2
 80013f8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80013fa:	183b      	adds	r3, r7, r0
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	0013      	movs	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	189b      	adds	r3, r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	3351      	adds	r3, #81	@ 0x51
 8001408:	33ff      	adds	r3, #255	@ 0xff
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	18d3      	adds	r3, r2, r3
 800140e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001412:	7b1b      	ldrb	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d125      	bne.n	8001464 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2250      	movs	r2, #80	@ 0x50
 800141e:	5a9b      	ldrh	r3, [r3, r2]
 8001420:	b29b      	uxth	r3, r3
 8001422:	001a      	movs	r2, r3
 8001424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	18d2      	adds	r2, r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	18d3      	adds	r3, r2, r3
 8001432:	4abc      	ldr	r2, [pc, #752]	@ (8001724 <PCD_EP_ISR_Handler+0x6d4>)
 8001434:	4694      	mov	ip, r2
 8001436:	4463      	add	r3, ip
 8001438:	881a      	ldrh	r2, [r3, #0]
 800143a:	2450      	movs	r4, #80	@ 0x50
 800143c:	193b      	adds	r3, r7, r4
 800143e:	0592      	lsls	r2, r2, #22
 8001440:	0d92      	lsrs	r2, r2, #22
 8001442:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001444:	193b      	adds	r3, r7, r4
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d100      	bne.n	800144e <PCD_EP_ISR_Handler+0x3fe>
 800144c:	e08d      	b.n	800156a <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001454:	6959      	ldr	r1, [r3, #20]
 8001456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001458:	88da      	ldrh	r2, [r3, #6]
 800145a:	193b      	adds	r3, r7, r4
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	f003 fdd3 	bl	8005008 <USB_ReadPMA>
 8001462:	e082      	b.n	800156a <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001466:	78db      	ldrb	r3, [r3, #3]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d10c      	bne.n	8001486 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800146c:	2350      	movs	r3, #80	@ 0x50
 800146e:	18fc      	adds	r4, r7, r3
 8001470:	234c      	movs	r3, #76	@ 0x4c
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	0018      	movs	r0, r3
 800147c:	f000 f9ec 	bl	8001858 <HAL_PCD_EP_DB_Receive>
 8001480:	0003      	movs	r3, r0
 8001482:	8023      	strh	r3, [r4, #0]
 8001484:	e071      	b.n	800156a <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	001a      	movs	r2, r3
 800148c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	18d3      	adds	r3, r2, r3
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	b29a      	uxth	r2, r3
 8001498:	2052      	movs	r0, #82	@ 0x52
 800149a:	183b      	adds	r3, r7, r0
 800149c:	49a2      	ldr	r1, [pc, #648]	@ (8001728 <PCD_EP_ISR_Handler+0x6d8>)
 800149e:	400a      	ands	r2, r1
 80014a0:	801a      	strh	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	001a      	movs	r2, r3
 80014a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	18d3      	adds	r3, r2, r3
 80014b0:	183a      	adds	r2, r7, r0
 80014b2:	8812      	ldrh	r2, [r2, #0]
 80014b4:	499d      	ldr	r1, [pc, #628]	@ (800172c <PCD_EP_ISR_Handler+0x6dc>)
 80014b6:	430a      	orrs	r2, r1
 80014b8:	b292      	uxth	r2, r2
 80014ba:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	001a      	movs	r2, r3
 80014c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	18d3      	adds	r3, r2, r3
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	001a      	movs	r2, r3
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	01db      	lsls	r3, r3, #7
 80014d4:	4013      	ands	r3, r2
 80014d6:	d024      	beq.n	8001522 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2250      	movs	r2, #80	@ 0x50
 80014de:	5a9b      	ldrh	r3, [r3, r2]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	001a      	movs	r2, r3
 80014e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	18d2      	adds	r2, r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	4a8f      	ldr	r2, [pc, #572]	@ (8001730 <PCD_EP_ISR_Handler+0x6e0>)
 80014f4:	4694      	mov	ip, r2
 80014f6:	4463      	add	r3, ip
 80014f8:	881a      	ldrh	r2, [r3, #0]
 80014fa:	2450      	movs	r4, #80	@ 0x50
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	0592      	lsls	r2, r2, #22
 8001500:	0d92      	lsrs	r2, r2, #22
 8001502:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001504:	193b      	adds	r3, r7, r4
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d02e      	beq.n	800156a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001512:	6959      	ldr	r1, [r3, #20]
 8001514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001516:	891a      	ldrh	r2, [r3, #8]
 8001518:	193b      	adds	r3, r7, r4
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	f003 fd74 	bl	8005008 <USB_ReadPMA>
 8001520:	e023      	b.n	800156a <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2250      	movs	r2, #80	@ 0x50
 8001528:	5a9b      	ldrh	r3, [r3, r2]
 800152a:	b29b      	uxth	r3, r3
 800152c:	001a      	movs	r2, r3
 800152e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	18d2      	adds	r2, r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	4a79      	ldr	r2, [pc, #484]	@ (8001724 <PCD_EP_ISR_Handler+0x6d4>)
 800153e:	4694      	mov	ip, r2
 8001540:	4463      	add	r3, ip
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	2450      	movs	r4, #80	@ 0x50
 8001546:	193b      	adds	r3, r7, r4
 8001548:	0592      	lsls	r2, r2, #22
 800154a:	0d92      	lsrs	r2, r2, #22
 800154c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800154e:	193b      	adds	r3, r7, r4
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800155c:	6959      	ldr	r1, [r3, #20]
 800155e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001560:	895a      	ldrh	r2, [r3, #10]
 8001562:	193b      	adds	r3, r7, r4
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	f003 fd4f 	bl	8005008 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800156a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	2150      	movs	r1, #80	@ 0x50
 8001570:	187b      	adds	r3, r7, r1
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	18d2      	adds	r2, r2, r3
 8001576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001578:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800157a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	187b      	adds	r3, r7, r1
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	18d2      	adds	r2, r2, r3
 8001584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001586:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <PCD_EP_ISR_Handler+0x54c>
 8001590:	187b      	adds	r3, r7, r1
 8001592:	881a      	ldrh	r2, [r3, #0]
 8001594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800159c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	0011      	movs	r1, r2
 80015a4:	0018      	movs	r0, r3
 80015a6:	f005 fcea 	bl	8006f7e <HAL_PCD_DataOutStageCallback>
 80015aa:	e006      	b.n	80015ba <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f002 fa73 	bl	8003aa0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80015ba:	244c      	movs	r4, #76	@ 0x4c
 80015bc:	193b      	adds	r3, r7, r4
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	2280      	movs	r2, #128	@ 0x80
 80015c2:	4013      	ands	r3, r2
 80015c4:	d100      	bne.n	80015c8 <PCD_EP_ISR_Handler+0x578>
 80015c6:	e133      	b.n	8001830 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 80015c8:	204f      	movs	r0, #79	@ 0x4f
 80015ca:	183b      	adds	r3, r7, r0
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	0013      	movs	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	189b      	adds	r3, r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	3310      	adds	r3, #16
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	18d3      	adds	r3, r2, r3
 80015dc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	001a      	movs	r2, r3
 80015e4:	183b      	adds	r3, r7, r0
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	18d3      	adds	r3, r2, r3
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	2542      	movs	r5, #66	@ 0x42
 80015f2:	197b      	adds	r3, r7, r5
 80015f4:	494f      	ldr	r1, [pc, #316]	@ (8001734 <PCD_EP_ISR_Handler+0x6e4>)
 80015f6:	400a      	ands	r2, r1
 80015f8:	801a      	strh	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	001a      	movs	r2, r3
 8001600:	183b      	adds	r3, r7, r0
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	18d3      	adds	r3, r2, r3
 8001608:	197a      	adds	r2, r7, r5
 800160a:	8812      	ldrh	r2, [r2, #0]
 800160c:	494a      	ldr	r1, [pc, #296]	@ (8001738 <PCD_EP_ISR_Handler+0x6e8>)
 800160e:	430a      	orrs	r2, r1
 8001610:	b292      	uxth	r2, r2
 8001612:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d000      	beq.n	800161e <PCD_EP_ISR_Handler+0x5ce>
 800161c:	e0af      	b.n	800177e <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 800161e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001626:	7b1b      	ldrb	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d100      	bne.n	800162e <PCD_EP_ISR_Handler+0x5de>
 800162c:	e09f      	b.n	800176e <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800162e:	193b      	adds	r3, r7, r4
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2240      	movs	r2, #64	@ 0x40
 8001634:	4013      	ands	r3, r2
 8001636:	d046      	beq.n	80016c6 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800163a:	785b      	ldrb	r3, [r3, #1]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d125      	bne.n	800168c <PCD_EP_ISR_Handler+0x63c>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2250      	movs	r2, #80	@ 0x50
 800164c:	5a9b      	ldrh	r3, [r3, r2]
 800164e:	b29b      	uxth	r3, r3
 8001650:	001a      	movs	r2, r3
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	189b      	adds	r3, r3, r2
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
 8001658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	00da      	lsls	r2, r3, #3
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	4a33      	ldr	r2, [pc, #204]	@ (8001730 <PCD_EP_ISR_Handler+0x6e0>)
 8001664:	4694      	mov	ip, r2
 8001666:	4463      	add	r3, ip
 8001668:	623b      	str	r3, [r7, #32]
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	059b      	lsls	r3, r3, #22
 8001672:	0d9b      	lsrs	r3, r3, #22
 8001674:	b29a      	uxth	r2, r3
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	801a      	strh	r2, [r3, #0]
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	4a2d      	ldr	r2, [pc, #180]	@ (8001738 <PCD_EP_ISR_Handler+0x6e8>)
 8001682:	4313      	orrs	r3, r2
 8001684:	b29a      	uxth	r2, r3
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	801a      	strh	r2, [r3, #0]
 800168a:	e070      	b.n	800176e <PCD_EP_ISR_Handler+0x71e>
 800168c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800168e:	785b      	ldrb	r3, [r3, #1]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d16c      	bne.n	800176e <PCD_EP_ISR_Handler+0x71e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2250      	movs	r2, #80	@ 0x50
 80016a0:	5a9b      	ldrh	r3, [r3, r2]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	001a      	movs	r2, r3
 80016a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a8:	189b      	adds	r3, r3, r2
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	00da      	lsls	r2, r3, #3
 80016b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b4:	18d3      	adds	r3, r2, r3
 80016b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001730 <PCD_EP_ISR_Handler+0x6e0>)
 80016b8:	4694      	mov	ip, r2
 80016ba:	4463      	add	r3, ip
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c0:	2200      	movs	r2, #0
 80016c2:	801a      	strh	r2, [r3, #0]
 80016c4:	e053      	b.n	800176e <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d133      	bne.n	800173c <PCD_EP_ISR_Handler+0x6ec>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2250      	movs	r2, #80	@ 0x50
 80016e0:	5a9b      	ldrh	r3, [r3, r2]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	001a      	movs	r2, r3
 80016e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016e8:	189b      	adds	r3, r3, r2
 80016ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80016ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	00da      	lsls	r2, r3, #3
 80016f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016f4:	18d3      	adds	r3, r2, r3
 80016f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <PCD_EP_ISR_Handler+0x6d4>)
 80016f8:	4694      	mov	ip, r2
 80016fa:	4463      	add	r3, ip
 80016fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80016fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	059b      	lsls	r3, r3, #22
 8001706:	0d9b      	lsrs	r3, r3, #22
 8001708:	b29a      	uxth	r2, r3
 800170a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <PCD_EP_ISR_Handler+0x6e8>)
 8001716:	4313      	orrs	r3, r2
 8001718:	b29a      	uxth	r2, r3
 800171a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	e026      	b.n	800176e <PCD_EP_ISR_Handler+0x71e>
 8001720:	00000f8f 	.word	0x00000f8f
 8001724:	00000406 	.word	0x00000406
 8001728:	ffff8f8f 	.word	0xffff8f8f
 800172c:	ffff80c0 	.word	0xffff80c0
 8001730:	00000402 	.word	0x00000402
 8001734:	ffff8f0f 	.word	0xffff8f0f
 8001738:	ffff8000 	.word	0xffff8000
 800173c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800173e:	785b      	ldrb	r3, [r3, #1]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d114      	bne.n	800176e <PCD_EP_ISR_Handler+0x71e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2250      	movs	r2, #80	@ 0x50
 800174a:	5a9b      	ldrh	r3, [r3, r2]
 800174c:	b29b      	uxth	r3, r3
 800174e:	001a      	movs	r2, r3
 8001750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001752:	189b      	adds	r3, r3, r2
 8001754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	00da      	lsls	r2, r3, #3
 800175c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800175e:	18d3      	adds	r3, r2, r3
 8001760:	4a3b      	ldr	r2, [pc, #236]	@ (8001850 <PCD_EP_ISR_Handler+0x800>)
 8001762:	4694      	mov	ip, r2
 8001764:	4463      	add	r3, ip
 8001766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800176e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001770:	781a      	ldrb	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	0011      	movs	r1, r2
 8001776:	0018      	movs	r0, r3
 8001778:	f005 fc22 	bl	8006fc0 <HAL_PCD_DataInStageCallback>
 800177c:	e058      	b.n	8001830 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800177e:	234c      	movs	r3, #76	@ 0x4c
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	881a      	ldrh	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	@ 0x80
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4013      	ands	r3, r2
 800178a:	d149      	bne.n	8001820 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2250      	movs	r2, #80	@ 0x50
 8001792:	5a9b      	ldrh	r3, [r3, r2]
 8001794:	b29b      	uxth	r3, r3
 8001796:	001a      	movs	r2, r3
 8001798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	18d2      	adds	r2, r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	18d3      	adds	r3, r2, r3
 80017a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001854 <PCD_EP_ISR_Handler+0x804>)
 80017a8:	4694      	mov	ip, r2
 80017aa:	4463      	add	r3, ip
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	2140      	movs	r1, #64	@ 0x40
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	0592      	lsls	r2, r2, #22
 80017b4:	0d92      	lsrs	r2, r2, #22
 80017b6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80017b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d907      	bls.n	80017d4 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 80017c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	1ad2      	subs	r2, r2, r3
 80017ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	e002      	b.n	80017da <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 80017d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80017da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d107      	bne.n	80017f2 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0011      	movs	r1, r2
 80017ea:	0018      	movs	r0, r3
 80017ec:	f005 fbe8 	bl	8006fc0 <HAL_PCD_DataInStageCallback>
 80017f0:	e01e      	b.n	8001830 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80017f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	2140      	movs	r1, #64	@ 0x40
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	18d2      	adds	r2, r2, r3
 80017fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001800:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	187b      	adds	r3, r7, r1
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	18d2      	adds	r2, r2, r3
 800180c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001816:	0011      	movs	r1, r2
 8001818:	0018      	movs	r0, r3
 800181a:	f002 f941 	bl	8003aa0 <USB_EPStartXfer>
 800181e:	e007      	b.n	8001830 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001820:	234c      	movs	r3, #76	@ 0x4c
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	881a      	ldrh	r2, [r3, #0]
 8001826:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0018      	movs	r0, r3
 800182c:	f000 f930 	bl	8001a90 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2244      	movs	r2, #68	@ 0x44
 8001836:	5a9b      	ldrh	r3, [r3, r2]
 8001838:	b29b      	uxth	r3, r3
 800183a:	b21b      	sxth	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	da01      	bge.n	8001844 <PCD_EP_ISR_Handler+0x7f4>
 8001840:	f7ff fc0c 	bl	800105c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	b016      	add	sp, #88	@ 0x58
 800184c:	bdb0      	pop	{r4, r5, r7, pc}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	00000406 	.word	0x00000406
 8001854:	00000402 	.word	0x00000402

08001858 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b089      	sub	sp, #36	@ 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	1dbb      	adds	r3, r7, #6
 8001864:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001866:	1dbb      	adds	r3, r7, #6
 8001868:	881a      	ldrh	r2, [r3, #0]
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	01db      	lsls	r3, r3, #7
 800186e:	4013      	ands	r3, r2
 8001870:	d100      	bne.n	8001874 <HAL_PCD_EP_DB_Receive+0x1c>
 8001872:	e07d      	b.n	8001970 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2250      	movs	r2, #80	@ 0x50
 800187a:	5a9b      	ldrh	r3, [r3, r2]
 800187c:	b29b      	uxth	r3, r3
 800187e:	001a      	movs	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	18d2      	adds	r2, r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	4a7a      	ldr	r2, [pc, #488]	@ (8001a78 <HAL_PCD_EP_DB_Receive+0x220>)
 8001890:	4694      	mov	ip, r2
 8001892:	4463      	add	r3, ip
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	211a      	movs	r1, #26
 8001898:	187b      	adds	r3, r7, r1
 800189a:	0592      	lsls	r2, r2, #22
 800189c:	0d92      	lsrs	r2, r2, #22
 800189e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d307      	bcc.n	80018bc <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	187b      	adds	r3, r7, r1
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	1ad2      	subs	r2, r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	619a      	str	r2, [r3, #24]
 80018ba:	e002      	b.n	80018c2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d121      	bne.n	800190e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	001a      	movs	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	18d3      	adds	r3, r2, r3
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	2018      	movs	r0, #24
 80018de:	183b      	adds	r3, r7, r0
 80018e0:	4966      	ldr	r1, [pc, #408]	@ (8001a7c <HAL_PCD_EP_DB_Receive+0x224>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	183b      	adds	r3, r7, r0
 80018e8:	183a      	adds	r2, r7, r0
 80018ea:	8812      	ldrh	r2, [r2, #0]
 80018ec:	2180      	movs	r1, #128	@ 0x80
 80018ee:	0189      	lsls	r1, r1, #6
 80018f0:	404a      	eors	r2, r1
 80018f2:	801a      	strh	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	001a      	movs	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	18d3      	adds	r3, r2, r3
 8001902:	183a      	adds	r2, r7, r0
 8001904:	8812      	ldrh	r2, [r2, #0]
 8001906:	495e      	ldr	r1, [pc, #376]	@ (8001a80 <HAL_PCD_EP_DB_Receive+0x228>)
 8001908:	430a      	orrs	r2, r1
 800190a:	b292      	uxth	r2, r2
 800190c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800190e:	1dbb      	adds	r3, r7, #6
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	2240      	movs	r2, #64	@ 0x40
 8001914:	4013      	ands	r3, r2
 8001916:	d01a      	beq.n	800194e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	001a      	movs	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	18d3      	adds	r3, r2, r3
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b29a      	uxth	r2, r3
 800192a:	2016      	movs	r0, #22
 800192c:	183b      	adds	r3, r7, r0
 800192e:	4955      	ldr	r1, [pc, #340]	@ (8001a84 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001930:	400a      	ands	r2, r1
 8001932:	801a      	strh	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	001a      	movs	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	18d3      	adds	r3, r2, r3
 8001942:	183a      	adds	r2, r7, r0
 8001944:	8812      	ldrh	r2, [r2, #0]
 8001946:	4950      	ldr	r1, [pc, #320]	@ (8001a88 <HAL_PCD_EP_DB_Receive+0x230>)
 8001948:	430a      	orrs	r2, r1
 800194a:	b292      	uxth	r2, r2
 800194c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800194e:	241a      	movs	r4, #26
 8001950:	193b      	adds	r3, r7, r4
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d100      	bne.n	800195a <HAL_PCD_EP_DB_Receive+0x102>
 8001958:	e086      	b.n	8001a68 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	6959      	ldr	r1, [r3, #20]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	891a      	ldrh	r2, [r3, #8]
 8001966:	193b      	adds	r3, r7, r4
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	f003 fb4d 	bl	8005008 <USB_ReadPMA>
 800196e:	e07b      	b.n	8001a68 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2250      	movs	r2, #80	@ 0x50
 8001976:	5a9b      	ldrh	r3, [r3, r2]
 8001978:	b29b      	uxth	r3, r3
 800197a:	001a      	movs	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	18d2      	adds	r2, r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	18d3      	adds	r3, r2, r3
 800198a:	4a40      	ldr	r2, [pc, #256]	@ (8001a8c <HAL_PCD_EP_DB_Receive+0x234>)
 800198c:	4694      	mov	ip, r2
 800198e:	4463      	add	r3, ip
 8001990:	881a      	ldrh	r2, [r3, #0]
 8001992:	211a      	movs	r1, #26
 8001994:	187b      	adds	r3, r7, r1
 8001996:	0592      	lsls	r2, r2, #22
 8001998:	0d92      	lsrs	r2, r2, #22
 800199a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d307      	bcc.n	80019b8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	1ad2      	subs	r2, r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	619a      	str	r2, [r3, #24]
 80019b6:	e002      	b.n	80019be <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d121      	bne.n	8001a0a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	001a      	movs	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	18d3      	adds	r3, r2, r3
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	201e      	movs	r0, #30
 80019da:	183b      	adds	r3, r7, r0
 80019dc:	4927      	ldr	r1, [pc, #156]	@ (8001a7c <HAL_PCD_EP_DB_Receive+0x224>)
 80019de:	400a      	ands	r2, r1
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	183b      	adds	r3, r7, r0
 80019e4:	183a      	adds	r2, r7, r0
 80019e6:	8812      	ldrh	r2, [r2, #0]
 80019e8:	2180      	movs	r1, #128	@ 0x80
 80019ea:	0189      	lsls	r1, r1, #6
 80019ec:	404a      	eors	r2, r1
 80019ee:	801a      	strh	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	001a      	movs	r2, r3
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	18d3      	adds	r3, r2, r3
 80019fe:	183a      	adds	r2, r7, r0
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	491f      	ldr	r1, [pc, #124]	@ (8001a80 <HAL_PCD_EP_DB_Receive+0x228>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	b292      	uxth	r2, r2
 8001a08:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001a0a:	1dbb      	adds	r3, r7, #6
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	2240      	movs	r2, #64	@ 0x40
 8001a10:	4013      	ands	r3, r2
 8001a12:	d11a      	bne.n	8001a4a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	001a      	movs	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	18d3      	adds	r3, r2, r3
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	201c      	movs	r0, #28
 8001a28:	183b      	adds	r3, r7, r0
 8001a2a:	4916      	ldr	r1, [pc, #88]	@ (8001a84 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	801a      	strh	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	001a      	movs	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	18d3      	adds	r3, r2, r3
 8001a3e:	183a      	adds	r2, r7, r0
 8001a40:	8812      	ldrh	r2, [r2, #0]
 8001a42:	4911      	ldr	r1, [pc, #68]	@ (8001a88 <HAL_PCD_EP_DB_Receive+0x230>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	b292      	uxth	r2, r2
 8001a48:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001a4a:	241a      	movs	r4, #26
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	6959      	ldr	r1, [r3, #20]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	895a      	ldrh	r2, [r3, #10]
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	f003 fad0 	bl	8005008 <USB_ReadPMA>
    }
  }

  return count;
 8001a68:	231a      	movs	r3, #26
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	881b      	ldrh	r3, [r3, #0]
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b009      	add	sp, #36	@ 0x24
 8001a74:	bd90      	pop	{r4, r7, pc}
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	00000402 	.word	0x00000402
 8001a7c:	ffffbf8f 	.word	0xffffbf8f
 8001a80:	ffff8080 	.word	0xffff8080
 8001a84:	ffff8f8f 	.word	0xffff8f8f
 8001a88:	ffff80c0 	.word	0xffff80c0
 8001a8c:	00000406 	.word	0x00000406

08001a90 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0a4      	sub	sp, #144	@ 0x90
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	1dbb      	adds	r3, r7, #6
 8001a9c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a9e:	1dbb      	adds	r3, r7, #6
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	2240      	movs	r2, #64	@ 0x40
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <HAL_PCD_EP_DB_Transmit+0x1a>
 8001aa8:	e1e4      	b.n	8001e74 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2250      	movs	r2, #80	@ 0x50
 8001ab0:	5a9b      	ldrh	r3, [r3, r2]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	18d2      	adds	r2, r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	18d3      	adds	r3, r2, r3
 8001ac4:	4ad0      	ldr	r2, [pc, #832]	@ (8001e08 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001ac6:	4694      	mov	ip, r2
 8001ac8:	4463      	add	r3, ip
 8001aca:	881a      	ldrh	r2, [r3, #0]
 8001acc:	2188      	movs	r1, #136	@ 0x88
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	0592      	lsls	r2, r2, #22
 8001ad2:	0d92      	lsrs	r2, r2, #22
 8001ad4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d907      	bls.n	8001af2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	1ad2      	subs	r2, r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	e002      	b.n	8001af8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d000      	beq.n	8001b02 <HAL_PCD_EP_DB_Transmit+0x72>
 8001b00:	e0b5      	b.n	8001c6e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d125      	bne.n	8001b56 <HAL_PCD_EP_DB_Transmit+0xc6>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2250      	movs	r2, #80	@ 0x50
 8001b16:	5a9b      	ldrh	r3, [r3, r2]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1e:	189b      	adds	r3, r3, r2
 8001b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	00da      	lsls	r2, r3, #3
 8001b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2a:	18d3      	adds	r3, r2, r3
 8001b2c:	4ab6      	ldr	r2, [pc, #728]	@ (8001e08 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001b2e:	4694      	mov	ip, r2
 8001b30:	4463      	add	r3, ip
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	059b      	lsls	r3, r3, #22
 8001b3c:	0d9b      	lsrs	r3, r3, #22
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	4ab0      	ldr	r2, [pc, #704]	@ (8001e0c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	801a      	strh	r2, [r3, #0]
 8001b54:	e01b      	b.n	8001b8e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	785b      	ldrb	r3, [r3, #1]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d117      	bne.n	8001b8e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2250      	movs	r2, #80	@ 0x50
 8001b6a:	5a9b      	ldrh	r3, [r3, r2]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	001a      	movs	r2, r3
 8001b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b72:	189b      	adds	r3, r3, r2
 8001b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	00da      	lsls	r2, r3, #3
 8001b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b7e:	18d3      	adds	r3, r2, r3
 8001b80:	4aa1      	ldr	r2, [pc, #644]	@ (8001e08 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001b82:	4694      	mov	ip, r2
 8001b84:	4463      	add	r3, ip
 8001b86:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	785b      	ldrb	r3, [r3, #1]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d125      	bne.n	8001be8 <HAL_PCD_EP_DB_Transmit+0x158>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2250      	movs	r2, #80	@ 0x50
 8001ba8:	5a9b      	ldrh	r3, [r3, r2]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	001a      	movs	r2, r3
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	189b      	adds	r3, r3, r2
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	00da      	lsls	r2, r3, #3
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	4a94      	ldr	r2, [pc, #592]	@ (8001e10 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001bc0:	4694      	mov	ip, r2
 8001bc2:	4463      	add	r3, ip
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	059b      	lsls	r3, r3, #22
 8001bce:	0d9b      	lsrs	r3, r3, #22
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	801a      	strh	r2, [r3, #0]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4a8b      	ldr	r2, [pc, #556]	@ (8001e0c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	e018      	b.n	8001c1a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	785b      	ldrb	r3, [r3, #1]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d114      	bne.n	8001c1a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2250      	movs	r2, #80	@ 0x50
 8001bf6:	5a9b      	ldrh	r3, [r3, r2]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	189b      	adds	r3, r3, r2
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	00da      	lsls	r2, r3, #3
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	18d3      	adds	r3, r2, r3
 8001c0c:	4a80      	ldr	r2, [pc, #512]	@ (8001e10 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001c0e:	4694      	mov	ip, r2
 8001c10:	4463      	add	r3, ip
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	2200      	movs	r2, #0
 8001c18:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	0011      	movs	r1, r2
 8001c22:	0018      	movs	r0, r3
 8001c24:	f005 f9cc 	bl	8006fc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c28:	1dbb      	adds	r3, r7, #6
 8001c2a:	881a      	ldrh	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	01db      	lsls	r3, r3, #7
 8001c30:	4013      	ands	r3, r2
 8001c32:	d100      	bne.n	8001c36 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001c34:	e308      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	18d3      	adds	r3, r2, r3
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	2016      	movs	r0, #22
 8001c4a:	183b      	adds	r3, r7, r0
 8001c4c:	4971      	ldr	r1, [pc, #452]	@ (8001e14 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	001a      	movs	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	18d3      	adds	r3, r2, r3
 8001c60:	183a      	adds	r2, r7, r0
 8001c62:	8812      	ldrh	r2, [r2, #0]
 8001c64:	496c      	ldr	r1, [pc, #432]	@ (8001e18 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	801a      	strh	r2, [r3, #0]
 8001c6c:	e2ec      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	881a      	ldrh	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	01db      	lsls	r3, r3, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	d01a      	beq.n	8001cb0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	001a      	movs	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	18d3      	adds	r3, r2, r3
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	208a      	movs	r0, #138	@ 0x8a
 8001c8e:	183b      	adds	r3, r7, r0
 8001c90:	4960      	ldr	r1, [pc, #384]	@ (8001e14 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001c92:	400a      	ands	r2, r1
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	18d3      	adds	r3, r2, r3
 8001ca4:	183a      	adds	r2, r7, r0
 8001ca6:	8812      	ldrh	r2, [r2, #0]
 8001ca8:	495b      	ldr	r1, [pc, #364]	@ (8001e18 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001caa:	430a      	orrs	r2, r1
 8001cac:	b292      	uxth	r2, r2
 8001cae:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2224      	movs	r2, #36	@ 0x24
 8001cb4:	5c9b      	ldrb	r3, [r3, r2]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d000      	beq.n	8001cbc <HAL_PCD_EP_DB_Transmit+0x22c>
 8001cba:	e2c5      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	2188      	movs	r1, #136	@ 0x88
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	18d2      	adds	r2, r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	18d2      	adds	r2, r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	6a1a      	ldr	r2, [r3, #32]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d30c      	bcc.n	8001d00 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	218c      	movs	r1, #140	@ 0x8c
 8001cec:	187a      	adds	r2, r7, r1
 8001cee:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	6a1a      	ldr	r2, [r3, #32]
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	1ad2      	subs	r2, r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	621a      	str	r2, [r3, #32]
 8001cfe:	e01a      	b.n	8001d36 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8001d08:	2388      	movs	r3, #136	@ 0x88
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	228c      	movs	r2, #140	@ 0x8c
 8001d10:	18ba      	adds	r2, r7, r2
 8001d12:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2224      	movs	r2, #36	@ 0x24
 8001d18:	2100      	movs	r1, #0
 8001d1a:	5499      	strb	r1, [r3, r2]
 8001d1c:	e00b      	b.n	8001d36 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2224      	movs	r2, #36	@ 0x24
 8001d22:	2100      	movs	r1, #0
 8001d24:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	228c      	movs	r2, #140	@ 0x8c
 8001d2c:	18ba      	adds	r2, r7, r2
 8001d2e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	785b      	ldrb	r3, [r3, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d000      	beq.n	8001d40 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8001d3e:	e06d      	b.n	8001e1c <HAL_PCD_EP_DB_Transmit+0x38c>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2250      	movs	r2, #80	@ 0x50
 8001d4c:	5a9b      	ldrh	r3, [r3, r2]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	001a      	movs	r2, r3
 8001d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d54:	189b      	adds	r3, r3, r2
 8001d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	00da      	lsls	r2, r3, #3
 8001d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d60:	18d3      	adds	r3, r2, r3
 8001d62:	4a29      	ldr	r2, [pc, #164]	@ (8001e08 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001d64:	4694      	mov	ip, r2
 8001d66:	4463      	add	r3, ip
 8001d68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	059b      	lsls	r3, r3, #22
 8001d72:	0d9b      	lsrs	r3, r3, #22
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	238c      	movs	r3, #140	@ 0x8c
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d108      	bne.n	8001d96 <HAL_PCD_EP_DB_Transmit+0x306>
 8001d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	4a20      	ldr	r2, [pc, #128]	@ (8001e0c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d92:	801a      	strh	r2, [r3, #0]
 8001d94:	e061      	b.n	8001e5a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8001d96:	228c      	movs	r2, #140	@ 0x8c
 8001d98:	18bb      	adds	r3, r7, r2
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d9e:	d817      	bhi.n	8001dd0 <HAL_PCD_EP_DB_Transmit+0x340>
 8001da0:	18bb      	adds	r3, r7, r2
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001da8:	18bb      	adds	r3, r7, r2
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	d002      	beq.n	8001db8 <HAL_PCD_EP_DB_Transmit+0x328>
 8001db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001db4:	3301      	adds	r3, #1
 8001db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	e044      	b.n	8001e5a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8001dd0:	228c      	movs	r2, #140	@ 0x8c
 8001dd2:	18bb      	adds	r3, r7, r2
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dda:	18bb      	adds	r3, r7, r2
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	221f      	movs	r2, #31
 8001de0:	4013      	ands	r3, r2
 8001de2:	d102      	bne.n	8001dea <HAL_PCD_EP_DB_Transmit+0x35a>
 8001de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001de6:	3b01      	subs	r3, #1
 8001de8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	029b      	lsls	r3, r3, #10
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4a03      	ldr	r2, [pc, #12]	@ (8001e0c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	e028      	b.n	8001e5a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8001e08:	00000402 	.word	0x00000402
 8001e0c:	ffff8000 	.word	0xffff8000
 8001e10:	00000406 	.word	0x00000406
 8001e14:	ffff8f8f 	.word	0xffff8f8f
 8001e18:	ffffc080 	.word	0xffffc080
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d11a      	bne.n	8001e5a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2250      	movs	r2, #80	@ 0x50
 8001e30:	5a9b      	ldrh	r3, [r3, r2]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	001a      	movs	r2, r3
 8001e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e38:	189b      	adds	r3, r3, r2
 8001e3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	00da      	lsls	r2, r3, #3
 8001e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e44:	18d3      	adds	r3, r2, r3
 8001e46:	4ad9      	ldr	r2, [pc, #868]	@ (80021ac <HAL_PCD_EP_DB_Transmit+0x71c>)
 8001e48:	4694      	mov	ip, r2
 8001e4a:	4463      	add	r3, ip
 8001e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e4e:	238c      	movs	r3, #140	@ 0x8c
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e58:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	6959      	ldr	r1, [r3, #20]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	891a      	ldrh	r2, [r3, #8]
 8001e66:	238c      	movs	r3, #140	@ 0x8c
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	f003 f881 	bl	8004f74 <USB_WritePMA>
 8001e72:	e1e9      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2250      	movs	r2, #80	@ 0x50
 8001e7a:	5a9b      	ldrh	r3, [r3, r2]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	001a      	movs	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	18d2      	adds	r2, r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	18d3      	adds	r3, r2, r3
 8001e8e:	4ac8      	ldr	r2, [pc, #800]	@ (80021b0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8001e90:	4694      	mov	ip, r2
 8001e92:	4463      	add	r3, ip
 8001e94:	881a      	ldrh	r2, [r3, #0]
 8001e96:	2188      	movs	r1, #136	@ 0x88
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	0592      	lsls	r2, r2, #22
 8001e9c:	0d92      	lsrs	r2, r2, #22
 8001e9e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	699a      	ldr	r2, [r3, #24]
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d307      	bcc.n	8001ebc <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	1ad2      	subs	r2, r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	619a      	str	r2, [r3, #24]
 8001eba:	e002      	b.n	8001ec2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d000      	beq.n	8001ecc <HAL_PCD_EP_DB_Transmit+0x43c>
 8001eca:	e0bb      	b.n	8002044 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d125      	bne.n	8001f20 <HAL_PCD_EP_DB_Transmit+0x490>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2250      	movs	r2, #80	@ 0x50
 8001ee0:	5a9b      	ldrh	r3, [r3, r2]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ee8:	189b      	adds	r3, r3, r2
 8001eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	00da      	lsls	r2, r3, #3
 8001ef2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ef4:	18d3      	adds	r3, r2, r3
 8001ef6:	4aad      	ldr	r2, [pc, #692]	@ (80021ac <HAL_PCD_EP_DB_Transmit+0x71c>)
 8001ef8:	4694      	mov	ip, r2
 8001efa:	4463      	add	r3, ip
 8001efc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001efe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	059b      	lsls	r3, r3, #22
 8001f06:	0d9b      	lsrs	r3, r3, #22
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4aa7      	ldr	r2, [pc, #668]	@ (80021b4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	e01b      	b.n	8001f58 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	785b      	ldrb	r3, [r3, #1]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d117      	bne.n	8001f58 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2250      	movs	r2, #80	@ 0x50
 8001f34:	5a9b      	ldrh	r3, [r3, r2]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	001a      	movs	r2, r3
 8001f3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f3c:	189b      	adds	r3, r3, r2
 8001f3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	00da      	lsls	r2, r3, #3
 8001f46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	4a98      	ldr	r2, [pc, #608]	@ (80021ac <HAL_PCD_EP_DB_Transmit+0x71c>)
 8001f4c:	4694      	mov	ip, r2
 8001f4e:	4463      	add	r3, ip
 8001f50:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f54:	2200      	movs	r2, #0
 8001f56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d12b      	bne.n	8001fbe <HAL_PCD_EP_DB_Transmit+0x52e>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2250      	movs	r2, #80	@ 0x50
 8001f72:	5a9b      	ldrh	r3, [r3, r2]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	001a      	movs	r2, r3
 8001f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f7a:	189b      	adds	r3, r3, r2
 8001f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	00da      	lsls	r2, r3, #3
 8001f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f86:	18d3      	adds	r3, r2, r3
 8001f88:	4a89      	ldr	r2, [pc, #548]	@ (80021b0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8001f8a:	4694      	mov	ip, r2
 8001f8c:	4463      	add	r3, ip
 8001f8e:	2184      	movs	r1, #132	@ 0x84
 8001f90:	187a      	adds	r2, r7, r1
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	059b      	lsls	r3, r3, #22
 8001f9e:	0d9b      	lsrs	r3, r3, #22
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	801a      	strh	r2, [r3, #0]
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4a80      	ldr	r2, [pc, #512]	@ (80021b4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	e018      	b.n	8001ff0 <HAL_PCD_EP_DB_Transmit+0x560>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	785b      	ldrb	r3, [r3, #1]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d114      	bne.n	8001ff0 <HAL_PCD_EP_DB_Transmit+0x560>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2250      	movs	r2, #80	@ 0x50
 8001fcc:	5a9b      	ldrh	r3, [r3, r2]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fd4:	189b      	adds	r3, r3, r2
 8001fd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	00da      	lsls	r2, r3, #3
 8001fde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fe0:	18d3      	adds	r3, r2, r3
 8001fe2:	4a73      	ldr	r2, [pc, #460]	@ (80021b0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8001fe4:	4694      	mov	ip, r2
 8001fe6:	4463      	add	r3, ip
 8001fe8:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fec:	2200      	movs	r2, #0
 8001fee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	0011      	movs	r1, r2
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f004 ffe1 	bl	8006fc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ffe:	1dbb      	adds	r3, r7, #6
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	01db      	lsls	r3, r3, #7
 8002006:	4013      	ands	r3, r2
 8002008:	d000      	beq.n	800200c <HAL_PCD_EP_DB_Transmit+0x57c>
 800200a:	e11d      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	001a      	movs	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29a      	uxth	r2, r3
 800201e:	2082      	movs	r0, #130	@ 0x82
 8002020:	183b      	adds	r3, r7, r0
 8002022:	4965      	ldr	r1, [pc, #404]	@ (80021b8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002024:	400a      	ands	r2, r1
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	001a      	movs	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	18d3      	adds	r3, r2, r3
 8002036:	183a      	adds	r2, r7, r0
 8002038:	8812      	ldrh	r2, [r2, #0]
 800203a:	4960      	ldr	r1, [pc, #384]	@ (80021bc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800203c:	430a      	orrs	r2, r1
 800203e:	b292      	uxth	r2, r2
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	e101      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002044:	1dbb      	adds	r3, r7, #6
 8002046:	881a      	ldrh	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	01db      	lsls	r3, r3, #7
 800204c:	4013      	ands	r3, r2
 800204e:	d11a      	bne.n	8002086 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	001a      	movs	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29a      	uxth	r2, r3
 8002062:	204e      	movs	r0, #78	@ 0x4e
 8002064:	183b      	adds	r3, r7, r0
 8002066:	4954      	ldr	r1, [pc, #336]	@ (80021b8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002068:	400a      	ands	r2, r1
 800206a:	801a      	strh	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	001a      	movs	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	18d3      	adds	r3, r2, r3
 800207a:	183a      	adds	r2, r7, r0
 800207c:	8812      	ldrh	r2, [r2, #0]
 800207e:	494f      	ldr	r1, [pc, #316]	@ (80021bc <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002080:	430a      	orrs	r2, r1
 8002082:	b292      	uxth	r2, r2
 8002084:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2224      	movs	r2, #36	@ 0x24
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d000      	beq.n	8002092 <HAL_PCD_EP_DB_Transmit+0x602>
 8002090:	e0da      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	2188      	movs	r1, #136	@ 0x88
 8002098:	187b      	adds	r3, r7, r1
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	18d2      	adds	r2, r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	18d2      	adds	r2, r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d30c      	bcc.n	80020d6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	218c      	movs	r1, #140	@ 0x8c
 80020c2:	187a      	adds	r2, r7, r1
 80020c4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	1ad2      	subs	r2, r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	621a      	str	r2, [r3, #32]
 80020d4:	e01a      	b.n	800210c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80020de:	2388      	movs	r3, #136	@ 0x88
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	228c      	movs	r2, #140	@ 0x8c
 80020e6:	18ba      	adds	r2, r7, r2
 80020e8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2224      	movs	r2, #36	@ 0x24
 80020ee:	2100      	movs	r1, #0
 80020f0:	5499      	strb	r1, [r3, r2]
 80020f2:	e00b      	b.n	800210c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	228c      	movs	r2, #140	@ 0x8c
 80020fa:	18ba      	adds	r2, r7, r2
 80020fc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2200      	movs	r2, #0
 8002102:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2224      	movs	r2, #36	@ 0x24
 8002108:	2100      	movs	r1, #0
 800210a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	657b      	str	r3, [r7, #84]	@ 0x54
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	785b      	ldrb	r3, [r3, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d000      	beq.n	800211c <HAL_PCD_EP_DB_Transmit+0x68c>
 800211a:	e06d      	b.n	80021f8 <HAL_PCD_EP_DB_Transmit+0x768>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2250      	movs	r2, #80	@ 0x50
 8002128:	5a9b      	ldrh	r3, [r3, r2]
 800212a:	b29b      	uxth	r3, r3
 800212c:	001a      	movs	r2, r3
 800212e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002130:	189b      	adds	r3, r3, r2
 8002132:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	00da      	lsls	r2, r3, #3
 800213a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	4a1c      	ldr	r2, [pc, #112]	@ (80021b0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8002140:	4694      	mov	ip, r2
 8002142:	4463      	add	r3, ip
 8002144:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	059b      	lsls	r3, r3, #22
 800214e:	0d9b      	lsrs	r3, r3, #22
 8002150:	b29a      	uxth	r2, r3
 8002152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002154:	801a      	strh	r2, [r3, #0]
 8002156:	238c      	movs	r3, #140	@ 0x8c
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8002160:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	4a13      	ldr	r2, [pc, #76]	@ (80021b4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002168:	4313      	orrs	r3, r2
 800216a:	b29a      	uxth	r2, r3
 800216c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	e05e      	b.n	8002230 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002172:	228c      	movs	r2, #140	@ 0x8c
 8002174:	18bb      	adds	r3, r7, r2
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b3e      	cmp	r3, #62	@ 0x3e
 800217a:	d821      	bhi.n	80021c0 <HAL_PCD_EP_DB_Transmit+0x730>
 800217c:	18bb      	adds	r3, r7, r2
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002184:	18bb      	adds	r3, r7, r2
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	4013      	ands	r3, r2
 800218c:	d002      	beq.n	8002194 <HAL_PCD_EP_DB_Transmit+0x704>
 800218e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002190:	3301      	adds	r3, #1
 8002192:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002194:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b29a      	uxth	r2, r3
 800219a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800219c:	b29b      	uxth	r3, r3
 800219e:	029b      	lsls	r3, r3, #10
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021a8:	801a      	strh	r2, [r3, #0]
 80021aa:	e041      	b.n	8002230 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80021ac:	00000402 	.word	0x00000402
 80021b0:	00000406 	.word	0x00000406
 80021b4:	ffff8000 	.word	0xffff8000
 80021b8:	ffff8f8f 	.word	0xffff8f8f
 80021bc:	ffffc080 	.word	0xffffc080
 80021c0:	228c      	movs	r2, #140	@ 0x8c
 80021c2:	18bb      	adds	r3, r7, r2
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021ca:	18bb      	adds	r3, r7, r2
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	221f      	movs	r2, #31
 80021d0:	4013      	ands	r3, r2
 80021d2:	d102      	bne.n	80021da <HAL_PCD_EP_DB_Transmit+0x74a>
 80021d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021d6:	3b01      	subs	r3, #1
 80021d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4a2c      	ldr	r2, [pc, #176]	@ (80022a0 <HAL_PCD_EP_DB_Transmit+0x810>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021f4:	801a      	strh	r2, [r3, #0]
 80021f6:	e01b      	b.n	8002230 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d117      	bne.n	8002230 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2250      	movs	r2, #80	@ 0x50
 8002206:	5a9b      	ldrh	r3, [r3, r2]
 8002208:	b29b      	uxth	r3, r3
 800220a:	001a      	movs	r2, r3
 800220c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220e:	189b      	adds	r3, r3, r2
 8002210:	657b      	str	r3, [r7, #84]	@ 0x54
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	00da      	lsls	r2, r3, #3
 8002218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221a:	18d3      	adds	r3, r2, r3
 800221c:	4a21      	ldr	r2, [pc, #132]	@ (80022a4 <HAL_PCD_EP_DB_Transmit+0x814>)
 800221e:	4694      	mov	ip, r2
 8002220:	4463      	add	r3, ip
 8002222:	653b      	str	r3, [r7, #80]	@ 0x50
 8002224:	238c      	movs	r3, #140	@ 0x8c
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29a      	uxth	r2, r3
 800222c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800222e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6959      	ldr	r1, [r3, #20]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	895a      	ldrh	r2, [r3, #10]
 800223c:	238c      	movs	r3, #140	@ 0x8c
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	f002 fe96 	bl	8004f74 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	001a      	movs	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	18d3      	adds	r3, r2, r3
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29a      	uxth	r2, r3
 800225a:	2014      	movs	r0, #20
 800225c:	183b      	adds	r3, r7, r0
 800225e:	4912      	ldr	r1, [pc, #72]	@ (80022a8 <HAL_PCD_EP_DB_Transmit+0x818>)
 8002260:	400a      	ands	r2, r1
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	183b      	adds	r3, r7, r0
 8002266:	183a      	adds	r2, r7, r0
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	2110      	movs	r1, #16
 800226c:	404a      	eors	r2, r1
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	183b      	adds	r3, r7, r0
 8002272:	183a      	adds	r2, r7, r0
 8002274:	8812      	ldrh	r2, [r2, #0]
 8002276:	2120      	movs	r1, #32
 8002278:	404a      	eors	r2, r1
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	001a      	movs	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	18d3      	adds	r3, r2, r3
 800228a:	183a      	adds	r2, r7, r0
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	4907      	ldr	r1, [pc, #28]	@ (80022ac <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002290:	430a      	orrs	r2, r1
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b024      	add	sp, #144	@ 0x90
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	ffff8000 	.word	0xffff8000
 80022a4:	00000406 	.word	0x00000406
 80022a8:	ffff8fbf 	.word	0xffff8fbf
 80022ac:	ffff8080 	.word	0xffff8080

080022b0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	0008      	movs	r0, r1
 80022ba:	0011      	movs	r1, r2
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	240a      	movs	r4, #10
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	1c02      	adds	r2, r0, #0
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	2308      	movs	r3, #8
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	1c0a      	adds	r2, r1, #0
 80022cc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022ce:	0021      	movs	r1, r4
 80022d0:	187b      	adds	r3, r7, r1
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	2280      	movs	r2, #128	@ 0x80
 80022d6:	4013      	ands	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00c      	beq.n	80022f8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	2207      	movs	r2, #7
 80022e4:	401a      	ands	r2, r3
 80022e6:	0013      	movs	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	3310      	adds	r3, #16
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	18d3      	adds	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e00b      	b.n	8002310 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022f8:	230a      	movs	r3, #10
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	881a      	ldrh	r2, [r3, #0]
 80022fe:	0013      	movs	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	189b      	adds	r3, r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	3351      	adds	r3, #81	@ 0x51
 8002308:	33ff      	adds	r3, #255	@ 0xff
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	18d3      	adds	r3, r2, r3
 800230e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002310:	2308      	movs	r3, #8
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2200      	movs	r2, #0
 800231e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	b29a      	uxth	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	80da      	strh	r2, [r3, #6]
 8002328:	e00b      	b.n	8002342 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2201      	movs	r2, #1
 800232e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	b29a      	uxth	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	0c1b      	lsrs	r3, r3, #16
 800233c:	b29a      	uxth	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b007      	add	sp, #28
 800234a:	bd90      	pop	{r4, r7, pc}

0800234c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	23b4      	movs	r3, #180	@ 0xb4
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	2101      	movs	r1, #1
 8002362:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	23b2      	movs	r3, #178	@ 0xb2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	2100      	movs	r1, #0
 800236c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2254      	movs	r2, #84	@ 0x54
 8002372:	5a9b      	ldrh	r3, [r3, r2]
 8002374:	b29b      	uxth	r3, r3
 8002376:	2201      	movs	r2, #1
 8002378:	4313      	orrs	r3, r2
 800237a:	b299      	uxth	r1, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2254      	movs	r2, #84	@ 0x54
 8002380:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2254      	movs	r2, #84	@ 0x54
 8002386:	5a9b      	ldrh	r3, [r3, r2]
 8002388:	b29b      	uxth	r3, r3
 800238a:	2202      	movs	r2, #2
 800238c:	4313      	orrs	r3, r2
 800238e:	b299      	uxth	r1, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2254      	movs	r2, #84	@ 0x54
 8002394:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b004      	add	sp, #16
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	000a      	movs	r2, r1
 80023aa:	1cfb      	adds	r3, r7, #3
 80023ac:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f000 fb76 	bl	8002ab8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_RCC_OscConfig+0x20>
 80023d6:	e08e      	b.n	80024f6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023d8:	4bc5      	ldr	r3, [pc, #788]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	220c      	movs	r2, #12
 80023de:	4013      	ands	r3, r2
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d00e      	beq.n	8002402 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e4:	4bc2      	ldr	r3, [pc, #776]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	220c      	movs	r2, #12
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d117      	bne.n	8002420 <HAL_RCC_OscConfig+0x68>
 80023f0:	4bbf      	ldr	r3, [pc, #764]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	23c0      	movs	r3, #192	@ 0xc0
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	401a      	ands	r2, r3
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	025b      	lsls	r3, r3, #9
 80023fe:	429a      	cmp	r2, r3
 8002400:	d10e      	bne.n	8002420 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	4bbb      	ldr	r3, [pc, #748]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	029b      	lsls	r3, r3, #10
 800240a:	4013      	ands	r3, r2
 800240c:	d100      	bne.n	8002410 <HAL_RCC_OscConfig+0x58>
 800240e:	e071      	b.n	80024f4 <HAL_RCC_OscConfig+0x13c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d000      	beq.n	800241a <HAL_RCC_OscConfig+0x62>
 8002418:	e06c      	b.n	80024f4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f000 fb4c 	bl	8002ab8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x80>
 8002428:	4bb1      	ldr	r3, [pc, #708]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4bb0      	ldr	r3, [pc, #704]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800242e:	2180      	movs	r1, #128	@ 0x80
 8002430:	0249      	lsls	r1, r1, #9
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e02f      	b.n	8002498 <HAL_RCC_OscConfig+0xe0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10c      	bne.n	800245a <HAL_RCC_OscConfig+0xa2>
 8002440:	4bab      	ldr	r3, [pc, #684]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4baa      	ldr	r3, [pc, #680]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002446:	49ab      	ldr	r1, [pc, #684]	@ (80026f4 <HAL_RCC_OscConfig+0x33c>)
 8002448:	400a      	ands	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	4ba8      	ldr	r3, [pc, #672]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4ba7      	ldr	r3, [pc, #668]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002452:	49a9      	ldr	r1, [pc, #676]	@ (80026f8 <HAL_RCC_OscConfig+0x340>)
 8002454:	400a      	ands	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e01e      	b.n	8002498 <HAL_RCC_OscConfig+0xe0>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b05      	cmp	r3, #5
 8002460:	d10e      	bne.n	8002480 <HAL_RCC_OscConfig+0xc8>
 8002462:	4ba3      	ldr	r3, [pc, #652]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4ba2      	ldr	r3, [pc, #648]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002468:	2180      	movs	r1, #128	@ 0x80
 800246a:	02c9      	lsls	r1, r1, #11
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	4b9f      	ldr	r3, [pc, #636]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b9e      	ldr	r3, [pc, #632]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002476:	2180      	movs	r1, #128	@ 0x80
 8002478:	0249      	lsls	r1, r1, #9
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xe0>
 8002480:	4b9b      	ldr	r3, [pc, #620]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b9a      	ldr	r3, [pc, #616]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002486:	499b      	ldr	r1, [pc, #620]	@ (80026f4 <HAL_RCC_OscConfig+0x33c>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	4b98      	ldr	r3, [pc, #608]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b97      	ldr	r3, [pc, #604]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002492:	4999      	ldr	r1, [pc, #612]	@ (80026f8 <HAL_RCC_OscConfig+0x340>)
 8002494:	400a      	ands	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d014      	beq.n	80024ca <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe f83c 	bl	800051c <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024aa:	f7fe f837 	bl	800051c <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b64      	cmp	r3, #100	@ 0x64
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e2fd      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024bc:	4b8c      	ldr	r3, [pc, #560]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	029b      	lsls	r3, r3, #10
 80024c4:	4013      	ands	r3, r2
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0xf2>
 80024c8:	e015      	b.n	80024f6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe f827 	bl	800051c <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d4:	f7fe f822 	bl	800051c <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e2e8      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b82      	ldr	r3, [pc, #520]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	029b      	lsls	r3, r3, #10
 80024ee:	4013      	ands	r3, r2
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x11c>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2202      	movs	r2, #2
 80024fc:	4013      	ands	r3, r2
 80024fe:	d100      	bne.n	8002502 <HAL_RCC_OscConfig+0x14a>
 8002500:	e06c      	b.n	80025dc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002502:	4b7b      	ldr	r3, [pc, #492]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	220c      	movs	r2, #12
 8002508:	4013      	ands	r3, r2
 800250a:	d00e      	beq.n	800252a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800250c:	4b78      	ldr	r3, [pc, #480]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	220c      	movs	r2, #12
 8002512:	4013      	ands	r3, r2
 8002514:	2b08      	cmp	r3, #8
 8002516:	d11f      	bne.n	8002558 <HAL_RCC_OscConfig+0x1a0>
 8002518:	4b75      	ldr	r3, [pc, #468]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	23c0      	movs	r3, #192	@ 0xc0
 800251e:	025b      	lsls	r3, r3, #9
 8002520:	401a      	ands	r2, r3
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	429a      	cmp	r2, r3
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b71      	ldr	r3, [pc, #452]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x188>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e2bb      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b6b      	ldr	r3, [pc, #428]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	22f8      	movs	r2, #248	@ 0xf8
 8002546:	4393      	bics	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00da      	lsls	r2, r3, #3
 8002550:	4b67      	ldr	r3, [pc, #412]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e041      	b.n	80025dc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d024      	beq.n	80025aa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b63      	ldr	r3, [pc, #396]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b62      	ldr	r3, [pc, #392]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002566:	2101      	movs	r1, #1
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fd ffd6 	bl	800051c <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002576:	f7fd ffd1 	bl	800051c <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e297      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2202      	movs	r2, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d0f1      	beq.n	8002576 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b57      	ldr	r3, [pc, #348]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	22f8      	movs	r2, #248	@ 0xf8
 8002598:	4393      	bics	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	00da      	lsls	r2, r3, #3
 80025a2:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e018      	b.n	80025dc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b51      	ldr	r3, [pc, #324]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80025b0:	2101      	movs	r1, #1
 80025b2:	438a      	bics	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fd ffb1 	bl	800051c <HAL_GetTick>
 80025ba:	0003      	movs	r3, r0
 80025bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c0:	f7fd ffac 	bl	800051c <HAL_GetTick>
 80025c4:	0002      	movs	r2, r0
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e272      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2202      	movs	r2, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d1f1      	bne.n	80025c0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2208      	movs	r2, #8
 80025e2:	4013      	ands	r3, r2
 80025e4:	d036      	beq.n	8002654 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d019      	beq.n	8002622 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b40      	ldr	r3, [pc, #256]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80025f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f2:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80025f4:	2101      	movs	r1, #1
 80025f6:	430a      	orrs	r2, r1
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fd ff8f 	bl	800051c <HAL_GetTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002604:	f7fd ff8a 	bl	800051c <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e250      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
 800261e:	d0f1      	beq.n	8002604 <HAL_RCC_OscConfig+0x24c>
 8002620:	e018      	b.n	8002654 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b33      	ldr	r3, [pc, #204]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002626:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002628:	2101      	movs	r1, #1
 800262a:	438a      	bics	r2, r1
 800262c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7fd ff75 	bl	800051c <HAL_GetTick>
 8002632:	0003      	movs	r3, r0
 8002634:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002638:	f7fd ff70 	bl	800051c <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e236      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264a:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d1f1      	bne.n	8002638 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2204      	movs	r2, #4
 800265a:	4013      	ands	r3, r2
 800265c:	d100      	bne.n	8002660 <HAL_RCC_OscConfig+0x2a8>
 800265e:	e0b5      	b.n	80027cc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002660:	201f      	movs	r0, #31
 8002662:	183b      	adds	r3, r7, r0
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002668:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	055b      	lsls	r3, r3, #21
 8002670:	4013      	ands	r3, r2
 8002672:	d110      	bne.n	8002696 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b1e      	ldr	r3, [pc, #120]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 800267a:	2180      	movs	r1, #128	@ 0x80
 800267c:	0549      	lsls	r1, r1, #21
 800267e:	430a      	orrs	r2, r1
 8002680:	61da      	str	r2, [r3, #28]
 8002682:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	055b      	lsls	r3, r3, #21
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002690:	183b      	adds	r3, r7, r0
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_RCC_OscConfig+0x344>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4013      	ands	r3, r2
 80026a0:	d11a      	bne.n	80026d8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <HAL_RCC_OscConfig+0x344>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <HAL_RCC_OscConfig+0x344>)
 80026a8:	2180      	movs	r1, #128	@ 0x80
 80026aa:	0049      	lsls	r1, r1, #1
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b0:	f7fd ff34 	bl	800051c <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ba:	f7fd ff2f 	bl	800051c <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b64      	cmp	r3, #100	@ 0x64
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1f5      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_RCC_OscConfig+0x344>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4013      	ands	r3, r2
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d10f      	bne.n	8002700 <HAL_RCC_OscConfig+0x348>
 80026e0:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	4b02      	ldr	r3, [pc, #8]	@ (80026f0 <HAL_RCC_OscConfig+0x338>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	621a      	str	r2, [r3, #32]
 80026ec:	e036      	b.n	800275c <HAL_RCC_OscConfig+0x3a4>
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	40021000 	.word	0x40021000
 80026f4:	fffeffff 	.word	0xfffeffff
 80026f8:	fffbffff 	.word	0xfffbffff
 80026fc:	40007000 	.word	0x40007000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10c      	bne.n	8002722 <HAL_RCC_OscConfig+0x36a>
 8002708:	4bca      	ldr	r3, [pc, #808]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	4bc9      	ldr	r3, [pc, #804]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800270e:	2101      	movs	r1, #1
 8002710:	438a      	bics	r2, r1
 8002712:	621a      	str	r2, [r3, #32]
 8002714:	4bc7      	ldr	r3, [pc, #796]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002716:	6a1a      	ldr	r2, [r3, #32]
 8002718:	4bc6      	ldr	r3, [pc, #792]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800271a:	2104      	movs	r1, #4
 800271c:	438a      	bics	r2, r1
 800271e:	621a      	str	r2, [r3, #32]
 8002720:	e01c      	b.n	800275c <HAL_RCC_OscConfig+0x3a4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b05      	cmp	r3, #5
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x38c>
 800272a:	4bc2      	ldr	r3, [pc, #776]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	4bc1      	ldr	r3, [pc, #772]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002730:	2104      	movs	r1, #4
 8002732:	430a      	orrs	r2, r1
 8002734:	621a      	str	r2, [r3, #32]
 8002736:	4bbf      	ldr	r3, [pc, #764]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	4bbe      	ldr	r3, [pc, #760]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	621a      	str	r2, [r3, #32]
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0x3a4>
 8002744:	4bbb      	ldr	r3, [pc, #748]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002746:	6a1a      	ldr	r2, [r3, #32]
 8002748:	4bba      	ldr	r3, [pc, #744]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800274a:	2101      	movs	r1, #1
 800274c:	438a      	bics	r2, r1
 800274e:	621a      	str	r2, [r3, #32]
 8002750:	4bb8      	ldr	r3, [pc, #736]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002752:	6a1a      	ldr	r2, [r3, #32]
 8002754:	4bb7      	ldr	r3, [pc, #732]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002756:	2104      	movs	r1, #4
 8002758:	438a      	bics	r2, r1
 800275a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d014      	beq.n	800278e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fd feda 	bl	800051c <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e009      	b.n	8002782 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fd fed5 	bl	800051c <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	4aaf      	ldr	r2, [pc, #700]	@ (8002a38 <HAL_RCC_OscConfig+0x680>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e19a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	4bac      	ldr	r3, [pc, #688]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x3b6>
 800278c:	e013      	b.n	80027b6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7fd fec5 	bl	800051c <HAL_GetTick>
 8002792:	0003      	movs	r3, r0
 8002794:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002796:	e009      	b.n	80027ac <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fd fec0 	bl	800051c <HAL_GetTick>
 800279c:	0002      	movs	r2, r0
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	4aa5      	ldr	r2, [pc, #660]	@ (8002a38 <HAL_RCC_OscConfig+0x680>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e185      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	4ba1      	ldr	r3, [pc, #644]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027b6:	231f      	movs	r3, #31
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d105      	bne.n	80027cc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c0:	4b9c      	ldr	r3, [pc, #624]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80027c2:	69da      	ldr	r2, [r3, #28]
 80027c4:	4b9b      	ldr	r3, [pc, #620]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80027c6:	499d      	ldr	r1, [pc, #628]	@ (8002a3c <HAL_RCC_OscConfig+0x684>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	4013      	ands	r3, r2
 80027d4:	d063      	beq.n	800289e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d12a      	bne.n	8002834 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027de:	4b95      	ldr	r3, [pc, #596]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80027e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e2:	4b94      	ldr	r3, [pc, #592]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80027e4:	2104      	movs	r1, #4
 80027e6:	430a      	orrs	r2, r1
 80027e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027ea:	4b92      	ldr	r3, [pc, #584]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80027ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ee:	4b91      	ldr	r3, [pc, #580]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80027f0:	2101      	movs	r1, #1
 80027f2:	430a      	orrs	r2, r1
 80027f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fd fe91 	bl	800051c <HAL_GetTick>
 80027fa:	0003      	movs	r3, r0
 80027fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002800:	f7fd fe8c 	bl	800051c <HAL_GetTick>
 8002804:	0002      	movs	r2, r0
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e152      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002812:	4b88      	ldr	r3, [pc, #544]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d0f1      	beq.n	8002800 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800281c:	4b85      	ldr	r3, [pc, #532]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800281e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002820:	22f8      	movs	r2, #248	@ 0xf8
 8002822:	4393      	bics	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	00da      	lsls	r2, r3, #3
 800282c:	4b81      	ldr	r3, [pc, #516]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800282e:	430a      	orrs	r2, r1
 8002830:	635a      	str	r2, [r3, #52]	@ 0x34
 8002832:	e034      	b.n	800289e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	3305      	adds	r3, #5
 800283a:	d111      	bne.n	8002860 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800283c:	4b7d      	ldr	r3, [pc, #500]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800283e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002840:	4b7c      	ldr	r3, [pc, #496]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002842:	2104      	movs	r1, #4
 8002844:	438a      	bics	r2, r1
 8002846:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002848:	4b7a      	ldr	r3, [pc, #488]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	22f8      	movs	r2, #248	@ 0xf8
 800284e:	4393      	bics	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	00da      	lsls	r2, r3, #3
 8002858:	4b76      	ldr	r3, [pc, #472]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800285a:	430a      	orrs	r2, r1
 800285c:	635a      	str	r2, [r3, #52]	@ 0x34
 800285e:	e01e      	b.n	800289e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002860:	4b74      	ldr	r3, [pc, #464]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002864:	4b73      	ldr	r3, [pc, #460]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002866:	2104      	movs	r1, #4
 8002868:	430a      	orrs	r2, r1
 800286a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800286c:	4b71      	ldr	r3, [pc, #452]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800286e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002870:	4b70      	ldr	r3, [pc, #448]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002872:	2101      	movs	r1, #1
 8002874:	438a      	bics	r2, r1
 8002876:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7fd fe50 	bl	800051c <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002882:	f7fd fe4b 	bl	800051c <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e111      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002894:	4b67      	ldr	r3, [pc, #412]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002898:	2202      	movs	r2, #2
 800289a:	4013      	ands	r3, r2
 800289c:	d1f1      	bne.n	8002882 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2220      	movs	r2, #32
 80028a4:	4013      	ands	r3, r2
 80028a6:	d05c      	beq.n	8002962 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80028a8:	4b62      	ldr	r3, [pc, #392]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	220c      	movs	r2, #12
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b0c      	cmp	r3, #12
 80028b2:	d00e      	beq.n	80028d2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	220c      	movs	r2, #12
 80028ba:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d114      	bne.n	80028ea <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	23c0      	movs	r3, #192	@ 0xc0
 80028c6:	025b      	lsls	r3, r3, #9
 80028c8:	401a      	ands	r2, r3
 80028ca:	23c0      	movs	r3, #192	@ 0xc0
 80028cc:	025b      	lsls	r3, r3, #9
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d10b      	bne.n	80028ea <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028d2:	4b58      	ldr	r3, [pc, #352]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80028d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	029b      	lsls	r3, r3, #10
 80028da:	4013      	ands	r3, r2
 80028dc:	d040      	beq.n	8002960 <HAL_RCC_OscConfig+0x5a8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d03c      	beq.n	8002960 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0e6      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01b      	beq.n	800292a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028f2:	4b50      	ldr	r3, [pc, #320]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80028f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	0249      	lsls	r1, r1, #9
 80028fc:	430a      	orrs	r2, r1
 80028fe:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fd fe0c 	bl	800051c <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800290a:	f7fd fe07 	bl	800051c <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e0cd      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800291c:	4b45      	ldr	r3, [pc, #276]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800291e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	029b      	lsls	r3, r3, #10
 8002924:	4013      	ands	r3, r2
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x552>
 8002928:	e01b      	b.n	8002962 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800292a:	4b42      	ldr	r3, [pc, #264]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800292c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800292e:	4b41      	ldr	r3, [pc, #260]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002930:	4943      	ldr	r1, [pc, #268]	@ (8002a40 <HAL_RCC_OscConfig+0x688>)
 8002932:	400a      	ands	r2, r1
 8002934:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fd fdf1 	bl	800051c <HAL_GetTick>
 800293a:	0003      	movs	r3, r0
 800293c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002940:	f7fd fdec 	bl	800051c <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0b2      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002952:	4b38      	ldr	r3, [pc, #224]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	029b      	lsls	r3, r3, #10
 800295a:	4013      	ands	r3, r2
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x588>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002960:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d100      	bne.n	800296c <HAL_RCC_OscConfig+0x5b4>
 800296a:	e0a4      	b.n	8002ab6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296c:	4b31      	ldr	r3, [pc, #196]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	220c      	movs	r2, #12
 8002972:	4013      	ands	r3, r2
 8002974:	2b08      	cmp	r3, #8
 8002976:	d100      	bne.n	800297a <HAL_RCC_OscConfig+0x5c2>
 8002978:	e078      	b.n	8002a6c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	2b02      	cmp	r3, #2
 8002980:	d14c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b2b      	ldr	r3, [pc, #172]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002988:	492e      	ldr	r1, [pc, #184]	@ (8002a44 <HAL_RCC_OscConfig+0x68c>)
 800298a:	400a      	ands	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fd fdc5 	bl	800051c <HAL_GetTick>
 8002992:	0003      	movs	r3, r0
 8002994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002998:	f7fd fdc0 	bl	800051c <HAL_GetTick>
 800299c:	0002      	movs	r2, r0
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e086      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029aa:	4b22      	ldr	r3, [pc, #136]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	049b      	lsls	r3, r3, #18
 80029b2:	4013      	ands	r3, r2
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ba:	220f      	movs	r2, #15
 80029bc:	4393      	bics	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002a48 <HAL_RCC_OscConfig+0x690>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	0019      	movs	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	431a      	orrs	r2, r3
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e4:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 80029ea:	2180      	movs	r1, #128	@ 0x80
 80029ec:	0449      	lsls	r1, r1, #17
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fd fd93 	bl	800051c <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fd fd8e 	bl	800051c <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e054      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0e:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	049b      	lsls	r3, r3, #18
 8002a16:	4013      	ands	r3, r2
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x644>
 8002a1a:	e04c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <HAL_RCC_OscConfig+0x67c>)
 8002a22:	4908      	ldr	r1, [pc, #32]	@ (8002a44 <HAL_RCC_OscConfig+0x68c>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fd fd78 	bl	800051c <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a30:	e015      	b.n	8002a5e <HAL_RCC_OscConfig+0x6a6>
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	40021000 	.word	0x40021000
 8002a38:	00001388 	.word	0x00001388
 8002a3c:	efffffff 	.word	0xefffffff
 8002a40:	fffeffff 	.word	0xfffeffff
 8002a44:	feffffff 	.word	0xfeffffff
 8002a48:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fd fd66 	bl	800051c <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e02c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5e:	4b18      	ldr	r3, [pc, #96]	@ (8002ac0 <HAL_RCC_OscConfig+0x708>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	@ 0x80
 8002a64:	049b      	lsls	r3, r3, #18
 8002a66:	4013      	ands	r3, r2
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x694>
 8002a6a:	e024      	b.n	8002ab6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e01f      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <HAL_RCC_OscConfig+0x708>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ac0 <HAL_RCC_OscConfig+0x708>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	23c0      	movs	r3, #192	@ 0xc0
 8002a88:	025b      	lsls	r3, r3, #9
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d10e      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	220f      	movs	r2, #15
 8002a98:	401a      	ands	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	23f0      	movs	r3, #240	@ 0xf0
 8002aa6:	039b      	lsls	r3, r3, #14
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b008      	add	sp, #32
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0bf      	b.n	8002c58 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b61      	ldr	r3, [pc, #388]	@ (8002c60 <HAL_RCC_ClockConfig+0x19c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d911      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b5e      	ldr	r3, [pc, #376]	@ (8002c60 <HAL_RCC_ClockConfig+0x19c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2201      	movs	r2, #1
 8002aec:	4393      	bics	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	4b5b      	ldr	r3, [pc, #364]	@ (8002c60 <HAL_RCC_ClockConfig+0x19c>)
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af8:	4b59      	ldr	r3, [pc, #356]	@ (8002c60 <HAL_RCC_ClockConfig+0x19c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0a6      	b.n	8002c58 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	4013      	ands	r3, r2
 8002b12:	d015      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d006      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b1e:	4b51      	ldr	r3, [pc, #324]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4b50      	ldr	r3, [pc, #320]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002b24:	21e0      	movs	r1, #224	@ 0xe0
 8002b26:	00c9      	lsls	r1, r1, #3
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	22f0      	movs	r2, #240	@ 0xf0
 8002b32:	4393      	bics	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	4013      	ands	r3, r2
 8002b48:	d04c      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b44      	ldr	r3, [pc, #272]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	@ 0x80
 8002b58:	029b      	lsls	r3, r3, #10
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d120      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07a      	b.n	8002c58 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	049b      	lsls	r3, r3, #18
 8002b72:	4013      	ands	r3, r2
 8002b74:	d114      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e06e      	b.n	8002c58 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b82:	4b38      	ldr	r3, [pc, #224]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d108      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e062      	b.n	8002c58 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4b34      	ldr	r3, [pc, #208]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2202      	movs	r2, #2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e05b      	b.n	8002c58 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba0:	4b30      	ldr	r3, [pc, #192]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	4393      	bics	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	4b2d      	ldr	r3, [pc, #180]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7fd fcb2 	bl	800051c <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbc:	e009      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbe:	f7fd fcad 	bl	800051c <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	4a27      	ldr	r2, [pc, #156]	@ (8002c68 <HAL_RCC_ClockConfig+0x1a4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e042      	b.n	8002c58 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	4b24      	ldr	r3, [pc, #144]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	401a      	ands	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1ec      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <HAL_RCC_ClockConfig+0x19c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d211      	bcs.n	8002c16 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <HAL_RCC_ClockConfig+0x19c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <HAL_RCC_ClockConfig+0x19c>)
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c04:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <HAL_RCC_ClockConfig+0x19c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e020      	b.n	8002c58 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a11      	ldr	r2, [pc, #68]	@ (8002c6c <HAL_RCC_ClockConfig+0x1a8>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c34:	f000 f820 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c38:	0001      	movs	r1, r0
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	220f      	movs	r2, #15
 8002c42:	4013      	ands	r3, r2
 8002c44:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ac>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	000a      	movs	r2, r1
 8002c4a:	40da      	lsrs	r2, r3
 8002c4c:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <HAL_RCC_ClockConfig+0x1b0>)
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c50:	2003      	movs	r0, #3
 8002c52:	f7fd fc1d 	bl	8000490 <HAL_InitTick>
  
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b004      	add	sp, #16
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	00001388 	.word	0x00001388
 8002c6c:	fffff8ff 	.word	0xfffff8ff
 8002c70:	08007684 	.word	0x08007684
 8002c74:	20000000 	.word	0x20000000

08002c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c92:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d046      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0xb8>
 8002ca2:	d848      	bhi.n	8002d36 <HAL_RCC_GetSysClockFreq+0xbe>
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d002      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x36>
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x3c>
 8002cac:	e043      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cae:	4b27      	ldr	r3, [pc, #156]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cb0:	613b      	str	r3, [r7, #16]
      break;
 8002cb2:	e043      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	0c9b      	lsrs	r3, r3, #18
 8002cb8:	220f      	movs	r2, #15
 8002cba:	4013      	ands	r3, r2
 8002cbc:	4a24      	ldr	r2, [pc, #144]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cc2:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	4013      	ands	r3, r2
 8002cca:	4a22      	ldr	r2, [pc, #136]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002ccc:	5cd3      	ldrb	r3, [r2, r3]
 8002cce:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	23c0      	movs	r3, #192	@ 0xc0
 8002cd4:	025b      	lsls	r3, r3, #9
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	025b      	lsls	r3, r3, #9
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d109      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	481a      	ldr	r0, [pc, #104]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ce4:	f7fd fa10 	bl	8000108 <__udivsi3>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	001a      	movs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4353      	muls	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e01a      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	23c0      	movs	r3, #192	@ 0xc0
 8002cf8:	025b      	lsls	r3, r3, #9
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	23c0      	movs	r3, #192	@ 0xc0
 8002cfe:	025b      	lsls	r3, r3, #9
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d109      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4814      	ldr	r0, [pc, #80]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d08:	f7fd f9fe 	bl	8000108 <__udivsi3>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	001a      	movs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4353      	muls	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	480c      	ldr	r0, [pc, #48]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d1c:	f7fd f9f4 	bl	8000108 <__udivsi3>
 8002d20:	0003      	movs	r3, r0
 8002d22:	001a      	movs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4353      	muls	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	613b      	str	r3, [r7, #16]
      break;
 8002d2e:	e005      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d30:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d32:	613b      	str	r3, [r7, #16]
      break;
 8002d34:	e002      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d36:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d38:	613b      	str	r3, [r7, #16]
      break;
 8002d3a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d3c:	693b      	ldr	r3, [r7, #16]
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b006      	add	sp, #24
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	007a1200 	.word	0x007a1200
 8002d50:	08007694 	.word	0x08007694
 8002d54:	080076a4 	.word	0x080076a4
 8002d58:	02dc6c00 	.word	0x02dc6c00

08002d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	4013      	ands	r3, r2
 8002d76:	d100      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d78:	e08e      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2017      	movs	r0, #23
 8002d7c:	183b      	adds	r3, r7, r0
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d82:	4b67      	ldr	r3, [pc, #412]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	2380      	movs	r3, #128	@ 0x80
 8002d88:	055b      	lsls	r3, r3, #21
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d110      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	4b64      	ldr	r3, [pc, #400]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	4b63      	ldr	r3, [pc, #396]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d94:	2180      	movs	r1, #128	@ 0x80
 8002d96:	0549      	lsls	r1, r1, #21
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	61da      	str	r2, [r3, #28]
 8002d9c:	4b60      	ldr	r3, [pc, #384]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	055b      	lsls	r3, r3, #21
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	183b      	adds	r3, r7, r0
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4013      	ands	r3, r2
 8002dba:	d11a      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbc:	4b59      	ldr	r3, [pc, #356]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b58      	ldr	r3, [pc, #352]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002dc2:	2180      	movs	r1, #128	@ 0x80
 8002dc4:	0049      	lsls	r1, r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dca:	f7fd fba7 	bl	800051c <HAL_GetTick>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd2:	e008      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fd fba2 	bl	800051c <HAL_GetTick>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	@ 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e097      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de6:	4b4f      	ldr	r3, [pc, #316]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002df2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	23c0      	movs	r3, #192	@ 0xc0
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d034      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	23c0      	movs	r3, #192	@ 0xc0
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d02c      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e14:	4b42      	ldr	r3, [pc, #264]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a43      	ldr	r2, [pc, #268]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e1e:	4b40      	ldr	r3, [pc, #256]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	4b3f      	ldr	r3, [pc, #252]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	0249      	lsls	r1, r1, #9
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e2e:	6a1a      	ldr	r2, [r3, #32]
 8002e30:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e32:	493e      	ldr	r1, [pc, #248]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e38:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fd fb69 	bl	800051c <HAL_GetTick>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	e009      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e50:	f7fd fb64 	bl	800051c <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	4a35      	ldr	r2, [pc, #212]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e058      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b2e      	ldr	r3, [pc, #184]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4a2d      	ldr	r2, [pc, #180]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4b28      	ldr	r3, [pc, #160]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e82:	2317      	movs	r3, #23
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8c:	4b24      	ldr	r3, [pc, #144]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e92:	4928      	ldr	r1, [pc, #160]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e94:	400a      	ands	r2, r1
 8002e96:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec0:	4b17      	ldr	r3, [pc, #92]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	4393      	bics	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	029b      	lsls	r3, r3, #10
 8002edc:	4013      	ands	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	2280      	movs	r2, #128	@ 0x80
 8002ee6:	4393      	bics	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4013      	ands	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f00:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	2240      	movs	r2, #64	@ 0x40
 8002f06:	4393      	bics	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f10:	430a      	orrs	r2, r1
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b006      	add	sp, #24
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	fffffcff 	.word	0xfffffcff
 8002f2c:	fffeffff 	.word	0xfffeffff
 8002f30:	00001388 	.word	0x00001388
 8002f34:	efffffff 	.word	0xefffffff

08002f38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2244      	movs	r2, #68	@ 0x44
 8002f44:	2100      	movs	r1, #0
 8002f46:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f48:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <USB_EnableGlobalInt+0x28>)
 8002f4a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	b299      	uxth	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2240      	movs	r2, #64	@ 0x40
 8002f54:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	0000bf80 	.word	0x0000bf80

08002f64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f6c:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <USB_DisableGlobalInt+0x30>)
 8002f6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2240      	movs	r2, #64	@ 0x40
 8002f74:	5a9b      	ldrh	r3, [r3, r2]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	43d2      	mvns	r2, r2
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	4013      	ands	r3, r2
 8002f82:	b299      	uxth	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2240      	movs	r2, #64	@ 0x40
 8002f88:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	0000bf80 	.word	0x0000bf80

08002f98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	6019      	str	r1, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	2101      	movs	r1, #1
 8002fac:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2240      	movs	r2, #64	@ 0x40
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2244      	movs	r2, #68	@ 0x44
 8002fba:	2100      	movs	r1, #0
 8002fbc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2250      	movs	r2, #80	@ 0x50
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b004      	add	sp, #16
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b09c      	sub	sp, #112	@ 0x70
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fda:	236f      	movs	r3, #111	@ 0x6f
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	18d3      	adds	r3, r2, r3
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	236c      	movs	r3, #108	@ 0x6c
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	49a1      	ldr	r1, [pc, #644]	@ (800327c <USB_ActivateEndpoint+0x2ac>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	78db      	ldrb	r3, [r3, #3]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d017      	beq.n	8003032 <USB_ActivateEndpoint+0x62>
 8003002:	dc28      	bgt.n	8003056 <USB_ActivateEndpoint+0x86>
 8003004:	2b02      	cmp	r3, #2
 8003006:	d00e      	beq.n	8003026 <USB_ActivateEndpoint+0x56>
 8003008:	dc25      	bgt.n	8003056 <USB_ActivateEndpoint+0x86>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <USB_ActivateEndpoint+0x44>
 800300e:	2b01      	cmp	r3, #1
 8003010:	d018      	beq.n	8003044 <USB_ActivateEndpoint+0x74>
 8003012:	e020      	b.n	8003056 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003014:	226c      	movs	r2, #108	@ 0x6c
 8003016:	18bb      	adds	r3, r7, r2
 8003018:	18ba      	adds	r2, r7, r2
 800301a:	8812      	ldrh	r2, [r2, #0]
 800301c:	2180      	movs	r1, #128	@ 0x80
 800301e:	0089      	lsls	r1, r1, #2
 8003020:	430a      	orrs	r2, r1
 8003022:	801a      	strh	r2, [r3, #0]
      break;
 8003024:	e01c      	b.n	8003060 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003026:	226c      	movs	r2, #108	@ 0x6c
 8003028:	18bb      	adds	r3, r7, r2
 800302a:	18ba      	adds	r2, r7, r2
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	801a      	strh	r2, [r3, #0]
      break;
 8003030:	e016      	b.n	8003060 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003032:	226c      	movs	r2, #108	@ 0x6c
 8003034:	18bb      	adds	r3, r7, r2
 8003036:	18ba      	adds	r2, r7, r2
 8003038:	8812      	ldrh	r2, [r2, #0]
 800303a:	21c0      	movs	r1, #192	@ 0xc0
 800303c:	00c9      	lsls	r1, r1, #3
 800303e:	430a      	orrs	r2, r1
 8003040:	801a      	strh	r2, [r3, #0]
      break;
 8003042:	e00d      	b.n	8003060 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003044:	226c      	movs	r2, #108	@ 0x6c
 8003046:	18bb      	adds	r3, r7, r2
 8003048:	18ba      	adds	r2, r7, r2
 800304a:	8812      	ldrh	r2, [r2, #0]
 800304c:	2180      	movs	r1, #128	@ 0x80
 800304e:	00c9      	lsls	r1, r1, #3
 8003050:	430a      	orrs	r2, r1
 8003052:	801a      	strh	r2, [r3, #0]
      break;
 8003054:	e004      	b.n	8003060 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003056:	236f      	movs	r3, #111	@ 0x6f
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
      break;
 800305e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	18d3      	adds	r3, r2, r3
 800306a:	226c      	movs	r2, #108	@ 0x6c
 800306c:	18ba      	adds	r2, r7, r2
 800306e:	8812      	ldrh	r2, [r2, #0]
 8003070:	4983      	ldr	r1, [pc, #524]	@ (8003280 <USB_ActivateEndpoint+0x2b0>)
 8003072:	430a      	orrs	r2, r1
 8003074:	b292      	uxth	r2, r2
 8003076:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	b21b      	sxth	r3, r3
 8003088:	4a7e      	ldr	r2, [pc, #504]	@ (8003284 <USB_ActivateEndpoint+0x2b4>)
 800308a:	4013      	ands	r3, r2
 800308c:	b21a      	sxth	r2, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b21b      	sxth	r3, r3
 8003094:	4313      	orrs	r3, r2
 8003096:	b21a      	sxth	r2, r3
 8003098:	2166      	movs	r1, #102	@ 0x66
 800309a:	187b      	adds	r3, r7, r1
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	18d3      	adds	r3, r2, r3
 80030a8:	187a      	adds	r2, r7, r1
 80030aa:	8812      	ldrh	r2, [r2, #0]
 80030ac:	4974      	ldr	r1, [pc, #464]	@ (8003280 <USB_ActivateEndpoint+0x2b0>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	b292      	uxth	r2, r2
 80030b2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	7b1b      	ldrb	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d000      	beq.n	80030be <USB_ActivateEndpoint+0xee>
 80030bc:	e177      	b.n	80033ae <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d100      	bne.n	80030c8 <USB_ActivateEndpoint+0xf8>
 80030c6:	e07a      	b.n	80031be <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2250      	movs	r2, #80	@ 0x50
 80030d0:	5a9b      	ldrh	r3, [r3, r2]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	001a      	movs	r2, r3
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	189b      	adds	r3, r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	00da      	lsls	r2, r3, #3
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	18d3      	adds	r3, r2, r3
 80030e6:	2280      	movs	r2, #128	@ 0x80
 80030e8:	00d2      	lsls	r2, r2, #3
 80030ea:	4694      	mov	ip, r2
 80030ec:	4463      	add	r3, ip
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	88db      	ldrh	r3, [r3, #6]
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	18db      	adds	r3, r3, r3
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	18d2      	adds	r2, r2, r3
 800310a:	2112      	movs	r1, #18
 800310c:	187b      	adds	r3, r7, r1
 800310e:	8812      	ldrh	r2, [r2, #0]
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	187b      	adds	r3, r7, r1
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	2240      	movs	r2, #64	@ 0x40
 8003118:	4013      	ands	r3, r2
 800311a:	d016      	beq.n	800314a <USB_ActivateEndpoint+0x17a>
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	18d3      	adds	r3, r2, r3
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b29a      	uxth	r2, r3
 800312a:	2010      	movs	r0, #16
 800312c:	183b      	adds	r3, r7, r0
 800312e:	4955      	ldr	r1, [pc, #340]	@ (8003284 <USB_ActivateEndpoint+0x2b4>)
 8003130:	400a      	ands	r2, r1
 8003132:	801a      	strh	r2, [r3, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	183a      	adds	r2, r7, r0
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	4951      	ldr	r1, [pc, #324]	@ (8003288 <USB_ActivateEndpoint+0x2b8>)
 8003144:	430a      	orrs	r2, r1
 8003146:	b292      	uxth	r2, r2
 8003148:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	78db      	ldrb	r3, [r3, #3]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d01d      	beq.n	800318e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	18d3      	adds	r3, r2, r3
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29a      	uxth	r2, r3
 8003160:	200c      	movs	r0, #12
 8003162:	183b      	adds	r3, r7, r0
 8003164:	4949      	ldr	r1, [pc, #292]	@ (800328c <USB_ActivateEndpoint+0x2bc>)
 8003166:	400a      	ands	r2, r1
 8003168:	801a      	strh	r2, [r3, #0]
 800316a:	183b      	adds	r3, r7, r0
 800316c:	183a      	adds	r2, r7, r0
 800316e:	8812      	ldrh	r2, [r2, #0]
 8003170:	2120      	movs	r1, #32
 8003172:	404a      	eors	r2, r1
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	18d3      	adds	r3, r2, r3
 8003180:	183a      	adds	r2, r7, r0
 8003182:	8812      	ldrh	r2, [r2, #0]
 8003184:	493e      	ldr	r1, [pc, #248]	@ (8003280 <USB_ActivateEndpoint+0x2b0>)
 8003186:	430a      	orrs	r2, r1
 8003188:	b292      	uxth	r2, r2
 800318a:	801a      	strh	r2, [r3, #0]
 800318c:	e2b5      	b.n	80036fa <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	18d3      	adds	r3, r2, r3
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29a      	uxth	r2, r3
 800319c:	200e      	movs	r0, #14
 800319e:	183b      	adds	r3, r7, r0
 80031a0:	493a      	ldr	r1, [pc, #232]	@ (800328c <USB_ActivateEndpoint+0x2bc>)
 80031a2:	400a      	ands	r2, r1
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	18d3      	adds	r3, r2, r3
 80031b0:	183a      	adds	r2, r7, r0
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	4932      	ldr	r1, [pc, #200]	@ (8003280 <USB_ActivateEndpoint+0x2b0>)
 80031b6:	430a      	orrs	r2, r1
 80031b8:	b292      	uxth	r2, r2
 80031ba:	801a      	strh	r2, [r3, #0]
 80031bc:	e29d      	b.n	80036fa <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2250      	movs	r2, #80	@ 0x50
 80031c6:	5a9b      	ldrh	r3, [r3, r2]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	001a      	movs	r2, r3
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	00da      	lsls	r2, r3, #3
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	18d3      	adds	r3, r2, r3
 80031dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003290 <USB_ActivateEndpoint+0x2c0>)
 80031de:	4694      	mov	ip, r2
 80031e0:	4463      	add	r3, ip
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	88db      	ldrh	r3, [r3, #6]
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	18db      	adds	r3, r3, r3
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2250      	movs	r2, #80	@ 0x50
 80031fc:	5a9b      	ldrh	r3, [r3, r2]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	001a      	movs	r2, r3
 8003202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003204:	189b      	adds	r3, r3, r2
 8003206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	00da      	lsls	r2, r3, #3
 800320e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	4a20      	ldr	r2, [pc, #128]	@ (8003294 <USB_ActivateEndpoint+0x2c4>)
 8003214:	4694      	mov	ip, r2
 8003216:	4463      	add	r3, ip
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	059b      	lsls	r3, r3, #22
 8003222:	0d9b      	lsrs	r3, r3, #22
 8003224:	b29a      	uxth	r2, r3
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	801a      	strh	r2, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <USB_ActivateEndpoint+0x274>
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <USB_ActivateEndpoint+0x2c8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	b29a      	uxth	r2, r3
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	e045      	b.n	80032d0 <USB_ActivateEndpoint+0x300>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b3e      	cmp	r3, #62	@ 0x3e
 800324a:	d827      	bhi.n	800329c <USB_ActivateEndpoint+0x2cc>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2201      	movs	r2, #1
 800325a:	4013      	ands	r3, r2
 800325c:	d002      	beq.n	8003264 <USB_ActivateEndpoint+0x294>
 800325e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003260:	3301      	adds	r3, #1
 8003262:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	b29a      	uxth	r2, r3
 800326a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800326c:	b29b      	uxth	r3, r3
 800326e:	029b      	lsls	r3, r3, #10
 8003270:	b29b      	uxth	r3, r3
 8003272:	4313      	orrs	r3, r2
 8003274:	b29a      	uxth	r2, r3
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	801a      	strh	r2, [r3, #0]
 800327a:	e029      	b.n	80032d0 <USB_ActivateEndpoint+0x300>
 800327c:	ffff898f 	.word	0xffff898f
 8003280:	ffff8080 	.word	0xffff8080
 8003284:	ffff8f8f 	.word	0xffff8f8f
 8003288:	ffff80c0 	.word	0xffff80c0
 800328c:	ffff8fbf 	.word	0xffff8fbf
 8003290:	00000404 	.word	0x00000404
 8003294:	00000406 	.word	0x00000406
 8003298:	ffff8000 	.word	0xffff8000
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	221f      	movs	r2, #31
 80032aa:	4013      	ands	r3, r2
 80032ac:	d102      	bne.n	80032b4 <USB_ActivateEndpoint+0x2e4>
 80032ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032b0:	3b01      	subs	r3, #1
 80032b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032bc:	b29b      	uxth	r3, r3
 80032be:	029b      	lsls	r3, r3, #10
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4ab5      	ldr	r2, [pc, #724]	@ (800359c <USB_ActivateEndpoint+0x5cc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	18d2      	adds	r2, r2, r3
 80032da:	2122      	movs	r1, #34	@ 0x22
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	8812      	ldrh	r2, [r2, #0]
 80032e0:	801a      	strh	r2, [r3, #0]
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	2380      	movs	r3, #128	@ 0x80
 80032e8:	01db      	lsls	r3, r3, #7
 80032ea:	4013      	ands	r3, r2
 80032ec:	d016      	beq.n	800331c <USB_ActivateEndpoint+0x34c>
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	18d3      	adds	r3, r2, r3
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	2020      	movs	r0, #32
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	49a7      	ldr	r1, [pc, #668]	@ (80035a0 <USB_ActivateEndpoint+0x5d0>)
 8003302:	400a      	ands	r2, r1
 8003304:	801a      	strh	r2, [r3, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	18d3      	adds	r3, r2, r3
 8003310:	183a      	adds	r2, r7, r0
 8003312:	8812      	ldrh	r2, [r2, #0]
 8003314:	49a3      	ldr	r1, [pc, #652]	@ (80035a4 <USB_ActivateEndpoint+0x5d4>)
 8003316:	430a      	orrs	r2, r1
 8003318:	b292      	uxth	r2, r2
 800331a:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d125      	bne.n	8003370 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	18d3      	adds	r3, r2, r3
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	b29a      	uxth	r2, r3
 8003332:	201c      	movs	r0, #28
 8003334:	183b      	adds	r3, r7, r0
 8003336:	499c      	ldr	r1, [pc, #624]	@ (80035a8 <USB_ActivateEndpoint+0x5d8>)
 8003338:	400a      	ands	r2, r1
 800333a:	801a      	strh	r2, [r3, #0]
 800333c:	183b      	adds	r3, r7, r0
 800333e:	183a      	adds	r2, r7, r0
 8003340:	8812      	ldrh	r2, [r2, #0]
 8003342:	2180      	movs	r1, #128	@ 0x80
 8003344:	0149      	lsls	r1, r1, #5
 8003346:	404a      	eors	r2, r1
 8003348:	801a      	strh	r2, [r3, #0]
 800334a:	183b      	adds	r3, r7, r0
 800334c:	183a      	adds	r2, r7, r0
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	0189      	lsls	r1, r1, #6
 8003354:	404a      	eors	r2, r1
 8003356:	801a      	strh	r2, [r3, #0]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	183a      	adds	r2, r7, r0
 8003364:	8812      	ldrh	r2, [r2, #0]
 8003366:	4991      	ldr	r1, [pc, #580]	@ (80035ac <USB_ActivateEndpoint+0x5dc>)
 8003368:	430a      	orrs	r2, r1
 800336a:	b292      	uxth	r2, r2
 800336c:	801a      	strh	r2, [r3, #0]
 800336e:	e1c4      	b.n	80036fa <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	18d3      	adds	r3, r2, r3
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29a      	uxth	r2, r3
 800337e:	201e      	movs	r0, #30
 8003380:	183b      	adds	r3, r7, r0
 8003382:	4989      	ldr	r1, [pc, #548]	@ (80035a8 <USB_ActivateEndpoint+0x5d8>)
 8003384:	400a      	ands	r2, r1
 8003386:	801a      	strh	r2, [r3, #0]
 8003388:	183b      	adds	r3, r7, r0
 800338a:	183a      	adds	r2, r7, r0
 800338c:	8812      	ldrh	r2, [r2, #0]
 800338e:	2180      	movs	r1, #128	@ 0x80
 8003390:	0189      	lsls	r1, r1, #6
 8003392:	404a      	eors	r2, r1
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	18d3      	adds	r3, r2, r3
 80033a0:	183a      	adds	r2, r7, r0
 80033a2:	8812      	ldrh	r2, [r2, #0]
 80033a4:	4981      	ldr	r1, [pc, #516]	@ (80035ac <USB_ActivateEndpoint+0x5dc>)
 80033a6:	430a      	orrs	r2, r1
 80033a8:	b292      	uxth	r2, r2
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	e1a5      	b.n	80036fa <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	78db      	ldrb	r3, [r3, #3]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d117      	bne.n	80033e6 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	18d3      	adds	r3, r2, r3
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	2062      	movs	r0, #98	@ 0x62
 80033c6:	183b      	adds	r3, r7, r0
 80033c8:	4975      	ldr	r1, [pc, #468]	@ (80035a0 <USB_ActivateEndpoint+0x5d0>)
 80033ca:	400a      	ands	r2, r1
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	18d3      	adds	r3, r2, r3
 80033d8:	183a      	adds	r2, r7, r0
 80033da:	8812      	ldrh	r2, [r2, #0]
 80033dc:	4974      	ldr	r1, [pc, #464]	@ (80035b0 <USB_ActivateEndpoint+0x5e0>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	b292      	uxth	r2, r2
 80033e2:	801a      	strh	r2, [r3, #0]
 80033e4:	e016      	b.n	8003414 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	18d3      	adds	r3, r2, r3
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	2064      	movs	r0, #100	@ 0x64
 80033f6:	183b      	adds	r3, r7, r0
 80033f8:	496e      	ldr	r1, [pc, #440]	@ (80035b4 <USB_ActivateEndpoint+0x5e4>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	801a      	strh	r2, [r3, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	18d3      	adds	r3, r2, r3
 8003408:	183a      	adds	r2, r7, r0
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	4967      	ldr	r1, [pc, #412]	@ (80035ac <USB_ActivateEndpoint+0x5dc>)
 800340e:	430a      	orrs	r2, r1
 8003410:	b292      	uxth	r2, r2
 8003412:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2250      	movs	r2, #80	@ 0x50
 800341c:	5a9b      	ldrh	r3, [r3, r2]
 800341e:	b29b      	uxth	r3, r3
 8003420:	001a      	movs	r2, r3
 8003422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003424:	189b      	adds	r3, r3, r2
 8003426:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	00da      	lsls	r2, r3, #3
 800342e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003430:	18d3      	adds	r3, r2, r3
 8003432:	2280      	movs	r2, #128	@ 0x80
 8003434:	00d2      	lsls	r2, r2, #3
 8003436:	4694      	mov	ip, r2
 8003438:	4463      	add	r3, ip
 800343a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	891b      	ldrh	r3, [r3, #8]
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	b29b      	uxth	r3, r3
 8003444:	18db      	adds	r3, r3, r3
 8003446:	b29a      	uxth	r2, r3
 8003448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800344a:	801a      	strh	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2250      	movs	r2, #80	@ 0x50
 8003454:	5a9b      	ldrh	r3, [r3, r2]
 8003456:	b29b      	uxth	r3, r3
 8003458:	001a      	movs	r2, r3
 800345a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345c:	189b      	adds	r3, r3, r2
 800345e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	00da      	lsls	r2, r3, #3
 8003466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003468:	18d3      	adds	r3, r2, r3
 800346a:	4a53      	ldr	r2, [pc, #332]	@ (80035b8 <USB_ActivateEndpoint+0x5e8>)
 800346c:	4694      	mov	ip, r2
 800346e:	4463      	add	r3, ip
 8003470:	653b      	str	r3, [r7, #80]	@ 0x50
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	895b      	ldrh	r3, [r3, #10]
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	b29b      	uxth	r3, r3
 800347a:	18db      	adds	r3, r3, r3
 800347c:	b29a      	uxth	r2, r3
 800347e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003480:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	785b      	ldrb	r3, [r3, #1]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d000      	beq.n	800348c <USB_ActivateEndpoint+0x4bc>
 800348a:	e09b      	b.n	80035c4 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	18d2      	adds	r2, r2, r3
 8003496:	2140      	movs	r1, #64	@ 0x40
 8003498:	187b      	adds	r3, r7, r1
 800349a:	8812      	ldrh	r2, [r2, #0]
 800349c:	801a      	strh	r2, [r3, #0]
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	881a      	ldrh	r2, [r3, #0]
 80034a2:	2380      	movs	r3, #128	@ 0x80
 80034a4:	01db      	lsls	r3, r3, #7
 80034a6:	4013      	ands	r3, r2
 80034a8:	d016      	beq.n	80034d8 <USB_ActivateEndpoint+0x508>
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	18d3      	adds	r3, r2, r3
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	203e      	movs	r0, #62	@ 0x3e
 80034ba:	183b      	adds	r3, r7, r0
 80034bc:	4938      	ldr	r1, [pc, #224]	@ (80035a0 <USB_ActivateEndpoint+0x5d0>)
 80034be:	400a      	ands	r2, r1
 80034c0:	801a      	strh	r2, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	18d3      	adds	r3, r2, r3
 80034cc:	183a      	adds	r2, r7, r0
 80034ce:	8812      	ldrh	r2, [r2, #0]
 80034d0:	4934      	ldr	r1, [pc, #208]	@ (80035a4 <USB_ActivateEndpoint+0x5d4>)
 80034d2:	430a      	orrs	r2, r1
 80034d4:	b292      	uxth	r2, r2
 80034d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	18d2      	adds	r2, r2, r3
 80034e2:	213c      	movs	r1, #60	@ 0x3c
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	8812      	ldrh	r2, [r2, #0]
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	2240      	movs	r2, #64	@ 0x40
 80034f0:	4013      	ands	r3, r2
 80034f2:	d016      	beq.n	8003522 <USB_ActivateEndpoint+0x552>
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	18d3      	adds	r3, r2, r3
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29a      	uxth	r2, r3
 8003502:	203a      	movs	r0, #58	@ 0x3a
 8003504:	183b      	adds	r3, r7, r0
 8003506:	4926      	ldr	r1, [pc, #152]	@ (80035a0 <USB_ActivateEndpoint+0x5d0>)
 8003508:	400a      	ands	r2, r1
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	18d3      	adds	r3, r2, r3
 8003516:	183a      	adds	r2, r7, r0
 8003518:	8812      	ldrh	r2, [r2, #0]
 800351a:	4928      	ldr	r1, [pc, #160]	@ (80035bc <USB_ActivateEndpoint+0x5ec>)
 800351c:	430a      	orrs	r2, r1
 800351e:	b292      	uxth	r2, r2
 8003520:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	18d3      	adds	r3, r2, r3
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29a      	uxth	r2, r3
 8003530:	2038      	movs	r0, #56	@ 0x38
 8003532:	183b      	adds	r3, r7, r0
 8003534:	491c      	ldr	r1, [pc, #112]	@ (80035a8 <USB_ActivateEndpoint+0x5d8>)
 8003536:	400a      	ands	r2, r1
 8003538:	801a      	strh	r2, [r3, #0]
 800353a:	183b      	adds	r3, r7, r0
 800353c:	183a      	adds	r2, r7, r0
 800353e:	8812      	ldrh	r2, [r2, #0]
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	0149      	lsls	r1, r1, #5
 8003544:	404a      	eors	r2, r1
 8003546:	801a      	strh	r2, [r3, #0]
 8003548:	183b      	adds	r3, r7, r0
 800354a:	183a      	adds	r2, r7, r0
 800354c:	8812      	ldrh	r2, [r2, #0]
 800354e:	2180      	movs	r1, #128	@ 0x80
 8003550:	0189      	lsls	r1, r1, #6
 8003552:	404a      	eors	r2, r1
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	18d3      	adds	r3, r2, r3
 8003560:	183a      	adds	r2, r7, r0
 8003562:	8812      	ldrh	r2, [r2, #0]
 8003564:	4911      	ldr	r1, [pc, #68]	@ (80035ac <USB_ActivateEndpoint+0x5dc>)
 8003566:	430a      	orrs	r2, r1
 8003568:	b292      	uxth	r2, r2
 800356a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	18d3      	adds	r3, r2, r3
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29a      	uxth	r2, r3
 800357a:	2036      	movs	r0, #54	@ 0x36
 800357c:	183b      	adds	r3, r7, r0
 800357e:	4910      	ldr	r1, [pc, #64]	@ (80035c0 <USB_ActivateEndpoint+0x5f0>)
 8003580:	400a      	ands	r2, r1
 8003582:	801a      	strh	r2, [r3, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	18d3      	adds	r3, r2, r3
 800358e:	183a      	adds	r2, r7, r0
 8003590:	8812      	ldrh	r2, [r2, #0]
 8003592:	4906      	ldr	r1, [pc, #24]	@ (80035ac <USB_ActivateEndpoint+0x5dc>)
 8003594:	430a      	orrs	r2, r1
 8003596:	b292      	uxth	r2, r2
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	e0ae      	b.n	80036fa <USB_ActivateEndpoint+0x72a>
 800359c:	ffff8000 	.word	0xffff8000
 80035a0:	ffff8f8f 	.word	0xffff8f8f
 80035a4:	ffffc080 	.word	0xffffc080
 80035a8:	ffffbf8f 	.word	0xffffbf8f
 80035ac:	ffff8080 	.word	0xffff8080
 80035b0:	ffff8180 	.word	0xffff8180
 80035b4:	ffff8e8f 	.word	0xffff8e8f
 80035b8:	00000404 	.word	0x00000404
 80035bc:	ffff80c0 	.word	0xffff80c0
 80035c0:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	18d2      	adds	r2, r2, r3
 80035ce:	214e      	movs	r1, #78	@ 0x4e
 80035d0:	187b      	adds	r3, r7, r1
 80035d2:	8812      	ldrh	r2, [r2, #0]
 80035d4:	801a      	strh	r2, [r3, #0]
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	2380      	movs	r3, #128	@ 0x80
 80035dc:	01db      	lsls	r3, r3, #7
 80035de:	4013      	ands	r3, r2
 80035e0:	d016      	beq.n	8003610 <USB_ActivateEndpoint+0x640>
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	18d3      	adds	r3, r2, r3
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	204c      	movs	r0, #76	@ 0x4c
 80035f2:	183b      	adds	r3, r7, r0
 80035f4:	4944      	ldr	r1, [pc, #272]	@ (8003708 <USB_ActivateEndpoint+0x738>)
 80035f6:	400a      	ands	r2, r1
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	18d3      	adds	r3, r2, r3
 8003604:	183a      	adds	r2, r7, r0
 8003606:	8812      	ldrh	r2, [r2, #0]
 8003608:	4940      	ldr	r1, [pc, #256]	@ (800370c <USB_ActivateEndpoint+0x73c>)
 800360a:	430a      	orrs	r2, r1
 800360c:	b292      	uxth	r2, r2
 800360e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	18d2      	adds	r2, r2, r3
 800361a:	214a      	movs	r1, #74	@ 0x4a
 800361c:	187b      	adds	r3, r7, r1
 800361e:	8812      	ldrh	r2, [r2, #0]
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	187b      	adds	r3, r7, r1
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	2240      	movs	r2, #64	@ 0x40
 8003628:	4013      	ands	r3, r2
 800362a:	d016      	beq.n	800365a <USB_ActivateEndpoint+0x68a>
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29a      	uxth	r2, r3
 800363a:	2048      	movs	r0, #72	@ 0x48
 800363c:	183b      	adds	r3, r7, r0
 800363e:	4932      	ldr	r1, [pc, #200]	@ (8003708 <USB_ActivateEndpoint+0x738>)
 8003640:	400a      	ands	r2, r1
 8003642:	801a      	strh	r2, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	18d3      	adds	r3, r2, r3
 800364e:	183a      	adds	r2, r7, r0
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	492f      	ldr	r1, [pc, #188]	@ (8003710 <USB_ActivateEndpoint+0x740>)
 8003654:	430a      	orrs	r2, r1
 8003656:	b292      	uxth	r2, r2
 8003658:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	78db      	ldrb	r3, [r3, #3]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d01d      	beq.n	800369e <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	18d3      	adds	r3, r2, r3
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29a      	uxth	r2, r3
 8003670:	2044      	movs	r0, #68	@ 0x44
 8003672:	183b      	adds	r3, r7, r0
 8003674:	4927      	ldr	r1, [pc, #156]	@ (8003714 <USB_ActivateEndpoint+0x744>)
 8003676:	400a      	ands	r2, r1
 8003678:	801a      	strh	r2, [r3, #0]
 800367a:	183b      	adds	r3, r7, r0
 800367c:	183a      	adds	r2, r7, r0
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	2120      	movs	r1, #32
 8003682:	404a      	eors	r2, r1
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	18d3      	adds	r3, r2, r3
 8003690:	183a      	adds	r2, r7, r0
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	4920      	ldr	r1, [pc, #128]	@ (8003718 <USB_ActivateEndpoint+0x748>)
 8003696:	430a      	orrs	r2, r1
 8003698:	b292      	uxth	r2, r2
 800369a:	801a      	strh	r2, [r3, #0]
 800369c:	e016      	b.n	80036cc <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	18d3      	adds	r3, r2, r3
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	2046      	movs	r0, #70	@ 0x46
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	4918      	ldr	r1, [pc, #96]	@ (8003714 <USB_ActivateEndpoint+0x744>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	18d3      	adds	r3, r2, r3
 80036c0:	183a      	adds	r2, r7, r0
 80036c2:	8812      	ldrh	r2, [r2, #0]
 80036c4:	4914      	ldr	r1, [pc, #80]	@ (8003718 <USB_ActivateEndpoint+0x748>)
 80036c6:	430a      	orrs	r2, r1
 80036c8:	b292      	uxth	r2, r2
 80036ca:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	18d3      	adds	r3, r2, r3
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29a      	uxth	r2, r3
 80036da:	2042      	movs	r0, #66	@ 0x42
 80036dc:	183b      	adds	r3, r7, r0
 80036de:	490f      	ldr	r1, [pc, #60]	@ (800371c <USB_ActivateEndpoint+0x74c>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	801a      	strh	r2, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	183a      	adds	r2, r7, r0
 80036f0:	8812      	ldrh	r2, [r2, #0]
 80036f2:	4909      	ldr	r1, [pc, #36]	@ (8003718 <USB_ActivateEndpoint+0x748>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	b292      	uxth	r2, r2
 80036f8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80036fa:	236f      	movs	r3, #111	@ 0x6f
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	781b      	ldrb	r3, [r3, #0]
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b01c      	add	sp, #112	@ 0x70
 8003706:	bd80      	pop	{r7, pc}
 8003708:	ffff8f8f 	.word	0xffff8f8f
 800370c:	ffffc080 	.word	0xffffc080
 8003710:	ffff80c0 	.word	0xffff80c0
 8003714:	ffff8fbf 	.word	0xffff8fbf
 8003718:	ffff8080 	.word	0xffff8080
 800371c:	ffffbf8f 	.word	0xffffbf8f

08003720 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	@ 0x30
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	7b1b      	ldrb	r3, [r3, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d000      	beq.n	8003734 <USB_DeactivateEndpoint+0x14>
 8003732:	e07e      	b.n	8003832 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d03c      	beq.n	80037b6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	18d2      	adds	r2, r2, r3
 8003746:	210c      	movs	r1, #12
 8003748:	187b      	adds	r3, r7, r1
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	801a      	strh	r2, [r3, #0]
 800374e:	187b      	adds	r3, r7, r1
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	2240      	movs	r2, #64	@ 0x40
 8003754:	4013      	ands	r3, r2
 8003756:	d016      	beq.n	8003786 <USB_DeactivateEndpoint+0x66>
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	18d3      	adds	r3, r2, r3
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29a      	uxth	r2, r3
 8003766:	200a      	movs	r0, #10
 8003768:	183b      	adds	r3, r7, r0
 800376a:	49c7      	ldr	r1, [pc, #796]	@ (8003a88 <USB_DeactivateEndpoint+0x368>)
 800376c:	400a      	ands	r2, r1
 800376e:	801a      	strh	r2, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	18d3      	adds	r3, r2, r3
 800377a:	183a      	adds	r2, r7, r0
 800377c:	8812      	ldrh	r2, [r2, #0]
 800377e:	49c3      	ldr	r1, [pc, #780]	@ (8003a8c <USB_DeactivateEndpoint+0x36c>)
 8003780:	430a      	orrs	r2, r1
 8003782:	b292      	uxth	r2, r2
 8003784:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	18d3      	adds	r3, r2, r3
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29a      	uxth	r2, r3
 8003794:	2008      	movs	r0, #8
 8003796:	183b      	adds	r3, r7, r0
 8003798:	49bd      	ldr	r1, [pc, #756]	@ (8003a90 <USB_DeactivateEndpoint+0x370>)
 800379a:	400a      	ands	r2, r1
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	18d3      	adds	r3, r2, r3
 80037a8:	183a      	adds	r2, r7, r0
 80037aa:	8812      	ldrh	r2, [r2, #0]
 80037ac:	49b9      	ldr	r1, [pc, #740]	@ (8003a94 <USB_DeactivateEndpoint+0x374>)
 80037ae:	430a      	orrs	r2, r1
 80037b0:	b292      	uxth	r2, r2
 80037b2:	801a      	strh	r2, [r3, #0]
 80037b4:	e163      	b.n	8003a7e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	18d2      	adds	r2, r2, r3
 80037c0:	2112      	movs	r1, #18
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	8812      	ldrh	r2, [r2, #0]
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	881a      	ldrh	r2, [r3, #0]
 80037cc:	2380      	movs	r3, #128	@ 0x80
 80037ce:	01db      	lsls	r3, r3, #7
 80037d0:	4013      	ands	r3, r2
 80037d2:	d016      	beq.n	8003802 <USB_DeactivateEndpoint+0xe2>
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	18d3      	adds	r3, r2, r3
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	2010      	movs	r0, #16
 80037e4:	183b      	adds	r3, r7, r0
 80037e6:	49a8      	ldr	r1, [pc, #672]	@ (8003a88 <USB_DeactivateEndpoint+0x368>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	18d3      	adds	r3, r2, r3
 80037f6:	183a      	adds	r2, r7, r0
 80037f8:	8812      	ldrh	r2, [r2, #0]
 80037fa:	49a7      	ldr	r1, [pc, #668]	@ (8003a98 <USB_DeactivateEndpoint+0x378>)
 80037fc:	430a      	orrs	r2, r1
 80037fe:	b292      	uxth	r2, r2
 8003800:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	18d3      	adds	r3, r2, r3
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29a      	uxth	r2, r3
 8003810:	200e      	movs	r0, #14
 8003812:	183b      	adds	r3, r7, r0
 8003814:	49a1      	ldr	r1, [pc, #644]	@ (8003a9c <USB_DeactivateEndpoint+0x37c>)
 8003816:	400a      	ands	r2, r1
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	18d3      	adds	r3, r2, r3
 8003824:	183a      	adds	r2, r7, r0
 8003826:	8812      	ldrh	r2, [r2, #0]
 8003828:	499a      	ldr	r1, [pc, #616]	@ (8003a94 <USB_DeactivateEndpoint+0x374>)
 800382a:	430a      	orrs	r2, r1
 800382c:	b292      	uxth	r2, r2
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	e125      	b.n	8003a7e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d000      	beq.n	800383c <USB_DeactivateEndpoint+0x11c>
 800383a:	e090      	b.n	800395e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	2120      	movs	r1, #32
 8003848:	187b      	adds	r3, r7, r1
 800384a:	8812      	ldrh	r2, [r2, #0]
 800384c:	801a      	strh	r2, [r3, #0]
 800384e:	187b      	adds	r3, r7, r1
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	01db      	lsls	r3, r3, #7
 8003856:	4013      	ands	r3, r2
 8003858:	d016      	beq.n	8003888 <USB_DeactivateEndpoint+0x168>
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	18d3      	adds	r3, r2, r3
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29a      	uxth	r2, r3
 8003868:	201e      	movs	r0, #30
 800386a:	183b      	adds	r3, r7, r0
 800386c:	4986      	ldr	r1, [pc, #536]	@ (8003a88 <USB_DeactivateEndpoint+0x368>)
 800386e:	400a      	ands	r2, r1
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	18d3      	adds	r3, r2, r3
 800387c:	183a      	adds	r2, r7, r0
 800387e:	8812      	ldrh	r2, [r2, #0]
 8003880:	4985      	ldr	r1, [pc, #532]	@ (8003a98 <USB_DeactivateEndpoint+0x378>)
 8003882:	430a      	orrs	r2, r1
 8003884:	b292      	uxth	r2, r2
 8003886:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	211c      	movs	r1, #28
 8003894:	187b      	adds	r3, r7, r1
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	801a      	strh	r2, [r3, #0]
 800389a:	187b      	adds	r3, r7, r1
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	2240      	movs	r2, #64	@ 0x40
 80038a0:	4013      	ands	r3, r2
 80038a2:	d016      	beq.n	80038d2 <USB_DeactivateEndpoint+0x1b2>
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	18d3      	adds	r3, r2, r3
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	201a      	movs	r0, #26
 80038b4:	183b      	adds	r3, r7, r0
 80038b6:	4974      	ldr	r1, [pc, #464]	@ (8003a88 <USB_DeactivateEndpoint+0x368>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	801a      	strh	r2, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	18d3      	adds	r3, r2, r3
 80038c6:	183a      	adds	r2, r7, r0
 80038c8:	8812      	ldrh	r2, [r2, #0]
 80038ca:	4970      	ldr	r1, [pc, #448]	@ (8003a8c <USB_DeactivateEndpoint+0x36c>)
 80038cc:	430a      	orrs	r2, r1
 80038ce:	b292      	uxth	r2, r2
 80038d0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	18d3      	adds	r3, r2, r3
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	2018      	movs	r0, #24
 80038e2:	183b      	adds	r3, r7, r0
 80038e4:	4968      	ldr	r1, [pc, #416]	@ (8003a88 <USB_DeactivateEndpoint+0x368>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	18d3      	adds	r3, r2, r3
 80038f4:	183a      	adds	r2, r7, r0
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	4964      	ldr	r1, [pc, #400]	@ (8003a8c <USB_DeactivateEndpoint+0x36c>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	b292      	uxth	r2, r2
 80038fe:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	18d3      	adds	r3, r2, r3
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29a      	uxth	r2, r3
 800390e:	2016      	movs	r0, #22
 8003910:	183b      	adds	r3, r7, r0
 8003912:	4962      	ldr	r1, [pc, #392]	@ (8003a9c <USB_DeactivateEndpoint+0x37c>)
 8003914:	400a      	ands	r2, r1
 8003916:	801a      	strh	r2, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	18d3      	adds	r3, r2, r3
 8003922:	183a      	adds	r2, r7, r0
 8003924:	8812      	ldrh	r2, [r2, #0]
 8003926:	495b      	ldr	r1, [pc, #364]	@ (8003a94 <USB_DeactivateEndpoint+0x374>)
 8003928:	430a      	orrs	r2, r1
 800392a:	b292      	uxth	r2, r2
 800392c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	18d3      	adds	r3, r2, r3
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29a      	uxth	r2, r3
 800393c:	2014      	movs	r0, #20
 800393e:	183b      	adds	r3, r7, r0
 8003940:	4953      	ldr	r1, [pc, #332]	@ (8003a90 <USB_DeactivateEndpoint+0x370>)
 8003942:	400a      	ands	r2, r1
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	18d3      	adds	r3, r2, r3
 8003950:	183a      	adds	r2, r7, r0
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	494f      	ldr	r1, [pc, #316]	@ (8003a94 <USB_DeactivateEndpoint+0x374>)
 8003956:	430a      	orrs	r2, r1
 8003958:	b292      	uxth	r2, r2
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	e08f      	b.n	8003a7e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	18d2      	adds	r2, r2, r3
 8003968:	212e      	movs	r1, #46	@ 0x2e
 800396a:	187b      	adds	r3, r7, r1
 800396c:	8812      	ldrh	r2, [r2, #0]
 800396e:	801a      	strh	r2, [r3, #0]
 8003970:	187b      	adds	r3, r7, r1
 8003972:	881a      	ldrh	r2, [r3, #0]
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	01db      	lsls	r3, r3, #7
 8003978:	4013      	ands	r3, r2
 800397a:	d016      	beq.n	80039aa <USB_DeactivateEndpoint+0x28a>
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29a      	uxth	r2, r3
 800398a:	202c      	movs	r0, #44	@ 0x2c
 800398c:	183b      	adds	r3, r7, r0
 800398e:	493e      	ldr	r1, [pc, #248]	@ (8003a88 <USB_DeactivateEndpoint+0x368>)
 8003990:	400a      	ands	r2, r1
 8003992:	801a      	strh	r2, [r3, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	18d3      	adds	r3, r2, r3
 800399e:	183a      	adds	r2, r7, r0
 80039a0:	8812      	ldrh	r2, [r2, #0]
 80039a2:	493d      	ldr	r1, [pc, #244]	@ (8003a98 <USB_DeactivateEndpoint+0x378>)
 80039a4:	430a      	orrs	r2, r1
 80039a6:	b292      	uxth	r2, r2
 80039a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	18d2      	adds	r2, r2, r3
 80039b4:	212a      	movs	r1, #42	@ 0x2a
 80039b6:	187b      	adds	r3, r7, r1
 80039b8:	8812      	ldrh	r2, [r2, #0]
 80039ba:	801a      	strh	r2, [r3, #0]
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	2240      	movs	r2, #64	@ 0x40
 80039c2:	4013      	ands	r3, r2
 80039c4:	d016      	beq.n	80039f4 <USB_DeactivateEndpoint+0x2d4>
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	18d3      	adds	r3, r2, r3
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	2028      	movs	r0, #40	@ 0x28
 80039d6:	183b      	adds	r3, r7, r0
 80039d8:	492b      	ldr	r1, [pc, #172]	@ (8003a88 <USB_DeactivateEndpoint+0x368>)
 80039da:	400a      	ands	r2, r1
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	18d3      	adds	r3, r2, r3
 80039e8:	183a      	adds	r2, r7, r0
 80039ea:	8812      	ldrh	r2, [r2, #0]
 80039ec:	4927      	ldr	r1, [pc, #156]	@ (8003a8c <USB_DeactivateEndpoint+0x36c>)
 80039ee:	430a      	orrs	r2, r1
 80039f0:	b292      	uxth	r2, r2
 80039f2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	2026      	movs	r0, #38	@ 0x26
 8003a04:	183b      	adds	r3, r7, r0
 8003a06:	4920      	ldr	r1, [pc, #128]	@ (8003a88 <USB_DeactivateEndpoint+0x368>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	18d3      	adds	r3, r2, r3
 8003a16:	183a      	adds	r2, r7, r0
 8003a18:	8812      	ldrh	r2, [r2, #0]
 8003a1a:	491f      	ldr	r1, [pc, #124]	@ (8003a98 <USB_DeactivateEndpoint+0x378>)
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	18d3      	adds	r3, r2, r3
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	2024      	movs	r0, #36	@ 0x24
 8003a32:	183b      	adds	r3, r7, r0
 8003a34:	4916      	ldr	r1, [pc, #88]	@ (8003a90 <USB_DeactivateEndpoint+0x370>)
 8003a36:	400a      	ands	r2, r1
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	18d3      	adds	r3, r2, r3
 8003a44:	183a      	adds	r2, r7, r0
 8003a46:	8812      	ldrh	r2, [r2, #0]
 8003a48:	4912      	ldr	r1, [pc, #72]	@ (8003a94 <USB_DeactivateEndpoint+0x374>)
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	b292      	uxth	r2, r2
 8003a4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	18d3      	adds	r3, r2, r3
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	2022      	movs	r0, #34	@ 0x22
 8003a60:	183b      	adds	r3, r7, r0
 8003a62:	490e      	ldr	r1, [pc, #56]	@ (8003a9c <USB_DeactivateEndpoint+0x37c>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	801a      	strh	r2, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	18d3      	adds	r3, r2, r3
 8003a72:	183a      	adds	r2, r7, r0
 8003a74:	8812      	ldrh	r2, [r2, #0]
 8003a76:	4907      	ldr	r1, [pc, #28]	@ (8003a94 <USB_DeactivateEndpoint+0x374>)
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b00c      	add	sp, #48	@ 0x30
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	ffff8f8f 	.word	0xffff8f8f
 8003a8c:	ffff80c0 	.word	0xffff80c0
 8003a90:	ffff8fbf 	.word	0xffff8fbf
 8003a94:	ffff8080 	.word	0xffff8080
 8003a98:	ffffc080 	.word	0xffffc080
 8003a9c:	ffffbf8f 	.word	0xffffbf8f

08003aa0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b0c3      	sub	sp, #268	@ 0x10c
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	785b      	ldrb	r3, [r3, #1]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <USB_EPStartXfer+0x16>
 8003ab2:	f000 fd2d 	bl	8004510 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d905      	bls.n	8003ace <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	1d7a      	adds	r2, r7, #5
 8003ac8:	32ff      	adds	r2, #255	@ 0xff
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	e004      	b.n	8003ad8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	1d7a      	adds	r2, r7, #5
 8003ad4:	32ff      	adds	r2, #255	@ 0xff
 8003ad6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	7b1b      	ldrb	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d125      	bne.n	8003b2c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6959      	ldr	r1, [r3, #20]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	88da      	ldrh	r2, [r3, #6]
 8003ae8:	1d7b      	adds	r3, r7, #5
 8003aea:	33ff      	adds	r3, #255	@ 0xff
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f001 fa3f 	bl	8004f74 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2250      	movs	r2, #80	@ 0x50
 8003afe:	5a9b      	ldrh	r3, [r3, r2]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	001a      	movs	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	189b      	adds	r3, r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00da      	lsls	r2, r3, #3
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	18d3      	adds	r3, r2, r3
 8003b14:	4ad7      	ldr	r2, [pc, #860]	@ (8003e74 <USB_EPStartXfer+0x3d4>)
 8003b16:	4694      	mov	ip, r2
 8003b18:	4463      	add	r3, ip
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	1d7b      	adds	r3, r7, #5
 8003b1e:	33ff      	adds	r3, #255	@ 0xff
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	801a      	strh	r2, [r3, #0]
 8003b28:	f000 fccd 	bl	80044c6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	78db      	ldrb	r3, [r3, #3]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d000      	beq.n	8003b36 <USB_EPStartXfer+0x96>
 8003b34:	e362      	b.n	80041fc <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6a1a      	ldr	r2, [r3, #32]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d800      	bhi.n	8003b44 <USB_EPStartXfer+0xa4>
 8003b42:	e309      	b.n	8004158 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	18d3      	adds	r3, r2, r3
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	2056      	movs	r0, #86	@ 0x56
 8003b54:	183b      	adds	r3, r7, r0
 8003b56:	49c8      	ldr	r1, [pc, #800]	@ (8003e78 <USB_EPStartXfer+0x3d8>)
 8003b58:	400a      	ands	r2, r1
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	18d3      	adds	r3, r2, r3
 8003b66:	183a      	adds	r2, r7, r0
 8003b68:	8812      	ldrh	r2, [r2, #0]
 8003b6a:	49c4      	ldr	r1, [pc, #784]	@ (8003e7c <USB_EPStartXfer+0x3dc>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	b292      	uxth	r2, r2
 8003b70:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	1d7b      	adds	r3, r7, #5
 8003b78:	33ff      	adds	r3, #255	@ 0xff
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	1ad2      	subs	r2, r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	18d3      	adds	r3, r2, r3
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	001a      	movs	r2, r3
 8003b92:	2340      	movs	r3, #64	@ 0x40
 8003b94:	4013      	ands	r3, r2
 8003b96:	d100      	bne.n	8003b9a <USB_EPStartXfer+0xfa>
 8003b98:	e176      	b.n	8003e88 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	785b      	ldrb	r3, [r3, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d000      	beq.n	8003ba8 <USB_EPStartXfer+0x108>
 8003ba6:	e074      	b.n	8003c92 <USB_EPStartXfer+0x1f2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2250      	movs	r2, #80	@ 0x50
 8003bb0:	5a9b      	ldrh	r3, [r3, r2]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb8:	189b      	adds	r3, r3, r2
 8003bba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	00da      	lsls	r2, r3, #3
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	18d3      	adds	r3, r2, r3
 8003bc6:	4aae      	ldr	r2, [pc, #696]	@ (8003e80 <USB_EPStartXfer+0x3e0>)
 8003bc8:	4694      	mov	ip, r2
 8003bca:	4463      	add	r3, ip
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	059b      	lsls	r3, r3, #22
 8003bd6:	0d9b      	lsrs	r3, r3, #22
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	1d7b      	adds	r3, r7, #5
 8003be0:	33ff      	adds	r3, #255	@ 0xff
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <USB_EPStartXfer+0x15a>
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4aa5      	ldr	r2, [pc, #660]	@ (8003e84 <USB_EPStartXfer+0x3e4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	e066      	b.n	8003cc8 <USB_EPStartXfer+0x228>
 8003bfa:	1d7b      	adds	r3, r7, #5
 8003bfc:	33ff      	adds	r3, #255	@ 0xff
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c02:	d821      	bhi.n	8003c48 <USB_EPStartXfer+0x1a8>
 8003c04:	1d7b      	adds	r3, r7, #5
 8003c06:	33ff      	adds	r3, #255	@ 0xff
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	1c7a      	adds	r2, r7, #1
 8003c0e:	32ff      	adds	r2, #255	@ 0xff
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	1d7b      	adds	r3, r7, #5
 8003c14:	33ff      	adds	r3, #255	@ 0xff
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d006      	beq.n	8003c2c <USB_EPStartXfer+0x18c>
 8003c1e:	1c7b      	adds	r3, r7, #1
 8003c20:	33ff      	adds	r3, #255	@ 0xff
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	1c7a      	adds	r2, r7, #1
 8003c28:	32ff      	adds	r2, #255	@ 0xff
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	1c7b      	adds	r3, r7, #1
 8003c34:	33ff      	adds	r3, #255	@ 0xff
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	029b      	lsls	r3, r3, #10
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	801a      	strh	r2, [r3, #0]
 8003c46:	e03f      	b.n	8003cc8 <USB_EPStartXfer+0x228>
 8003c48:	1d7b      	adds	r3, r7, #5
 8003c4a:	33ff      	adds	r3, #255	@ 0xff
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	1c7a      	adds	r2, r7, #1
 8003c52:	32ff      	adds	r2, #255	@ 0xff
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	1d7b      	adds	r3, r7, #5
 8003c58:	33ff      	adds	r3, #255	@ 0xff
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	221f      	movs	r2, #31
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d106      	bne.n	8003c70 <USB_EPStartXfer+0x1d0>
 8003c62:	1c7b      	adds	r3, r7, #1
 8003c64:	33ff      	adds	r3, #255	@ 0xff
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	1c7a      	adds	r2, r7, #1
 8003c6c:	32ff      	adds	r2, #255	@ 0xff
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	1c7b      	adds	r3, r7, #1
 8003c78:	33ff      	adds	r3, #255	@ 0xff
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	029b      	lsls	r3, r3, #10
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	4313      	orrs	r3, r2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	4a7f      	ldr	r2, [pc, #508]	@ (8003e84 <USB_EPStartXfer+0x3e4>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	e01a      	b.n	8003cc8 <USB_EPStartXfer+0x228>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d116      	bne.n	8003cc8 <USB_EPStartXfer+0x228>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2250      	movs	r2, #80	@ 0x50
 8003c9e:	5a9b      	ldrh	r3, [r3, r2]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	189b      	adds	r3, r3, r2
 8003ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	00da      	lsls	r2, r3, #3
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	4a72      	ldr	r2, [pc, #456]	@ (8003e80 <USB_EPStartXfer+0x3e0>)
 8003cb6:	4694      	mov	ip, r2
 8003cb8:	4463      	add	r3, ip
 8003cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cbc:	1d7b      	adds	r3, r7, #5
 8003cbe:	33ff      	adds	r3, #255	@ 0xff
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003cc8:	2076      	movs	r0, #118	@ 0x76
 8003cca:	183b      	adds	r3, r7, r0
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	8952      	ldrh	r2, [r2, #10]
 8003cd0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6959      	ldr	r1, [r3, #20]
 8003cd6:	1d7b      	adds	r3, r7, #5
 8003cd8:	33ff      	adds	r3, #255	@ 0xff
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b29c      	uxth	r4, r3
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	881a      	ldrh	r2, [r3, #0]
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	0023      	movs	r3, r4
 8003ce6:	f001 f945 	bl	8004f74 <USB_WritePMA>
            ep->xfer_buff += len;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	1d7b      	adds	r3, r7, #5
 8003cf0:	33ff      	adds	r3, #255	@ 0xff
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	18d2      	adds	r2, r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d908      	bls.n	8003d18 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	1d7b      	adds	r3, r7, #5
 8003d0c:	33ff      	adds	r3, #255	@ 0xff
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	1ad2      	subs	r2, r2, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	621a      	str	r2, [r3, #32]
 8003d16:	e007      	b.n	8003d28 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	1d7a      	adds	r2, r7, #5
 8003d1e:	32ff      	adds	r2, #255	@ 0xff
 8003d20:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d000      	beq.n	8003d32 <USB_EPStartXfer+0x292>
 8003d30:	e070      	b.n	8003e14 <USB_EPStartXfer+0x374>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2250      	movs	r2, #80	@ 0x50
 8003d3a:	5a9b      	ldrh	r3, [r3, r2]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	001a      	movs	r2, r3
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	00da      	lsls	r2, r3, #3
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	18d3      	adds	r3, r2, r3
 8003d50:	4a48      	ldr	r2, [pc, #288]	@ (8003e74 <USB_EPStartXfer+0x3d4>)
 8003d52:	4694      	mov	ip, r2
 8003d54:	4463      	add	r3, ip
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	059b      	lsls	r3, r3, #22
 8003d60:	0d9b      	lsrs	r3, r3, #22
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	1d7b      	adds	r3, r7, #5
 8003d6a:	33ff      	adds	r3, #255	@ 0xff
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d108      	bne.n	8003d84 <USB_EPStartXfer+0x2e4>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	4a42      	ldr	r2, [pc, #264]	@ (8003e84 <USB_EPStartXfer+0x3e4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	801a      	strh	r2, [r3, #0]
 8003d82:	e064      	b.n	8003e4e <USB_EPStartXfer+0x3ae>
 8003d84:	1d7b      	adds	r3, r7, #5
 8003d86:	33ff      	adds	r3, #255	@ 0xff
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d8c:	d81f      	bhi.n	8003dce <USB_EPStartXfer+0x32e>
 8003d8e:	1d7b      	adds	r3, r7, #5
 8003d90:	33ff      	adds	r3, #255	@ 0xff
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	21fc      	movs	r1, #252	@ 0xfc
 8003d98:	187a      	adds	r2, r7, r1
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	1d7b      	adds	r3, r7, #5
 8003d9e:	33ff      	adds	r3, #255	@ 0xff
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	d004      	beq.n	8003db2 <USB_EPStartXfer+0x312>
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	187a      	adds	r2, r7, r1
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	23fc      	movs	r3, #252	@ 0xfc
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	029b      	lsls	r3, r3, #10
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	801a      	strh	r2, [r3, #0]
 8003dcc:	e03f      	b.n	8003e4e <USB_EPStartXfer+0x3ae>
 8003dce:	1d7b      	adds	r3, r7, #5
 8003dd0:	33ff      	adds	r3, #255	@ 0xff
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	21fc      	movs	r1, #252	@ 0xfc
 8003dd8:	187a      	adds	r2, r7, r1
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	1d7b      	adds	r3, r7, #5
 8003dde:	33ff      	adds	r3, #255	@ 0xff
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	221f      	movs	r2, #31
 8003de4:	4013      	ands	r3, r2
 8003de6:	d104      	bne.n	8003df2 <USB_EPStartXfer+0x352>
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	187a      	adds	r2, r7, r1
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	23fc      	movs	r3, #252	@ 0xfc
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	029b      	lsls	r3, r3, #10
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	4313      	orrs	r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	4a1e      	ldr	r2, [pc, #120]	@ (8003e84 <USB_EPStartXfer+0x3e4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	e01c      	b.n	8003e4e <USB_EPStartXfer+0x3ae>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d118      	bne.n	8003e4e <USB_EPStartXfer+0x3ae>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2250      	movs	r2, #80	@ 0x50
 8003e24:	5a9b      	ldrh	r3, [r3, r2]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	001a      	movs	r2, r3
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	189b      	adds	r3, r3, r2
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	00da      	lsls	r2, r3, #3
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	18d3      	adds	r3, r2, r3
 8003e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e74 <USB_EPStartXfer+0x3d4>)
 8003e3c:	4694      	mov	ip, r2
 8003e3e:	4463      	add	r3, ip
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	1d7b      	adds	r3, r7, #5
 8003e44:	33ff      	adds	r3, #255	@ 0xff
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003e4e:	2076      	movs	r0, #118	@ 0x76
 8003e50:	183b      	adds	r3, r7, r0
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	8912      	ldrh	r2, [r2, #8]
 8003e56:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6959      	ldr	r1, [r3, #20]
 8003e5c:	1d7b      	adds	r3, r7, #5
 8003e5e:	33ff      	adds	r3, #255	@ 0xff
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	b29c      	uxth	r4, r3
 8003e64:	183b      	adds	r3, r7, r0
 8003e66:	881a      	ldrh	r2, [r3, #0]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	0023      	movs	r3, r4
 8003e6c:	f001 f882 	bl	8004f74 <USB_WritePMA>
 8003e70:	e329      	b.n	80044c6 <USB_EPStartXfer+0xa26>
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	00000402 	.word	0x00000402
 8003e78:	ffff8f8f 	.word	0xffff8f8f
 8003e7c:	ffff8180 	.word	0xffff8180
 8003e80:	00000406 	.word	0x00000406
 8003e84:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d000      	beq.n	8003e92 <USB_EPStartXfer+0x3f2>
 8003e90:	e070      	b.n	8003f74 <USB_EPStartXfer+0x4d4>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2250      	movs	r2, #80	@ 0x50
 8003e9a:	5a9b      	ldrh	r3, [r3, r2]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	00da      	lsls	r2, r3, #3
 8003eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eae:	18d3      	adds	r3, r2, r3
 8003eb0:	4acd      	ldr	r2, [pc, #820]	@ (80041e8 <USB_EPStartXfer+0x748>)
 8003eb2:	4694      	mov	ip, r2
 8003eb4:	4463      	add	r3, ip
 8003eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	059b      	lsls	r3, r3, #22
 8003ec0:	0d9b      	lsrs	r3, r3, #22
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	1d7b      	adds	r3, r7, #5
 8003eca:	33ff      	adds	r3, #255	@ 0xff
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d108      	bne.n	8003ee4 <USB_EPStartXfer+0x444>
 8003ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	4ac4      	ldr	r2, [pc, #784]	@ (80041ec <USB_EPStartXfer+0x74c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ee0:	801a      	strh	r2, [r3, #0]
 8003ee2:	e064      	b.n	8003fae <USB_EPStartXfer+0x50e>
 8003ee4:	1d7b      	adds	r3, r7, #5
 8003ee6:	33ff      	adds	r3, #255	@ 0xff
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b3e      	cmp	r3, #62	@ 0x3e
 8003eec:	d81f      	bhi.n	8003f2e <USB_EPStartXfer+0x48e>
 8003eee:	1d7b      	adds	r3, r7, #5
 8003ef0:	33ff      	adds	r3, #255	@ 0xff
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	21f8      	movs	r1, #248	@ 0xf8
 8003ef8:	187a      	adds	r2, r7, r1
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	1d7b      	adds	r3, r7, #5
 8003efe:	33ff      	adds	r3, #255	@ 0xff
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2201      	movs	r2, #1
 8003f04:	4013      	ands	r3, r2
 8003f06:	d004      	beq.n	8003f12 <USB_EPStartXfer+0x472>
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	187a      	adds	r2, r7, r1
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	23f8      	movs	r3, #248	@ 0xf8
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4313      	orrs	r3, r2
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	e03f      	b.n	8003fae <USB_EPStartXfer+0x50e>
 8003f2e:	1d7b      	adds	r3, r7, #5
 8003f30:	33ff      	adds	r3, #255	@ 0xff
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	21f8      	movs	r1, #248	@ 0xf8
 8003f38:	187a      	adds	r2, r7, r1
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	1d7b      	adds	r3, r7, #5
 8003f3e:	33ff      	adds	r3, #255	@ 0xff
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	221f      	movs	r2, #31
 8003f44:	4013      	ands	r3, r2
 8003f46:	d104      	bne.n	8003f52 <USB_EPStartXfer+0x4b2>
 8003f48:	187b      	adds	r3, r7, r1
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	187a      	adds	r2, r7, r1
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	23f8      	movs	r3, #248	@ 0xf8
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4313      	orrs	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4aa0      	ldr	r2, [pc, #640]	@ (80041ec <USB_EPStartXfer+0x74c>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	e01c      	b.n	8003fae <USB_EPStartXfer+0x50e>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d118      	bne.n	8003fae <USB_EPStartXfer+0x50e>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2250      	movs	r2, #80	@ 0x50
 8003f84:	5a9b      	ldrh	r3, [r3, r2]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	001a      	movs	r2, r3
 8003f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	00da      	lsls	r2, r3, #3
 8003f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f98:	18d3      	adds	r3, r2, r3
 8003f9a:	4a93      	ldr	r2, [pc, #588]	@ (80041e8 <USB_EPStartXfer+0x748>)
 8003f9c:	4694      	mov	ip, r2
 8003f9e:	4463      	add	r3, ip
 8003fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa2:	1d7b      	adds	r3, r7, #5
 8003fa4:	33ff      	adds	r3, #255	@ 0xff
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003fae:	2076      	movs	r0, #118	@ 0x76
 8003fb0:	183b      	adds	r3, r7, r0
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	8912      	ldrh	r2, [r2, #8]
 8003fb6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6959      	ldr	r1, [r3, #20]
 8003fbc:	1d7b      	adds	r3, r7, #5
 8003fbe:	33ff      	adds	r3, #255	@ 0xff
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b29c      	uxth	r4, r3
 8003fc4:	183b      	adds	r3, r7, r0
 8003fc6:	881a      	ldrh	r2, [r3, #0]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	0023      	movs	r3, r4
 8003fcc:	f000 ffd2 	bl	8004f74 <USB_WritePMA>
            ep->xfer_buff += len;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	1d7b      	adds	r3, r7, #5
 8003fd6:	33ff      	adds	r3, #255	@ 0xff
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	18d2      	adds	r2, r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6a1a      	ldr	r2, [r3, #32]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d908      	bls.n	8003ffe <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6a1a      	ldr	r2, [r3, #32]
 8003ff0:	1d7b      	adds	r3, r7, #5
 8003ff2:	33ff      	adds	r3, #255	@ 0xff
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1ad2      	subs	r2, r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	621a      	str	r2, [r3, #32]
 8003ffc:	e007      	b.n	800400e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	1d7a      	adds	r2, r7, #5
 8004004:	32ff      	adds	r2, #255	@ 0xff
 8004006:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	643b      	str	r3, [r7, #64]	@ 0x40
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d000      	beq.n	800401c <USB_EPStartXfer+0x57c>
 800401a:	e070      	b.n	80040fe <USB_EPStartXfer+0x65e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2250      	movs	r2, #80	@ 0x50
 8004024:	5a9b      	ldrh	r3, [r3, r2]
 8004026:	b29b      	uxth	r3, r3
 8004028:	001a      	movs	r2, r3
 800402a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402c:	189b      	adds	r3, r3, r2
 800402e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	00da      	lsls	r2, r3, #3
 8004036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	4a6d      	ldr	r2, [pc, #436]	@ (80041f0 <USB_EPStartXfer+0x750>)
 800403c:	4694      	mov	ip, r2
 800403e:	4463      	add	r3, ip
 8004040:	637b      	str	r3, [r7, #52]	@ 0x34
 8004042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	059b      	lsls	r3, r3, #22
 800404a:	0d9b      	lsrs	r3, r3, #22
 800404c:	b29a      	uxth	r2, r3
 800404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	1d7b      	adds	r3, r7, #5
 8004054:	33ff      	adds	r3, #255	@ 0xff
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d108      	bne.n	800406e <USB_EPStartXfer+0x5ce>
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	4a62      	ldr	r2, [pc, #392]	@ (80041ec <USB_EPStartXfer+0x74c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	b29a      	uxth	r2, r3
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	e062      	b.n	8004134 <USB_EPStartXfer+0x694>
 800406e:	1d7b      	adds	r3, r7, #5
 8004070:	33ff      	adds	r3, #255	@ 0xff
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b3e      	cmp	r3, #62	@ 0x3e
 8004076:	d81f      	bhi.n	80040b8 <USB_EPStartXfer+0x618>
 8004078:	1d7b      	adds	r3, r7, #5
 800407a:	33ff      	adds	r3, #255	@ 0xff
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	21f4      	movs	r1, #244	@ 0xf4
 8004082:	187a      	adds	r2, r7, r1
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	1d7b      	adds	r3, r7, #5
 8004088:	33ff      	adds	r3, #255	@ 0xff
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2201      	movs	r2, #1
 800408e:	4013      	ands	r3, r2
 8004090:	d004      	beq.n	800409c <USB_EPStartXfer+0x5fc>
 8004092:	187b      	adds	r3, r7, r1
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3301      	adds	r3, #1
 8004098:	187a      	adds	r2, r7, r1
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	23f4      	movs	r3, #244	@ 0xf4
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	029b      	lsls	r3, r3, #10
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	4313      	orrs	r3, r2
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	e03d      	b.n	8004134 <USB_EPStartXfer+0x694>
 80040b8:	1d7b      	adds	r3, r7, #5
 80040ba:	33ff      	adds	r3, #255	@ 0xff
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	21f4      	movs	r1, #244	@ 0xf4
 80040c2:	187a      	adds	r2, r7, r1
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	1d7b      	adds	r3, r7, #5
 80040c8:	33ff      	adds	r3, #255	@ 0xff
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	221f      	movs	r2, #31
 80040ce:	4013      	ands	r3, r2
 80040d0:	d104      	bne.n	80040dc <USB_EPStartXfer+0x63c>
 80040d2:	187b      	adds	r3, r7, r1
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	187a      	adds	r2, r7, r1
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	23f4      	movs	r3, #244	@ 0xf4
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	029b      	lsls	r3, r3, #10
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4313      	orrs	r3, r2
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4a3e      	ldr	r2, [pc, #248]	@ (80041ec <USB_EPStartXfer+0x74c>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e01a      	b.n	8004134 <USB_EPStartXfer+0x694>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d116      	bne.n	8004134 <USB_EPStartXfer+0x694>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2250      	movs	r2, #80	@ 0x50
 800410a:	5a9b      	ldrh	r3, [r3, r2]
 800410c:	b29b      	uxth	r3, r3
 800410e:	001a      	movs	r2, r3
 8004110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004112:	189b      	adds	r3, r3, r2
 8004114:	643b      	str	r3, [r7, #64]	@ 0x40
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	00da      	lsls	r2, r3, #3
 800411c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800411e:	18d3      	adds	r3, r2, r3
 8004120:	4a33      	ldr	r2, [pc, #204]	@ (80041f0 <USB_EPStartXfer+0x750>)
 8004122:	4694      	mov	ip, r2
 8004124:	4463      	add	r3, ip
 8004126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004128:	1d7b      	adds	r3, r7, #5
 800412a:	33ff      	adds	r3, #255	@ 0xff
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	b29a      	uxth	r2, r3
 8004130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004132:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004134:	2076      	movs	r0, #118	@ 0x76
 8004136:	183b      	adds	r3, r7, r0
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	8952      	ldrh	r2, [r2, #10]
 800413c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6959      	ldr	r1, [r3, #20]
 8004142:	1d7b      	adds	r3, r7, #5
 8004144:	33ff      	adds	r3, #255	@ 0xff
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	b29c      	uxth	r4, r3
 800414a:	183b      	adds	r3, r7, r0
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	0023      	movs	r3, r4
 8004152:	f000 ff0f 	bl	8004f74 <USB_WritePMA>
 8004156:	e1b6      	b.n	80044c6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	1d7a      	adds	r2, r7, #5
 800415e:	32ff      	adds	r2, #255	@ 0xff
 8004160:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	18d3      	adds	r3, r2, r3
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29a      	uxth	r2, r3
 8004170:	2062      	movs	r0, #98	@ 0x62
 8004172:	183b      	adds	r3, r7, r0
 8004174:	491f      	ldr	r1, [pc, #124]	@ (80041f4 <USB_EPStartXfer+0x754>)
 8004176:	400a      	ands	r2, r1
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	18d3      	adds	r3, r2, r3
 8004184:	183a      	adds	r2, r7, r0
 8004186:	8812      	ldrh	r2, [r2, #0]
 8004188:	491b      	ldr	r1, [pc, #108]	@ (80041f8 <USB_EPStartXfer+0x758>)
 800418a:	430a      	orrs	r2, r1
 800418c:	b292      	uxth	r2, r2
 800418e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2250      	movs	r2, #80	@ 0x50
 8004198:	5a9b      	ldrh	r3, [r3, r2]
 800419a:	b29b      	uxth	r3, r3
 800419c:	001a      	movs	r2, r3
 800419e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041a0:	189b      	adds	r3, r3, r2
 80041a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	00da      	lsls	r2, r3, #3
 80041aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041ac:	18d3      	adds	r3, r2, r3
 80041ae:	4a0e      	ldr	r2, [pc, #56]	@ (80041e8 <USB_EPStartXfer+0x748>)
 80041b0:	4694      	mov	ip, r2
 80041b2:	4463      	add	r3, ip
 80041b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041b6:	1d7b      	adds	r3, r7, #5
 80041b8:	33ff      	adds	r3, #255	@ 0xff
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80041c2:	2076      	movs	r0, #118	@ 0x76
 80041c4:	183b      	adds	r3, r7, r0
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	8912      	ldrh	r2, [r2, #8]
 80041ca:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6959      	ldr	r1, [r3, #20]
 80041d0:	1d7b      	adds	r3, r7, #5
 80041d2:	33ff      	adds	r3, #255	@ 0xff
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b29c      	uxth	r4, r3
 80041d8:	183b      	adds	r3, r7, r0
 80041da:	881a      	ldrh	r2, [r3, #0]
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	0023      	movs	r3, r4
 80041e0:	f000 fec8 	bl	8004f74 <USB_WritePMA>
 80041e4:	e16f      	b.n	80044c6 <USB_EPStartXfer+0xa26>
 80041e6:	46c0      	nop			@ (mov r8, r8)
 80041e8:	00000402 	.word	0x00000402
 80041ec:	ffff8000 	.word	0xffff8000
 80041f0:	00000406 	.word	0x00000406
 80041f4:	ffff8e8f 	.word	0xffff8e8f
 80041f8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	1d7b      	adds	r3, r7, #5
 8004202:	33ff      	adds	r3, #255	@ 0xff
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	001a      	movs	r2, r3
 800421c:	2340      	movs	r3, #64	@ 0x40
 800421e:	4013      	ands	r3, r2
 8004220:	d100      	bne.n	8004224 <USB_EPStartXfer+0x784>
 8004222:	e0a4      	b.n	800436e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	673b      	str	r3, [r7, #112]	@ 0x70
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	785b      	ldrb	r3, [r3, #1]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d000      	beq.n	8004232 <USB_EPStartXfer+0x792>
 8004230:	e070      	b.n	8004314 <USB_EPStartXfer+0x874>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2250      	movs	r2, #80	@ 0x50
 800423a:	5a9b      	ldrh	r3, [r3, r2]
 800423c:	b29b      	uxth	r3, r3
 800423e:	001a      	movs	r2, r3
 8004240:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004242:	189b      	adds	r3, r3, r2
 8004244:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	00da      	lsls	r2, r3, #3
 800424c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800424e:	18d3      	adds	r3, r2, r3
 8004250:	4ada      	ldr	r2, [pc, #872]	@ (80045bc <USB_EPStartXfer+0xb1c>)
 8004252:	4694      	mov	ip, r2
 8004254:	4463      	add	r3, ip
 8004256:	667b      	str	r3, [r7, #100]	@ 0x64
 8004258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b29b      	uxth	r3, r3
 800425e:	059b      	lsls	r3, r3, #22
 8004260:	0d9b      	lsrs	r3, r3, #22
 8004262:	b29a      	uxth	r2, r3
 8004264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004266:	801a      	strh	r2, [r3, #0]
 8004268:	1d7b      	adds	r3, r7, #5
 800426a:	33ff      	adds	r3, #255	@ 0xff
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <USB_EPStartXfer+0x7e4>
 8004272:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	4ad1      	ldr	r2, [pc, #836]	@ (80045c0 <USB_EPStartXfer+0xb20>)
 800427a:	4313      	orrs	r3, r2
 800427c:	b29a      	uxth	r2, r3
 800427e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004280:	801a      	strh	r2, [r3, #0]
 8004282:	e062      	b.n	800434a <USB_EPStartXfer+0x8aa>
 8004284:	1d7b      	adds	r3, r7, #5
 8004286:	33ff      	adds	r3, #255	@ 0xff
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b3e      	cmp	r3, #62	@ 0x3e
 800428c:	d81f      	bhi.n	80042ce <USB_EPStartXfer+0x82e>
 800428e:	1d7b      	adds	r3, r7, #5
 8004290:	33ff      	adds	r3, #255	@ 0xff
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	085b      	lsrs	r3, r3, #1
 8004296:	21f0      	movs	r1, #240	@ 0xf0
 8004298:	187a      	adds	r2, r7, r1
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	1d7b      	adds	r3, r7, #5
 800429e:	33ff      	adds	r3, #255	@ 0xff
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2201      	movs	r2, #1
 80042a4:	4013      	ands	r3, r2
 80042a6:	d004      	beq.n	80042b2 <USB_EPStartXfer+0x812>
 80042a8:	187b      	adds	r3, r7, r1
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	187a      	adds	r2, r7, r1
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	23f0      	movs	r3, #240	@ 0xf0
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	029b      	lsls	r3, r3, #10
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ca:	801a      	strh	r2, [r3, #0]
 80042cc:	e03d      	b.n	800434a <USB_EPStartXfer+0x8aa>
 80042ce:	1d7b      	adds	r3, r7, #5
 80042d0:	33ff      	adds	r3, #255	@ 0xff
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	21f0      	movs	r1, #240	@ 0xf0
 80042d8:	187a      	adds	r2, r7, r1
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	1d7b      	adds	r3, r7, #5
 80042de:	33ff      	adds	r3, #255	@ 0xff
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	221f      	movs	r2, #31
 80042e4:	4013      	ands	r3, r2
 80042e6:	d104      	bne.n	80042f2 <USB_EPStartXfer+0x852>
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	187a      	adds	r2, r7, r1
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	23f0      	movs	r3, #240	@ 0xf0
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	b29b      	uxth	r3, r3
 8004304:	4313      	orrs	r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	4aad      	ldr	r2, [pc, #692]	@ (80045c0 <USB_EPStartXfer+0xb20>)
 800430a:	4313      	orrs	r3, r2
 800430c:	b29a      	uxth	r2, r3
 800430e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e01a      	b.n	800434a <USB_EPStartXfer+0x8aa>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d116      	bne.n	800434a <USB_EPStartXfer+0x8aa>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2250      	movs	r2, #80	@ 0x50
 8004320:	5a9b      	ldrh	r3, [r3, r2]
 8004322:	b29b      	uxth	r3, r3
 8004324:	001a      	movs	r2, r3
 8004326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004328:	189b      	adds	r3, r3, r2
 800432a:	673b      	str	r3, [r7, #112]	@ 0x70
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	00da      	lsls	r2, r3, #3
 8004332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004334:	18d3      	adds	r3, r2, r3
 8004336:	4aa1      	ldr	r2, [pc, #644]	@ (80045bc <USB_EPStartXfer+0xb1c>)
 8004338:	4694      	mov	ip, r2
 800433a:	4463      	add	r3, ip
 800433c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800433e:	1d7b      	adds	r3, r7, #5
 8004340:	33ff      	adds	r3, #255	@ 0xff
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b29a      	uxth	r2, r3
 8004346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004348:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800434a:	2076      	movs	r0, #118	@ 0x76
 800434c:	183b      	adds	r3, r7, r0
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	8952      	ldrh	r2, [r2, #10]
 8004352:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6959      	ldr	r1, [r3, #20]
 8004358:	1d7b      	adds	r3, r7, #5
 800435a:	33ff      	adds	r3, #255	@ 0xff
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29c      	uxth	r4, r3
 8004360:	183b      	adds	r3, r7, r0
 8004362:	881a      	ldrh	r2, [r3, #0]
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	0023      	movs	r3, r4
 8004368:	f000 fe04 	bl	8004f74 <USB_WritePMA>
 800436c:	e0ab      	b.n	80044c6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	785b      	ldrb	r3, [r3, #1]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d000      	beq.n	8004378 <USB_EPStartXfer+0x8d8>
 8004376:	e070      	b.n	800445a <USB_EPStartXfer+0x9ba>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2250      	movs	r2, #80	@ 0x50
 8004380:	5a9b      	ldrh	r3, [r3, r2]
 8004382:	b29b      	uxth	r3, r3
 8004384:	001a      	movs	r2, r3
 8004386:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004388:	189b      	adds	r3, r3, r2
 800438a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	00da      	lsls	r2, r3, #3
 8004392:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004394:	18d3      	adds	r3, r2, r3
 8004396:	4a8b      	ldr	r2, [pc, #556]	@ (80045c4 <USB_EPStartXfer+0xb24>)
 8004398:	4694      	mov	ip, r2
 800439a:	4463      	add	r3, ip
 800439c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800439e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	059b      	lsls	r3, r3, #22
 80043a6:	0d9b      	lsrs	r3, r3, #22
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	1d7b      	adds	r3, r7, #5
 80043b0:	33ff      	adds	r3, #255	@ 0xff
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <USB_EPStartXfer+0x92a>
 80043b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	4a80      	ldr	r2, [pc, #512]	@ (80045c0 <USB_EPStartXfer+0xb20>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043c6:	801a      	strh	r2, [r3, #0]
 80043c8:	e06c      	b.n	80044a4 <USB_EPStartXfer+0xa04>
 80043ca:	1d7b      	adds	r3, r7, #5
 80043cc:	33ff      	adds	r3, #255	@ 0xff
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80043d2:	d81f      	bhi.n	8004414 <USB_EPStartXfer+0x974>
 80043d4:	1d7b      	adds	r3, r7, #5
 80043d6:	33ff      	adds	r3, #255	@ 0xff
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	21ec      	movs	r1, #236	@ 0xec
 80043de:	187a      	adds	r2, r7, r1
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	1d7b      	adds	r3, r7, #5
 80043e4:	33ff      	adds	r3, #255	@ 0xff
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	4013      	ands	r3, r2
 80043ec:	d004      	beq.n	80043f8 <USB_EPStartXfer+0x958>
 80043ee:	187b      	adds	r3, r7, r1
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	187a      	adds	r2, r7, r1
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	23ec      	movs	r3, #236	@ 0xec
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	029b      	lsls	r3, r3, #10
 8004408:	b29b      	uxth	r3, r3
 800440a:	4313      	orrs	r3, r2
 800440c:	b29a      	uxth	r2, r3
 800440e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004410:	801a      	strh	r2, [r3, #0]
 8004412:	e047      	b.n	80044a4 <USB_EPStartXfer+0xa04>
 8004414:	1d7b      	adds	r3, r7, #5
 8004416:	33ff      	adds	r3, #255	@ 0xff
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	21ec      	movs	r1, #236	@ 0xec
 800441e:	187a      	adds	r2, r7, r1
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	1d7b      	adds	r3, r7, #5
 8004424:	33ff      	adds	r3, #255	@ 0xff
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	221f      	movs	r2, #31
 800442a:	4013      	ands	r3, r2
 800442c:	d104      	bne.n	8004438 <USB_EPStartXfer+0x998>
 800442e:	187b      	adds	r3, r7, r1
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3b01      	subs	r3, #1
 8004434:	187a      	adds	r2, r7, r1
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29a      	uxth	r2, r3
 800443e:	23ec      	movs	r3, #236	@ 0xec
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	029b      	lsls	r3, r3, #10
 8004448:	b29b      	uxth	r3, r3
 800444a:	4313      	orrs	r3, r2
 800444c:	b29b      	uxth	r3, r3
 800444e:	4a5c      	ldr	r2, [pc, #368]	@ (80045c0 <USB_EPStartXfer+0xb20>)
 8004450:	4313      	orrs	r3, r2
 8004452:	b29a      	uxth	r2, r3
 8004454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004456:	801a      	strh	r2, [r3, #0]
 8004458:	e024      	b.n	80044a4 <USB_EPStartXfer+0xa04>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d120      	bne.n	80044a4 <USB_EPStartXfer+0xa04>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2184      	movs	r1, #132	@ 0x84
 8004466:	187a      	adds	r2, r7, r1
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2250      	movs	r2, #80	@ 0x50
 800446e:	5a9b      	ldrh	r3, [r3, r2]
 8004470:	b29b      	uxth	r3, r3
 8004472:	001a      	movs	r2, r3
 8004474:	187b      	adds	r3, r7, r1
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	189b      	adds	r3, r3, r2
 800447a:	187a      	adds	r2, r7, r1
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	00da      	lsls	r2, r3, #3
 8004484:	187b      	adds	r3, r7, r1
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	18d3      	adds	r3, r2, r3
 800448a:	4a4e      	ldr	r2, [pc, #312]	@ (80045c4 <USB_EPStartXfer+0xb24>)
 800448c:	4694      	mov	ip, r2
 800448e:	4463      	add	r3, ip
 8004490:	2180      	movs	r1, #128	@ 0x80
 8004492:	187a      	adds	r2, r7, r1
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	1d7b      	adds	r3, r7, #5
 8004498:	33ff      	adds	r3, #255	@ 0xff
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b29a      	uxth	r2, r3
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80044a4:	2076      	movs	r0, #118	@ 0x76
 80044a6:	183b      	adds	r3, r7, r0
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	8912      	ldrh	r2, [r2, #8]
 80044ac:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6959      	ldr	r1, [r3, #20]
 80044b2:	1d7b      	adds	r3, r7, #5
 80044b4:	33ff      	adds	r3, #255	@ 0xff
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	b29c      	uxth	r4, r3
 80044ba:	183b      	adds	r3, r7, r0
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	0023      	movs	r3, r4
 80044c2:	f000 fd57 	bl	8004f74 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	18d3      	adds	r3, r2, r3
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	200a      	movs	r0, #10
 80044d6:	183b      	adds	r3, r7, r0
 80044d8:	493b      	ldr	r1, [pc, #236]	@ (80045c8 <USB_EPStartXfer+0xb28>)
 80044da:	400a      	ands	r2, r1
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	183b      	adds	r3, r7, r0
 80044e0:	183a      	adds	r2, r7, r0
 80044e2:	8812      	ldrh	r2, [r2, #0]
 80044e4:	2110      	movs	r1, #16
 80044e6:	404a      	eors	r2, r1
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	183b      	adds	r3, r7, r0
 80044ec:	183a      	adds	r2, r7, r0
 80044ee:	8812      	ldrh	r2, [r2, #0]
 80044f0:	2120      	movs	r1, #32
 80044f2:	404a      	eors	r2, r1
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	18d3      	adds	r3, r2, r3
 8004500:	183a      	adds	r2, r7, r0
 8004502:	8812      	ldrh	r2, [r2, #0]
 8004504:	4931      	ldr	r1, [pc, #196]	@ (80045cc <USB_EPStartXfer+0xb2c>)
 8004506:	430a      	orrs	r2, r1
 8004508:	b292      	uxth	r2, r2
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	f000 fbe9 	bl	8004ce2 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	7b1b      	ldrb	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d000      	beq.n	800451a <USB_EPStartXfer+0xa7a>
 8004518:	e0a8      	b.n	800466c <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	429a      	cmp	r2, r3
 8004524:	d90d      	bls.n	8004542 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	1d7a      	adds	r2, r7, #5
 800452c:	32ff      	adds	r2, #255	@ 0xff
 800452e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	699a      	ldr	r2, [r3, #24]
 8004534:	1d7b      	adds	r3, r7, #5
 8004536:	33ff      	adds	r3, #255	@ 0xff
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	619a      	str	r2, [r3, #24]
 8004540:	e007      	b.n	8004552 <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	1d7a      	adds	r2, r7, #5
 8004548:	32ff      	adds	r2, #255	@ 0xff
 800454a:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2190      	movs	r1, #144	@ 0x90
 8004556:	187a      	adds	r2, r7, r1
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2250      	movs	r2, #80	@ 0x50
 800455e:	5a9b      	ldrh	r3, [r3, r2]
 8004560:	b29b      	uxth	r3, r3
 8004562:	001a      	movs	r2, r3
 8004564:	187b      	adds	r3, r7, r1
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	189b      	adds	r3, r3, r2
 800456a:	187a      	adds	r2, r7, r1
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	00da      	lsls	r2, r3, #3
 8004574:	187b      	adds	r3, r7, r1
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	18d3      	adds	r3, r2, r3
 800457a:	4a10      	ldr	r2, [pc, #64]	@ (80045bc <USB_EPStartXfer+0xb1c>)
 800457c:	4694      	mov	ip, r2
 800457e:	4463      	add	r3, ip
 8004580:	218c      	movs	r1, #140	@ 0x8c
 8004582:	187a      	adds	r2, r7, r1
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	187b      	adds	r3, r7, r1
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	059b      	lsls	r3, r3, #22
 8004590:	0d9b      	lsrs	r3, r3, #22
 8004592:	b29a      	uxth	r2, r3
 8004594:	187b      	adds	r3, r7, r1
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	801a      	strh	r2, [r3, #0]
 800459a:	1d7b      	adds	r3, r7, #5
 800459c:	33ff      	adds	r3, #255	@ 0xff
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d115      	bne.n	80045d0 <USB_EPStartXfer+0xb30>
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4a04      	ldr	r2, [pc, #16]	@ (80045c0 <USB_EPStartXfer+0xb20>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	e36e      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	00000406 	.word	0x00000406
 80045c0:	ffff8000 	.word	0xffff8000
 80045c4:	00000402 	.word	0x00000402
 80045c8:	ffff8fbf 	.word	0xffff8fbf
 80045cc:	ffff8080 	.word	0xffff8080
 80045d0:	1d7b      	adds	r3, r7, #5
 80045d2:	33ff      	adds	r3, #255	@ 0xff
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80045d8:	d822      	bhi.n	8004620 <USB_EPStartXfer+0xb80>
 80045da:	1d7b      	adds	r3, r7, #5
 80045dc:	33ff      	adds	r3, #255	@ 0xff
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	21e8      	movs	r1, #232	@ 0xe8
 80045e4:	187a      	adds	r2, r7, r1
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	1d7b      	adds	r3, r7, #5
 80045ea:	33ff      	adds	r3, #255	@ 0xff
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2201      	movs	r2, #1
 80045f0:	4013      	ands	r3, r2
 80045f2:	d004      	beq.n	80045fe <USB_EPStartXfer+0xb5e>
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	187a      	adds	r2, r7, r1
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	218c      	movs	r1, #140	@ 0x8c
 8004600:	187b      	adds	r3, r7, r1
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29a      	uxth	r2, r3
 8004608:	23e8      	movs	r3, #232	@ 0xe8
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	029b      	lsls	r3, r3, #10
 8004612:	b29b      	uxth	r3, r3
 8004614:	4313      	orrs	r3, r2
 8004616:	b29a      	uxth	r2, r3
 8004618:	187b      	adds	r3, r7, r1
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	e33b      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
 8004620:	1d7b      	adds	r3, r7, #5
 8004622:	33ff      	adds	r3, #255	@ 0xff
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	21e8      	movs	r1, #232	@ 0xe8
 800462a:	187a      	adds	r2, r7, r1
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	1d7b      	adds	r3, r7, #5
 8004630:	33ff      	adds	r3, #255	@ 0xff
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	221f      	movs	r2, #31
 8004636:	4013      	ands	r3, r2
 8004638:	d104      	bne.n	8004644 <USB_EPStartXfer+0xba4>
 800463a:	187b      	adds	r3, r7, r1
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3b01      	subs	r3, #1
 8004640:	187a      	adds	r2, r7, r1
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	218c      	movs	r1, #140	@ 0x8c
 8004646:	187b      	adds	r3, r7, r1
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29a      	uxth	r2, r3
 800464e:	23e8      	movs	r3, #232	@ 0xe8
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	029b      	lsls	r3, r3, #10
 8004658:	b29b      	uxth	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	b29b      	uxth	r3, r3
 800465e:	4ad7      	ldr	r2, [pc, #860]	@ (80049bc <USB_EPStartXfer+0xf1c>)
 8004660:	4313      	orrs	r3, r2
 8004662:	b29a      	uxth	r2, r3
 8004664:	187b      	adds	r3, r7, r1
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	e315      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	78db      	ldrb	r3, [r3, #3]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d000      	beq.n	8004676 <USB_EPStartXfer+0xbd6>
 8004674:	e189      	b.n	800498a <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d000      	beq.n	8004680 <USB_EPStartXfer+0xbe0>
 800467e:	e07b      	b.n	8004778 <USB_EPStartXfer+0xcd8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	21ac      	movs	r1, #172	@ 0xac
 8004684:	187a      	adds	r2, r7, r1
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2250      	movs	r2, #80	@ 0x50
 800468c:	5a9b      	ldrh	r3, [r3, r2]
 800468e:	b29b      	uxth	r3, r3
 8004690:	001a      	movs	r2, r3
 8004692:	187b      	adds	r3, r7, r1
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	189b      	adds	r3, r3, r2
 8004698:	187a      	adds	r2, r7, r1
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	00da      	lsls	r2, r3, #3
 80046a2:	187b      	adds	r3, r7, r1
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	18d3      	adds	r3, r2, r3
 80046a8:	4ac5      	ldr	r2, [pc, #788]	@ (80049c0 <USB_EPStartXfer+0xf20>)
 80046aa:	4694      	mov	ip, r2
 80046ac:	4463      	add	r3, ip
 80046ae:	21a8      	movs	r1, #168	@ 0xa8
 80046b0:	187a      	adds	r2, r7, r1
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	059b      	lsls	r3, r3, #22
 80046be:	0d9b      	lsrs	r3, r3, #22
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	187b      	adds	r3, r7, r1
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <USB_EPStartXfer+0xc46>
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	4ab8      	ldr	r2, [pc, #736]	@ (80049bc <USB_EPStartXfer+0xf1c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	b29a      	uxth	r2, r3
 80046de:	187b      	adds	r3, r7, r1
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	e06c      	b.n	80047c0 <USB_EPStartXfer+0xd20>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80046ec:	d820      	bhi.n	8004730 <USB_EPStartXfer+0xc90>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	21e4      	movs	r1, #228	@ 0xe4
 80046f6:	187a      	adds	r2, r7, r1
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2201      	movs	r2, #1
 8004700:	4013      	ands	r3, r2
 8004702:	d004      	beq.n	800470e <USB_EPStartXfer+0xc6e>
 8004704:	187b      	adds	r3, r7, r1
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	187a      	adds	r2, r7, r1
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	21a8      	movs	r1, #168	@ 0xa8
 8004710:	187b      	adds	r3, r7, r1
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29a      	uxth	r2, r3
 8004718:	23e4      	movs	r3, #228	@ 0xe4
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	029b      	lsls	r3, r3, #10
 8004722:	b29b      	uxth	r3, r3
 8004724:	4313      	orrs	r3, r2
 8004726:	b29a      	uxth	r2, r3
 8004728:	187b      	adds	r3, r7, r1
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	801a      	strh	r2, [r3, #0]
 800472e:	e047      	b.n	80047c0 <USB_EPStartXfer+0xd20>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	21e4      	movs	r1, #228	@ 0xe4
 8004738:	187a      	adds	r2, r7, r1
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	221f      	movs	r2, #31
 8004742:	4013      	ands	r3, r2
 8004744:	d104      	bne.n	8004750 <USB_EPStartXfer+0xcb0>
 8004746:	187b      	adds	r3, r7, r1
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3b01      	subs	r3, #1
 800474c:	187a      	adds	r2, r7, r1
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	21a8      	movs	r1, #168	@ 0xa8
 8004752:	187b      	adds	r3, r7, r1
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29a      	uxth	r2, r3
 800475a:	23e4      	movs	r3, #228	@ 0xe4
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	029b      	lsls	r3, r3, #10
 8004764:	b29b      	uxth	r3, r3
 8004766:	4313      	orrs	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	4a94      	ldr	r2, [pc, #592]	@ (80049bc <USB_EPStartXfer+0xf1c>)
 800476c:	4313      	orrs	r3, r2
 800476e:	b29a      	uxth	r2, r3
 8004770:	187b      	adds	r3, r7, r1
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e023      	b.n	80047c0 <USB_EPStartXfer+0xd20>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d11f      	bne.n	80047c0 <USB_EPStartXfer+0xd20>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	21b4      	movs	r1, #180	@ 0xb4
 8004784:	187a      	adds	r2, r7, r1
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2250      	movs	r2, #80	@ 0x50
 800478c:	5a9b      	ldrh	r3, [r3, r2]
 800478e:	b29b      	uxth	r3, r3
 8004790:	001a      	movs	r2, r3
 8004792:	187b      	adds	r3, r7, r1
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	189b      	adds	r3, r3, r2
 8004798:	187a      	adds	r2, r7, r1
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	00da      	lsls	r2, r3, #3
 80047a2:	187b      	adds	r3, r7, r1
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	18d3      	adds	r3, r2, r3
 80047a8:	4a85      	ldr	r2, [pc, #532]	@ (80049c0 <USB_EPStartXfer+0xf20>)
 80047aa:	4694      	mov	ip, r2
 80047ac:	4463      	add	r3, ip
 80047ae:	21b0      	movs	r1, #176	@ 0xb0
 80047b0:	187a      	adds	r2, r7, r1
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	187b      	adds	r3, r7, r1
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	801a      	strh	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	22a4      	movs	r2, #164	@ 0xa4
 80047c4:	18ba      	adds	r2, r7, r2
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	785b      	ldrb	r3, [r3, #1]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d000      	beq.n	80047d2 <USB_EPStartXfer+0xd32>
 80047d0:	e07b      	b.n	80048ca <USB_EPStartXfer+0xe2a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	219c      	movs	r1, #156	@ 0x9c
 80047d6:	187a      	adds	r2, r7, r1
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2250      	movs	r2, #80	@ 0x50
 80047de:	5a9b      	ldrh	r3, [r3, r2]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	001a      	movs	r2, r3
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	189b      	adds	r3, r3, r2
 80047ea:	187a      	adds	r2, r7, r1
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	00da      	lsls	r2, r3, #3
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	18d3      	adds	r3, r2, r3
 80047fa:	4a72      	ldr	r2, [pc, #456]	@ (80049c4 <USB_EPStartXfer+0xf24>)
 80047fc:	4694      	mov	ip, r2
 80047fe:	4463      	add	r3, ip
 8004800:	2198      	movs	r1, #152	@ 0x98
 8004802:	187a      	adds	r2, r7, r1
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	187b      	adds	r3, r7, r1
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	059b      	lsls	r3, r3, #22
 8004810:	0d9b      	lsrs	r3, r3, #22
 8004812:	b29a      	uxth	r2, r3
 8004814:	187b      	adds	r3, r7, r1
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <USB_EPStartXfer+0xd98>
 8004822:	187b      	adds	r3, r7, r1
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	4a64      	ldr	r2, [pc, #400]	@ (80049bc <USB_EPStartXfer+0xf1c>)
 800482c:	4313      	orrs	r3, r2
 800482e:	b29a      	uxth	r2, r3
 8004830:	187b      	adds	r3, r7, r1
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	e069      	b.n	800490c <USB_EPStartXfer+0xe6c>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b3e      	cmp	r3, #62	@ 0x3e
 800483e:	d820      	bhi.n	8004882 <USB_EPStartXfer+0xde2>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	21e0      	movs	r1, #224	@ 0xe0
 8004848:	187a      	adds	r2, r7, r1
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2201      	movs	r2, #1
 8004852:	4013      	ands	r3, r2
 8004854:	d004      	beq.n	8004860 <USB_EPStartXfer+0xdc0>
 8004856:	187b      	adds	r3, r7, r1
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	187a      	adds	r2, r7, r1
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	2198      	movs	r1, #152	@ 0x98
 8004862:	187b      	adds	r3, r7, r1
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29a      	uxth	r2, r3
 800486a:	23e0      	movs	r3, #224	@ 0xe0
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	029b      	lsls	r3, r3, #10
 8004874:	b29b      	uxth	r3, r3
 8004876:	4313      	orrs	r3, r2
 8004878:	b29a      	uxth	r2, r3
 800487a:	187b      	adds	r3, r7, r1
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	801a      	strh	r2, [r3, #0]
 8004880:	e044      	b.n	800490c <USB_EPStartXfer+0xe6c>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	21e0      	movs	r1, #224	@ 0xe0
 800488a:	187a      	adds	r2, r7, r1
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	221f      	movs	r2, #31
 8004894:	4013      	ands	r3, r2
 8004896:	d104      	bne.n	80048a2 <USB_EPStartXfer+0xe02>
 8004898:	187b      	adds	r3, r7, r1
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	187a      	adds	r2, r7, r1
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	2198      	movs	r1, #152	@ 0x98
 80048a4:	187b      	adds	r3, r7, r1
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	23e0      	movs	r3, #224	@ 0xe0
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	029b      	lsls	r3, r3, #10
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4313      	orrs	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	4a3f      	ldr	r2, [pc, #252]	@ (80049bc <USB_EPStartXfer+0xf1c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	187b      	adds	r3, r7, r1
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	801a      	strh	r2, [r3, #0]
 80048c8:	e020      	b.n	800490c <USB_EPStartXfer+0xe6c>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	785b      	ldrb	r3, [r3, #1]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d11c      	bne.n	800490c <USB_EPStartXfer+0xe6c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2250      	movs	r2, #80	@ 0x50
 80048d6:	5a9b      	ldrh	r3, [r3, r2]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	001a      	movs	r2, r3
 80048dc:	21a4      	movs	r1, #164	@ 0xa4
 80048de:	187b      	adds	r3, r7, r1
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	187a      	adds	r2, r7, r1
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	00da      	lsls	r2, r3, #3
 80048ee:	187b      	adds	r3, r7, r1
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	18d3      	adds	r3, r2, r3
 80048f4:	4a33      	ldr	r2, [pc, #204]	@ (80049c4 <USB_EPStartXfer+0xf24>)
 80048f6:	4694      	mov	ip, r2
 80048f8:	4463      	add	r3, ip
 80048fa:	21a0      	movs	r1, #160	@ 0xa0
 80048fc:	187a      	adds	r2, r7, r1
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	b29a      	uxth	r2, r3
 8004906:	187b      	adds	r3, r7, r1
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d100      	bne.n	8004916 <USB_EPStartXfer+0xe76>
 8004914:	e1c0      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	18d2      	adds	r2, r2, r3
 8004920:	2196      	movs	r1, #150	@ 0x96
 8004922:	187b      	adds	r3, r7, r1
 8004924:	8812      	ldrh	r2, [r2, #0]
 8004926:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004928:	187b      	adds	r3, r7, r1
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	2380      	movs	r3, #128	@ 0x80
 800492e:	01db      	lsls	r3, r3, #7
 8004930:	4013      	ands	r3, r2
 8004932:	d004      	beq.n	800493e <USB_EPStartXfer+0xe9e>
 8004934:	187b      	adds	r3, r7, r1
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	2240      	movs	r2, #64	@ 0x40
 800493a:	4013      	ands	r3, r2
 800493c:	d10d      	bne.n	800495a <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800493e:	2196      	movs	r1, #150	@ 0x96
 8004940:	187b      	adds	r3, r7, r1
 8004942:	881a      	ldrh	r2, [r3, #0]
 8004944:	2380      	movs	r3, #128	@ 0x80
 8004946:	01db      	lsls	r3, r3, #7
 8004948:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800494a:	d000      	beq.n	800494e <USB_EPStartXfer+0xeae>
 800494c:	e1a4      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800494e:	187b      	adds	r3, r7, r1
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	2240      	movs	r2, #64	@ 0x40
 8004954:	4013      	ands	r3, r2
 8004956:	d000      	beq.n	800495a <USB_EPStartXfer+0xeba>
 8004958:	e19e      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	18d3      	adds	r3, r2, r3
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29a      	uxth	r2, r3
 8004968:	2094      	movs	r0, #148	@ 0x94
 800496a:	183b      	adds	r3, r7, r0
 800496c:	4916      	ldr	r1, [pc, #88]	@ (80049c8 <USB_EPStartXfer+0xf28>)
 800496e:	400a      	ands	r2, r1
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	18d3      	adds	r3, r2, r3
 800497c:	183a      	adds	r2, r7, r0
 800497e:	8812      	ldrh	r2, [r2, #0]
 8004980:	4912      	ldr	r1, [pc, #72]	@ (80049cc <USB_EPStartXfer+0xf2c>)
 8004982:	430a      	orrs	r2, r1
 8004984:	b292      	uxth	r2, r2
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	e186      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	78db      	ldrb	r3, [r3, #3]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d000      	beq.n	8004994 <USB_EPStartXfer+0xef4>
 8004992:	e17f      	b.n	8004c94 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	429a      	cmp	r2, r3
 800499e:	d917      	bls.n	80049d0 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	1d7a      	adds	r2, r7, #5
 80049a6:	32ff      	adds	r2, #255	@ 0xff
 80049a8:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	1d7b      	adds	r3, r7, #5
 80049b0:	33ff      	adds	r3, #255	@ 0xff
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1ad2      	subs	r2, r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	619a      	str	r2, [r3, #24]
 80049ba:	e011      	b.n	80049e0 <USB_EPStartXfer+0xf40>
 80049bc:	ffff8000 	.word	0xffff8000
 80049c0:	00000402 	.word	0x00000402
 80049c4:	00000406 	.word	0x00000406
 80049c8:	ffff8f8f 	.word	0xffff8f8f
 80049cc:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	1d7a      	adds	r2, r7, #5
 80049d6:	32ff      	adds	r2, #255	@ 0xff
 80049d8:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d000      	beq.n	80049ea <USB_EPStartXfer+0xf4a>
 80049e8:	e081      	b.n	8004aee <USB_EPStartXfer+0x104e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	21cc      	movs	r1, #204	@ 0xcc
 80049ee:	187a      	adds	r2, r7, r1
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2250      	movs	r2, #80	@ 0x50
 80049f6:	5a9b      	ldrh	r3, [r3, r2]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	001a      	movs	r2, r3
 80049fc:	187b      	adds	r3, r7, r1
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	189b      	adds	r3, r3, r2
 8004a02:	187a      	adds	r2, r7, r1
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	00da      	lsls	r2, r3, #3
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	18d3      	adds	r3, r2, r3
 8004a12:	4ab6      	ldr	r2, [pc, #728]	@ (8004cec <USB_EPStartXfer+0x124c>)
 8004a14:	4694      	mov	ip, r2
 8004a16:	4463      	add	r3, ip
 8004a18:	21c8      	movs	r1, #200	@ 0xc8
 8004a1a:	187a      	adds	r2, r7, r1
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	187b      	adds	r3, r7, r1
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	059b      	lsls	r3, r3, #22
 8004a28:	0d9b      	lsrs	r3, r3, #22
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	187b      	adds	r3, r7, r1
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	1d7b      	adds	r3, r7, #5
 8004a34:	33ff      	adds	r3, #255	@ 0xff
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <USB_EPStartXfer+0xfb2>
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4aaa      	ldr	r2, [pc, #680]	@ (8004cf0 <USB_EPStartXfer+0x1250>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	187b      	adds	r3, r7, r1
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	e072      	b.n	8004b38 <USB_EPStartXfer+0x1098>
 8004a52:	1d7b      	adds	r3, r7, #5
 8004a54:	33ff      	adds	r3, #255	@ 0xff
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a5a:	d822      	bhi.n	8004aa2 <USB_EPStartXfer+0x1002>
 8004a5c:	1d7b      	adds	r3, r7, #5
 8004a5e:	33ff      	adds	r3, #255	@ 0xff
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	21dc      	movs	r1, #220	@ 0xdc
 8004a66:	187a      	adds	r2, r7, r1
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	1d7b      	adds	r3, r7, #5
 8004a6c:	33ff      	adds	r3, #255	@ 0xff
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	4013      	ands	r3, r2
 8004a74:	d004      	beq.n	8004a80 <USB_EPStartXfer+0xfe0>
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	187a      	adds	r2, r7, r1
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	21c8      	movs	r1, #200	@ 0xc8
 8004a82:	187b      	adds	r3, r7, r1
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	23dc      	movs	r3, #220	@ 0xdc
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	029b      	lsls	r3, r3, #10
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	4313      	orrs	r3, r2
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	187b      	adds	r3, r7, r1
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	e04a      	b.n	8004b38 <USB_EPStartXfer+0x1098>
 8004aa2:	1d7b      	adds	r3, r7, #5
 8004aa4:	33ff      	adds	r3, #255	@ 0xff
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	21dc      	movs	r1, #220	@ 0xdc
 8004aac:	187a      	adds	r2, r7, r1
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	1d7b      	adds	r3, r7, #5
 8004ab2:	33ff      	adds	r3, #255	@ 0xff
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	221f      	movs	r2, #31
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d104      	bne.n	8004ac6 <USB_EPStartXfer+0x1026>
 8004abc:	187b      	adds	r3, r7, r1
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	187a      	adds	r2, r7, r1
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	21c8      	movs	r1, #200	@ 0xc8
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	23dc      	movs	r3, #220	@ 0xdc
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	4a83      	ldr	r2, [pc, #524]	@ (8004cf0 <USB_EPStartXfer+0x1250>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	187b      	adds	r3, r7, r1
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	801a      	strh	r2, [r3, #0]
 8004aec:	e024      	b.n	8004b38 <USB_EPStartXfer+0x1098>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d120      	bne.n	8004b38 <USB_EPStartXfer+0x1098>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	21d4      	movs	r1, #212	@ 0xd4
 8004afa:	187a      	adds	r2, r7, r1
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2250      	movs	r2, #80	@ 0x50
 8004b02:	5a9b      	ldrh	r3, [r3, r2]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	001a      	movs	r2, r3
 8004b08:	187b      	adds	r3, r7, r1
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	189b      	adds	r3, r3, r2
 8004b0e:	187a      	adds	r2, r7, r1
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	00da      	lsls	r2, r3, #3
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	18d3      	adds	r3, r2, r3
 8004b1e:	4a73      	ldr	r2, [pc, #460]	@ (8004cec <USB_EPStartXfer+0x124c>)
 8004b20:	4694      	mov	ip, r2
 8004b22:	4463      	add	r3, ip
 8004b24:	21d0      	movs	r1, #208	@ 0xd0
 8004b26:	187a      	adds	r2, r7, r1
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	1d7b      	adds	r3, r7, #5
 8004b2c:	33ff      	adds	r3, #255	@ 0xff
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	22c4      	movs	r2, #196	@ 0xc4
 8004b3c:	18ba      	adds	r2, r7, r2
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d000      	beq.n	8004b4a <USB_EPStartXfer+0x10aa>
 8004b48:	e081      	b.n	8004c4e <USB_EPStartXfer+0x11ae>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	21bc      	movs	r1, #188	@ 0xbc
 8004b4e:	187a      	adds	r2, r7, r1
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2250      	movs	r2, #80	@ 0x50
 8004b56:	5a9b      	ldrh	r3, [r3, r2]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	187b      	adds	r3, r7, r1
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	189b      	adds	r3, r3, r2
 8004b62:	187a      	adds	r2, r7, r1
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	00da      	lsls	r2, r3, #3
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	18d3      	adds	r3, r2, r3
 8004b72:	4a60      	ldr	r2, [pc, #384]	@ (8004cf4 <USB_EPStartXfer+0x1254>)
 8004b74:	4694      	mov	ip, r2
 8004b76:	4463      	add	r3, ip
 8004b78:	21b8      	movs	r1, #184	@ 0xb8
 8004b7a:	187a      	adds	r2, r7, r1
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	187b      	adds	r3, r7, r1
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	059b      	lsls	r3, r3, #22
 8004b88:	0d9b      	lsrs	r3, r3, #22
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	187b      	adds	r3, r7, r1
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	801a      	strh	r2, [r3, #0]
 8004b92:	1d7b      	adds	r3, r7, #5
 8004b94:	33ff      	adds	r3, #255	@ 0xff
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <USB_EPStartXfer+0x1112>
 8004b9c:	187b      	adds	r3, r7, r1
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	4a52      	ldr	r2, [pc, #328]	@ (8004cf0 <USB_EPStartXfer+0x1250>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	e072      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
 8004bb2:	1d7b      	adds	r3, r7, #5
 8004bb4:	33ff      	adds	r3, #255	@ 0xff
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004bba:	d822      	bhi.n	8004c02 <USB_EPStartXfer+0x1162>
 8004bbc:	1d7b      	adds	r3, r7, #5
 8004bbe:	33ff      	adds	r3, #255	@ 0xff
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	21d8      	movs	r1, #216	@ 0xd8
 8004bc6:	187a      	adds	r2, r7, r1
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	1d7b      	adds	r3, r7, #5
 8004bcc:	33ff      	adds	r3, #255	@ 0xff
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <USB_EPStartXfer+0x1140>
 8004bd6:	187b      	adds	r3, r7, r1
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	187a      	adds	r2, r7, r1
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	21b8      	movs	r1, #184	@ 0xb8
 8004be2:	187b      	adds	r3, r7, r1
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	23d8      	movs	r3, #216	@ 0xd8
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	029b      	lsls	r3, r3, #10
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	187b      	adds	r3, r7, r1
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	e04a      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
 8004c02:	1d7b      	adds	r3, r7, #5
 8004c04:	33ff      	adds	r3, #255	@ 0xff
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	21d8      	movs	r1, #216	@ 0xd8
 8004c0c:	187a      	adds	r2, r7, r1
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	1d7b      	adds	r3, r7, #5
 8004c12:	33ff      	adds	r3, #255	@ 0xff
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	221f      	movs	r2, #31
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d104      	bne.n	8004c26 <USB_EPStartXfer+0x1186>
 8004c1c:	187b      	adds	r3, r7, r1
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	187a      	adds	r2, r7, r1
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	21b8      	movs	r1, #184	@ 0xb8
 8004c28:	187b      	adds	r3, r7, r1
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	23d8      	movs	r3, #216	@ 0xd8
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	029b      	lsls	r3, r3, #10
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	4a2b      	ldr	r2, [pc, #172]	@ (8004cf0 <USB_EPStartXfer+0x1250>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	187b      	adds	r3, r7, r1
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	801a      	strh	r2, [r3, #0]
 8004c4c:	e024      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d120      	bne.n	8004c98 <USB_EPStartXfer+0x11f8>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2250      	movs	r2, #80	@ 0x50
 8004c5a:	5a9b      	ldrh	r3, [r3, r2]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	001a      	movs	r2, r3
 8004c60:	21c4      	movs	r1, #196	@ 0xc4
 8004c62:	187b      	adds	r3, r7, r1
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	187a      	adds	r2, r7, r1
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	00da      	lsls	r2, r3, #3
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	18d3      	adds	r3, r2, r3
 8004c78:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf4 <USB_EPStartXfer+0x1254>)
 8004c7a:	4694      	mov	ip, r2
 8004c7c:	4463      	add	r3, ip
 8004c7e:	21c0      	movs	r1, #192	@ 0xc0
 8004c80:	187a      	adds	r2, r7, r1
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	1d7b      	adds	r3, r7, #5
 8004c86:	33ff      	adds	r3, #255	@ 0xff
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	e001      	b.n	8004c98 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e025      	b.n	8004ce4 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	18d3      	adds	r3, r2, r3
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	208a      	movs	r0, #138	@ 0x8a
 8004ca8:	183b      	adds	r3, r7, r0
 8004caa:	4913      	ldr	r1, [pc, #76]	@ (8004cf8 <USB_EPStartXfer+0x1258>)
 8004cac:	400a      	ands	r2, r1
 8004cae:	801a      	strh	r2, [r3, #0]
 8004cb0:	183b      	adds	r3, r7, r0
 8004cb2:	183a      	adds	r2, r7, r0
 8004cb4:	8812      	ldrh	r2, [r2, #0]
 8004cb6:	2180      	movs	r1, #128	@ 0x80
 8004cb8:	0149      	lsls	r1, r1, #5
 8004cba:	404a      	eors	r2, r1
 8004cbc:	801a      	strh	r2, [r3, #0]
 8004cbe:	183b      	adds	r3, r7, r0
 8004cc0:	183a      	adds	r2, r7, r0
 8004cc2:	8812      	ldrh	r2, [r2, #0]
 8004cc4:	2180      	movs	r1, #128	@ 0x80
 8004cc6:	0189      	lsls	r1, r1, #6
 8004cc8:	404a      	eors	r2, r1
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	183a      	adds	r2, r7, r0
 8004cd8:	8812      	ldrh	r2, [r2, #0]
 8004cda:	4908      	ldr	r1, [pc, #32]	@ (8004cfc <USB_EPStartXfer+0x125c>)
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b043      	add	sp, #268	@ 0x10c
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	00000402 	.word	0x00000402
 8004cf0:	ffff8000 	.word	0xffff8000
 8004cf4:	00000406 	.word	0x00000406
 8004cf8:	ffffbf8f 	.word	0xffffbf8f
 8004cfc:	ffff8080 	.word	0xffff8080

08004d00 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01d      	beq.n	8004d4e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	18d3      	adds	r3, r2, r3
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	200c      	movs	r0, #12
 8004d22:	183b      	adds	r3, r7, r0
 8004d24:	491b      	ldr	r1, [pc, #108]	@ (8004d94 <USB_EPSetStall+0x94>)
 8004d26:	400a      	ands	r2, r1
 8004d28:	801a      	strh	r2, [r3, #0]
 8004d2a:	183b      	adds	r3, r7, r0
 8004d2c:	183a      	adds	r2, r7, r0
 8004d2e:	8812      	ldrh	r2, [r2, #0]
 8004d30:	2110      	movs	r1, #16
 8004d32:	404a      	eors	r2, r1
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	18d3      	adds	r3, r2, r3
 8004d40:	183a      	adds	r2, r7, r0
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	4914      	ldr	r1, [pc, #80]	@ (8004d98 <USB_EPSetStall+0x98>)
 8004d46:	430a      	orrs	r2, r1
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	801a      	strh	r2, [r3, #0]
 8004d4c:	e01d      	b.n	8004d8a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	18d3      	adds	r3, r2, r3
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	200e      	movs	r0, #14
 8004d5e:	183b      	adds	r3, r7, r0
 8004d60:	490e      	ldr	r1, [pc, #56]	@ (8004d9c <USB_EPSetStall+0x9c>)
 8004d62:	400a      	ands	r2, r1
 8004d64:	801a      	strh	r2, [r3, #0]
 8004d66:	183b      	adds	r3, r7, r0
 8004d68:	183a      	adds	r2, r7, r0
 8004d6a:	8812      	ldrh	r2, [r2, #0]
 8004d6c:	2180      	movs	r1, #128	@ 0x80
 8004d6e:	0149      	lsls	r1, r1, #5
 8004d70:	404a      	eors	r2, r1
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	18d3      	adds	r3, r2, r3
 8004d7e:	183a      	adds	r2, r7, r0
 8004d80:	8812      	ldrh	r2, [r2, #0]
 8004d82:	4905      	ldr	r1, [pc, #20]	@ (8004d98 <USB_EPSetStall+0x98>)
 8004d84:	430a      	orrs	r2, r1
 8004d86:	b292      	uxth	r2, r2
 8004d88:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b004      	add	sp, #16
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	ffff8fbf 	.word	0xffff8fbf
 8004d98:	ffff8080 	.word	0xffff8080
 8004d9c:	ffffbf8f 	.word	0xffffbf8f

08004da0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	7b1b      	ldrb	r3, [r3, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d000      	beq.n	8004db4 <USB_EPClearStall+0x14>
 8004db2:	e095      	b.n	8004ee0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d046      	beq.n	8004e4a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	18d2      	adds	r2, r2, r3
 8004dc6:	2110      	movs	r1, #16
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	8812      	ldrh	r2, [r2, #0]
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	2240      	movs	r2, #64	@ 0x40
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d016      	beq.n	8004e06 <USB_EPClearStall+0x66>
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	200e      	movs	r0, #14
 8004de8:	183b      	adds	r3, r7, r0
 8004dea:	4940      	ldr	r1, [pc, #256]	@ (8004eec <USB_EPClearStall+0x14c>)
 8004dec:	400a      	ands	r2, r1
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	18d3      	adds	r3, r2, r3
 8004dfa:	183a      	adds	r2, r7, r0
 8004dfc:	8812      	ldrh	r2, [r2, #0]
 8004dfe:	493c      	ldr	r1, [pc, #240]	@ (8004ef0 <USB_EPClearStall+0x150>)
 8004e00:	430a      	orrs	r2, r1
 8004e02:	b292      	uxth	r2, r2
 8004e04:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	78db      	ldrb	r3, [r3, #3]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d068      	beq.n	8004ee0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	18d3      	adds	r3, r2, r3
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	200c      	movs	r0, #12
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	4934      	ldr	r1, [pc, #208]	@ (8004ef4 <USB_EPClearStall+0x154>)
 8004e22:	400a      	ands	r2, r1
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	183b      	adds	r3, r7, r0
 8004e28:	183a      	adds	r2, r7, r0
 8004e2a:	8812      	ldrh	r2, [r2, #0]
 8004e2c:	2120      	movs	r1, #32
 8004e2e:	404a      	eors	r2, r1
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	18d3      	adds	r3, r2, r3
 8004e3c:	183a      	adds	r2, r7, r0
 8004e3e:	8812      	ldrh	r2, [r2, #0]
 8004e40:	492d      	ldr	r1, [pc, #180]	@ (8004ef8 <USB_EPClearStall+0x158>)
 8004e42:	430a      	orrs	r2, r1
 8004e44:	b292      	uxth	r2, r2
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	e04a      	b.n	8004ee0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	18d2      	adds	r2, r2, r3
 8004e54:	2116      	movs	r1, #22
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	8812      	ldrh	r2, [r2, #0]
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	881a      	ldrh	r2, [r3, #0]
 8004e60:	2380      	movs	r3, #128	@ 0x80
 8004e62:	01db      	lsls	r3, r3, #7
 8004e64:	4013      	ands	r3, r2
 8004e66:	d016      	beq.n	8004e96 <USB_EPClearStall+0xf6>
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	18d3      	adds	r3, r2, r3
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	2014      	movs	r0, #20
 8004e78:	183b      	adds	r3, r7, r0
 8004e7a:	491c      	ldr	r1, [pc, #112]	@ (8004eec <USB_EPClearStall+0x14c>)
 8004e7c:	400a      	ands	r2, r1
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	18d3      	adds	r3, r2, r3
 8004e8a:	183a      	adds	r2, r7, r0
 8004e8c:	8812      	ldrh	r2, [r2, #0]
 8004e8e:	491b      	ldr	r1, [pc, #108]	@ (8004efc <USB_EPClearStall+0x15c>)
 8004e90:	430a      	orrs	r2, r1
 8004e92:	b292      	uxth	r2, r2
 8004e94:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	18d3      	adds	r3, r2, r3
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	2012      	movs	r0, #18
 8004ea6:	183b      	adds	r3, r7, r0
 8004ea8:	4915      	ldr	r1, [pc, #84]	@ (8004f00 <USB_EPClearStall+0x160>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	183b      	adds	r3, r7, r0
 8004eb0:	183a      	adds	r2, r7, r0
 8004eb2:	8812      	ldrh	r2, [r2, #0]
 8004eb4:	2180      	movs	r1, #128	@ 0x80
 8004eb6:	0149      	lsls	r1, r1, #5
 8004eb8:	404a      	eors	r2, r1
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	183b      	adds	r3, r7, r0
 8004ebe:	183a      	adds	r2, r7, r0
 8004ec0:	8812      	ldrh	r2, [r2, #0]
 8004ec2:	2180      	movs	r1, #128	@ 0x80
 8004ec4:	0189      	lsls	r1, r1, #6
 8004ec6:	404a      	eors	r2, r1
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	18d3      	adds	r3, r2, r3
 8004ed4:	183a      	adds	r2, r7, r0
 8004ed6:	8812      	ldrh	r2, [r2, #0]
 8004ed8:	4907      	ldr	r1, [pc, #28]	@ (8004ef8 <USB_EPClearStall+0x158>)
 8004eda:	430a      	orrs	r2, r1
 8004edc:	b292      	uxth	r2, r2
 8004ede:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b006      	add	sp, #24
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	ffff8f8f 	.word	0xffff8f8f
 8004ef0:	ffff80c0 	.word	0xffff80c0
 8004ef4:	ffff8fbf 	.word	0xffff8fbf
 8004ef8:	ffff8080 	.word	0xffff8080
 8004efc:	ffffc080 	.word	0xffffc080
 8004f00:	ffffbf8f 	.word	0xffffbf8f

08004f04 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	000a      	movs	r2, r1
 8004f0e:	1cfb      	adds	r3, r7, #3
 8004f10:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8004f12:	1cfb      	adds	r3, r7, #3
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	224c      	movs	r2, #76	@ 0x4c
 8004f1e:	2180      	movs	r1, #128	@ 0x80
 8004f20:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2258      	movs	r2, #88	@ 0x58
 8004f38:	5a9b      	ldrh	r3, [r3, r2]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4a05      	ldr	r2, [pc, #20]	@ (8004f54 <USB_DevConnect+0x28>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b299      	uxth	r1, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2258      	movs	r2, #88	@ 0x58
 8004f46:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b002      	add	sp, #8
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			@ (mov r8, r8)
 8004f54:	ffff8000 	.word	0xffff8000

08004f58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2244      	movs	r2, #68	@ 0x44
 8004f64:	5a9b      	ldrh	r3, [r3, r2]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b004      	add	sp, #16
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	@ 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	0019      	movs	r1, r3
 8004f80:	1dbb      	adds	r3, r7, #6
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	1d3b      	adds	r3, r7, #4
 8004f86:	1c0a      	adds	r2, r1, #0
 8004f88:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f8a:	1d3b      	adds	r3, r7, #4
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f9c:	1dbb      	adds	r3, r7, #6
 8004f9e:	881a      	ldrh	r2, [r3, #0]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	18d3      	adds	r3, r2, r3
 8004fa4:	2280      	movs	r2, #128	@ 0x80
 8004fa6:	00d2      	lsls	r2, r2, #3
 8004fa8:	4694      	mov	ip, r2
 8004faa:	4463      	add	r3, ip
 8004fac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb2:	e021      	b.n	8004ff8 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	2112      	movs	r1, #18
 8004fba:	187b      	adds	r3, r7, r1
 8004fbc:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	b21b      	sxth	r3, r3
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	b21a      	sxth	r2, r3
 8004fca:	187b      	adds	r3, r7, r1
 8004fcc:	2000      	movs	r0, #0
 8004fce:	5e1b      	ldrsh	r3, [r3, r0]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	b21a      	sxth	r2, r3
 8004fd4:	187b      	adds	r3, r7, r1
 8004fd6:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	187a      	adds	r2, r7, r1
 8004fdc:	8812      	ldrh	r2, [r2, #0]
 8004fde:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	3302      	adds	r3, #2
 8004fe4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1da      	bne.n	8004fb4 <USB_WritePMA+0x40>
  }
}
 8004ffe:	46c0      	nop			@ (mov r8, r8)
 8005000:	46c0      	nop			@ (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b00a      	add	sp, #40	@ 0x28
 8005006:	bd80      	pop	{r7, pc}

08005008 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	@ 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	0019      	movs	r1, r3
 8005014:	1dbb      	adds	r3, r7, #6
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	1c0a      	adds	r2, r1, #0
 800501c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800501e:	1d3b      	adds	r3, r7, #4
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	b29b      	uxth	r3, r3
 8005026:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005030:	1dbb      	adds	r3, r7, #6
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	18d3      	adds	r3, r2, r3
 8005038:	2280      	movs	r2, #128	@ 0x80
 800503a:	00d2      	lsls	r2, r2, #3
 800503c:	4694      	mov	ip, r2
 800503e:	4463      	add	r3, ip
 8005040:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
 8005046:	e018      	b.n	800507a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	b29b      	uxth	r3, r3
 800504e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	3302      	adds	r3, #2
 8005054:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	b2da      	uxtb	r2, r3
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3301      	adds	r3, #1
 8005062:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	b2da      	uxtb	r2, r3
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3301      	adds	r3, #1
 8005072:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	3b01      	subs	r3, #1
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e3      	bne.n	8005048 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	2201      	movs	r2, #1
 8005086:	4013      	ands	r3, r2
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	701a      	strb	r2, [r3, #0]
  }
}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b00a      	add	sp, #40	@ 0x28
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	000a      	movs	r2, r1
 80050b0:	1cfb      	adds	r3, r7, #3
 80050b2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80050b4:	230f      	movs	r3, #15
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7c1b      	ldrb	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d116      	bne.n	80050f2 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80050c4:	2380      	movs	r3, #128	@ 0x80
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	2181      	movs	r1, #129	@ 0x81
 80050ce:	f002 f88c 	bl	80071ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80050d8:	2380      	movs	r3, #128	@ 0x80
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	2101      	movs	r1, #1
 80050e2:	f002 f882 	bl	80071ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	23b6      	movs	r3, #182	@ 0xb6
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	2101      	movs	r1, #1
 80050ee:	50d1      	str	r1, [r2, r3]
 80050f0:	e013      	b.n	800511a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	2340      	movs	r3, #64	@ 0x40
 80050f6:	2202      	movs	r2, #2
 80050f8:	2181      	movs	r1, #129	@ 0x81
 80050fa:	f002 f876 	bl	80071ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	2340      	movs	r3, #64	@ 0x40
 8005108:	2202      	movs	r2, #2
 800510a:	2101      	movs	r1, #1
 800510c:	f002 f86d 	bl	80071ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	23b6      	movs	r3, #182	@ 0xb6
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	2101      	movs	r1, #1
 8005118:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	2308      	movs	r3, #8
 800511e:	2203      	movs	r2, #3
 8005120:	2182      	movs	r1, #130	@ 0x82
 8005122:	f002 f862 	bl	80071ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800512c:	2387      	movs	r3, #135	@ 0x87
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	0018      	movs	r0, r3
 8005132:	f002 f9f1 	bl	8007518 <USBD_static_malloc>
 8005136:	0001      	movs	r1, r0
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	23ae      	movs	r3, #174	@ 0xae
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	23ae      	movs	r3, #174	@ 0xae
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	58d3      	ldr	r3, [r2, r3]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800514c:	230f      	movs	r3, #15
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	2201      	movs	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	e02c      	b.n	80051b0 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	23ae      	movs	r3, #174	@ 0xae
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	58d3      	ldr	r3, [r2, r3]
 800515e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	23af      	movs	r3, #175	@ 0xaf
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	58d3      	ldr	r3, [r2, r3]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	2385      	movs	r3, #133	@ 0x85
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	2100      	movs	r1, #0
 8005174:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	2386      	movs	r3, #134	@ 0x86
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	2100      	movs	r1, #0
 800517e:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	7c1b      	ldrb	r3, [r3, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	2381      	movs	r3, #129	@ 0x81
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	58d2      	ldr	r2, [r2, r3]
 8005190:	2380      	movs	r3, #128	@ 0x80
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	2101      	movs	r1, #1
 8005198:	f002 f971 	bl	800747e <USBD_LL_PrepareReceive>
 800519c:	e008      	b.n	80051b0 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	2381      	movs	r3, #129	@ 0x81
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	58d2      	ldr	r2, [r2, r3]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	2340      	movs	r3, #64	@ 0x40
 80051aa:	2101      	movs	r1, #1
 80051ac:	f002 f967 	bl	800747e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80051b0:	230f      	movs	r3, #15
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	781b      	ldrb	r3, [r3, #0]
}
 80051b6:	0018      	movs	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b004      	add	sp, #16
 80051bc:	bd80      	pop	{r7, pc}

080051be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	000a      	movs	r2, r1
 80051c8:	1cfb      	adds	r3, r7, #3
 80051ca:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80051cc:	230f      	movs	r3, #15
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2181      	movs	r1, #129	@ 0x81
 80051d8:	0018      	movs	r0, r3
 80051da:	f002 f83d 	bl	8007258 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2101      	movs	r1, #1
 80051e8:	0018      	movs	r0, r3
 80051ea:	f002 f835 	bl	8007258 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	23b6      	movs	r3, #182	@ 0xb6
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	2100      	movs	r1, #0
 80051f6:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2182      	movs	r1, #130	@ 0x82
 80051fc:	0018      	movs	r0, r3
 80051fe:	f002 f82b 	bl	8007258 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	23ae      	movs	r3, #174	@ 0xae
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	58d3      	ldr	r3, [r2, r3]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d011      	beq.n	8005238 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	23af      	movs	r3, #175	@ 0xaf
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	58d3      	ldr	r3, [r2, r3]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	23ae      	movs	r3, #174	@ 0xae
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	58d3      	ldr	r3, [r2, r3]
 8005228:	0018      	movs	r0, r3
 800522a:	f002 f981 	bl	8007530 <USBD_static_free>
    pdev->pClassData = NULL;
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	23ae      	movs	r3, #174	@ 0xae
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	2100      	movs	r1, #0
 8005236:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8005238:	230f      	movs	r3, #15
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	781b      	ldrb	r3, [r3, #0]
}
 800523e:	0018      	movs	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	b004      	add	sp, #16
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	23ae      	movs	r3, #174	@ 0xae
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	58d3      	ldr	r3, [r2, r3]
 800525a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800525c:	230f      	movs	r3, #15
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005264:	230c      	movs	r3, #12
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	2200      	movs	r2, #0
 800526a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800526c:	2317      	movs	r3, #23
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	001a      	movs	r2, r3
 800527a:	2360      	movs	r3, #96	@ 0x60
 800527c:	4013      	ands	r3, r2
 800527e:	d03d      	beq.n	80052fc <USBD_CDC_Setup+0xb4>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d000      	beq.n	8005286 <USBD_CDC_Setup+0x3e>
 8005284:	e094      	b.n	80053b0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	88db      	ldrh	r3, [r3, #6]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d02b      	beq.n	80052e6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	b25b      	sxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	da12      	bge.n	80052be <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	23af      	movs	r3, #175	@ 0xaf
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	58d3      	ldr	r3, [r2, r3]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80052a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	88d2      	ldrh	r2, [r2, #6]
 80052ac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052ae:	6939      	ldr	r1, [r7, #16]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	88da      	ldrh	r2, [r3, #6]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f001 fbaf 	bl	8006a1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80052bc:	e083      	b.n	80053c6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	7859      	ldrb	r1, [r3, #1]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	2380      	movs	r3, #128	@ 0x80
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	88db      	ldrh	r3, [r3, #6]
 80052ce:	b2d9      	uxtb	r1, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4a40      	ldr	r2, [pc, #256]	@ (80053d4 <USBD_CDC_Setup+0x18c>)
 80052d4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052d6:	6939      	ldr	r1, [r7, #16]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	88da      	ldrh	r2, [r3, #6]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	0018      	movs	r0, r3
 80052e0:	f001 fbce 	bl	8006a80 <USBD_CtlPrepareRx>
      break;
 80052e4:	e06f      	b.n	80053c6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	23af      	movs	r3, #175	@ 0xaf
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	58d3      	ldr	r3, [r2, r3]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	7850      	ldrb	r0, [r2, #1]
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	2200      	movs	r2, #0
 80052f8:	4798      	blx	r3
      break;
 80052fa:	e064      	b.n	80053c6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	785b      	ldrb	r3, [r3, #1]
 8005300:	2b0b      	cmp	r3, #11
 8005302:	d037      	beq.n	8005374 <USBD_CDC_Setup+0x12c>
 8005304:	dc47      	bgt.n	8005396 <USBD_CDC_Setup+0x14e>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <USBD_CDC_Setup+0xc8>
 800530a:	2b0a      	cmp	r3, #10
 800530c:	d019      	beq.n	8005342 <USBD_CDC_Setup+0xfa>
 800530e:	e042      	b.n	8005396 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	23a7      	movs	r3, #167	@ 0xa7
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	5cd3      	ldrb	r3, [r2, r3]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d107      	bne.n	800532c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800531c:	230c      	movs	r3, #12
 800531e:	18f9      	adds	r1, r7, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	0018      	movs	r0, r3
 8005326:	f001 fb78 	bl	8006a1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800532a:	e040      	b.n	80053ae <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0011      	movs	r1, r2
 8005332:	0018      	movs	r0, r3
 8005334:	f001 faf3 	bl	800691e <USBD_CtlError>
            ret = USBD_FAIL;
 8005338:	2317      	movs	r3, #23
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	2202      	movs	r2, #2
 800533e:	701a      	strb	r2, [r3, #0]
          break;
 8005340:	e035      	b.n	80053ae <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	23a7      	movs	r3, #167	@ 0xa7
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	5cd3      	ldrb	r3, [r2, r3]
 800534a:	2b03      	cmp	r3, #3
 800534c:	d107      	bne.n	800535e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800534e:	230f      	movs	r3, #15
 8005350:	18f9      	adds	r1, r7, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	0018      	movs	r0, r3
 8005358:	f001 fb5f 	bl	8006a1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800535c:	e027      	b.n	80053ae <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	0011      	movs	r1, r2
 8005364:	0018      	movs	r0, r3
 8005366:	f001 fada 	bl	800691e <USBD_CtlError>
            ret = USBD_FAIL;
 800536a:	2317      	movs	r3, #23
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	2202      	movs	r2, #2
 8005370:	701a      	strb	r2, [r3, #0]
          break;
 8005372:	e01c      	b.n	80053ae <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	23a7      	movs	r3, #167	@ 0xa7
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	5cd3      	ldrb	r3, [r2, r3]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d015      	beq.n	80053ac <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0011      	movs	r1, r2
 8005386:	0018      	movs	r0, r3
 8005388:	f001 fac9 	bl	800691e <USBD_CtlError>
            ret = USBD_FAIL;
 800538c:	2317      	movs	r3, #23
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	2202      	movs	r2, #2
 8005392:	701a      	strb	r2, [r3, #0]
          }
          break;
 8005394:	e00a      	b.n	80053ac <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0011      	movs	r1, r2
 800539c:	0018      	movs	r0, r3
 800539e:	f001 fabe 	bl	800691e <USBD_CtlError>
          ret = USBD_FAIL;
 80053a2:	2317      	movs	r3, #23
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	2202      	movs	r2, #2
 80053a8:	701a      	strb	r2, [r3, #0]
          break;
 80053aa:	e000      	b.n	80053ae <USBD_CDC_Setup+0x166>
          break;
 80053ac:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80053ae:	e00a      	b.n	80053c6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	0011      	movs	r1, r2
 80053b6:	0018      	movs	r0, r3
 80053b8:	f001 fab1 	bl	800691e <USBD_CtlError>
      ret = USBD_FAIL;
 80053bc:	2317      	movs	r3, #23
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	2202      	movs	r2, #2
 80053c2:	701a      	strb	r2, [r3, #0]
      break;
 80053c4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80053c6:	2317      	movs	r3, #23
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	781b      	ldrb	r3, [r3, #0]
}
 80053cc:	0018      	movs	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b006      	add	sp, #24
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	00000201 	.word	0x00000201

080053d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	000a      	movs	r2, r1
 80053e2:	1cfb      	adds	r3, r7, #3
 80053e4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	23ae      	movs	r3, #174	@ 0xae
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	58d3      	ldr	r3, [r2, r3]
 80053ee:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	23b0      	movs	r3, #176	@ 0xb0
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	58d3      	ldr	r3, [r2, r3]
 80053f8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	23ae      	movs	r3, #174	@ 0xae
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	58d3      	ldr	r3, [r2, r3]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d03e      	beq.n	8005484 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005406:	1cfb      	adds	r3, r7, #3
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	0013      	movs	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	189b      	adds	r3, r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	18cb      	adds	r3, r1, r3
 8005416:	331c      	adds	r3, #28
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d02b      	beq.n	8005476 <USBD_CDC_DataIn+0x9e>
 800541e:	1cfb      	adds	r3, r7, #3
 8005420:	781a      	ldrb	r2, [r3, #0]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	0013      	movs	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	189b      	adds	r3, r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	18cb      	adds	r3, r1, r3
 800542e:	331c      	adds	r3, #28
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	1cfb      	adds	r3, r7, #3
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	0013      	movs	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	189b      	adds	r3, r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	18cb      	adds	r3, r1, r3
 8005442:	3320      	adds	r3, #32
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	0019      	movs	r1, r3
 8005448:	f7fa fee4 	bl	8000214 <__aeabi_uidivmod>
 800544c:	1e0b      	subs	r3, r1, #0
 800544e:	d112      	bne.n	8005476 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005450:	1cfb      	adds	r3, r7, #3
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	0013      	movs	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	189b      	adds	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	18cb      	adds	r3, r1, r3
 8005460:	331c      	adds	r3, #28
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005466:	1cfb      	adds	r3, r7, #3
 8005468:	7819      	ldrb	r1, [r3, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	2300      	movs	r3, #0
 800546e:	2200      	movs	r2, #0
 8005470:	f001 ffce 	bl	8007410 <USBD_LL_Transmit>
 8005474:	e004      	b.n	8005480 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	2385      	movs	r3, #133	@ 0x85
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	2100      	movs	r1, #0
 800547e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	e000      	b.n	8005486 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8005484:	2302      	movs	r3, #2
  }
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	b004      	add	sp, #16
 800548c:	bd80      	pop	{r7, pc}

0800548e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	000a      	movs	r2, r1
 8005498:	1cfb      	adds	r3, r7, #3
 800549a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	23ae      	movs	r3, #174	@ 0xae
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	58d3      	ldr	r3, [r2, r3]
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054a6:	1cfb      	adds	r3, r7, #3
 80054a8:	781a      	ldrb	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	0011      	movs	r1, r2
 80054ae:	0018      	movs	r0, r3
 80054b0:	f002 f81c 	bl	80074ec <USBD_LL_GetRxDataSize>
 80054b4:	0001      	movs	r1, r0
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	2383      	movs	r3, #131	@ 0x83
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	23ae      	movs	r3, #174	@ 0xae
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	58d3      	ldr	r3, [r2, r3]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d011      	beq.n	80054ee <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	23af      	movs	r3, #175	@ 0xaf
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	58d3      	ldr	r3, [r2, r3]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	68f9      	ldr	r1, [r7, #12]
 80054d6:	2381      	movs	r3, #129	@ 0x81
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	58c8      	ldr	r0, [r1, r3]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2183      	movs	r1, #131	@ 0x83
 80054e0:	0089      	lsls	r1, r1, #2
 80054e2:	468c      	mov	ip, r1
 80054e4:	4463      	add	r3, ip
 80054e6:	0019      	movs	r1, r3
 80054e8:	4790      	blx	r2

    return USBD_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80054ee:	2302      	movs	r3, #2
  }
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b004      	add	sp, #16
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	23ae      	movs	r3, #174	@ 0xae
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	58d3      	ldr	r3, [r2, r3]
 8005508:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	23af      	movs	r3, #175	@ 0xaf
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	58d3      	ldr	r3, [r2, r3]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d018      	beq.n	8005548 <USBD_CDC_EP0_RxReady+0x50>
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	2380      	movs	r3, #128	@ 0x80
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	5cd3      	ldrb	r3, [r2, r3]
 800551e:	2bff      	cmp	r3, #255	@ 0xff
 8005520:	d012      	beq.n	8005548 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	23af      	movs	r3, #175	@ 0xaf
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	58d3      	ldr	r3, [r2, r3]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	68f9      	ldr	r1, [r7, #12]
 800552e:	2280      	movs	r2, #128	@ 0x80
 8005530:	0092      	lsls	r2, r2, #2
 8005532:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8005534:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4c06      	ldr	r4, [pc, #24]	@ (8005554 <USBD_CDC_EP0_RxReady+0x5c>)
 800553a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800553c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	21ff      	movs	r1, #255	@ 0xff
 8005546:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	0018      	movs	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	b005      	add	sp, #20
 8005550:	bd90      	pop	{r4, r7, pc}
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	00000201 	.word	0x00000201

08005558 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2243      	movs	r2, #67	@ 0x43
 8005564:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005566:	4b02      	ldr	r3, [pc, #8]	@ (8005570 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8005568:	0018      	movs	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	b002      	add	sp, #8
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000094 	.word	0x20000094

08005574 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2243      	movs	r2, #67	@ 0x43
 8005580:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005582:	4b02      	ldr	r3, [pc, #8]	@ (800558c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8005584:	0018      	movs	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	b002      	add	sp, #8
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000050 	.word	0x20000050

08005590 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2243      	movs	r2, #67	@ 0x43
 800559c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800559e:	4b02      	ldr	r3, [pc, #8]	@ (80055a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	200000d8 	.word	0x200000d8

080055ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	220a      	movs	r2, #10
 80055b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80055ba:	4b02      	ldr	r3, [pc, #8]	@ (80055c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	2000000c 	.word	0x2000000c

080055c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80055d2:	200f      	movs	r0, #15
 80055d4:	183b      	adds	r3, r7, r0
 80055d6:	2202      	movs	r2, #2
 80055d8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	23af      	movs	r3, #175	@ 0xaf
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80055ea:	183b      	adds	r3, r7, r0
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80055f0:	230f      	movs	r3, #15
 80055f2:	18fb      	adds	r3, r7, r3
 80055f4:	781b      	ldrb	r3, [r3, #0]
}
 80055f6:	0018      	movs	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	b004      	add	sp, #16
 80055fc:	bd80      	pop	{r7, pc}

080055fe <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	1dbb      	adds	r3, r7, #6
 800560a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	23ae      	movs	r3, #174	@ 0xae
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	58d3      	ldr	r3, [r2, r3]
 8005614:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	2382      	movs	r3, #130	@ 0x82
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8005620:	1dbb      	adds	r3, r7, #6
 8005622:	8819      	ldrh	r1, [r3, #0]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	2384      	movs	r3, #132	@ 0x84
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b006      	add	sp, #24
 8005634:	bd80      	pop	{r7, pc}

08005636 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	23ae      	movs	r3, #174	@ 0xae
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	58d3      	ldr	r3, [r2, r3]
 8005648:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	2381      	movs	r3, #129	@ 0x81
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b004      	add	sp, #16
 800565c:	bd80      	pop	{r7, pc}

0800565e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	23ae      	movs	r3, #174	@ 0xae
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	58d3      	ldr	r3, [r2, r3]
 800566e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	23ae      	movs	r3, #174	@ 0xae
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	58d3      	ldr	r3, [r2, r3]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d022      	beq.n	80056c2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	2385      	movs	r3, #133	@ 0x85
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	58d3      	ldr	r3, [r2, r3]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11a      	bne.n	80056be <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	2385      	movs	r3, #133	@ 0x85
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	2101      	movs	r1, #1
 8005690:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	2384      	movs	r3, #132	@ 0x84
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	58d2      	ldr	r2, [r2, r3]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	2382      	movs	r3, #130	@ 0x82
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	2384      	movs	r3, #132	@ 0x84
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	000a      	movs	r2, r1
 80056b4:	2181      	movs	r1, #129	@ 0x81
 80056b6:	f001 feab 	bl	8007410 <USBD_LL_Transmit>

      return USBD_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e002      	b.n	80056c4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80056c2:	2302      	movs	r3, #2
  }
}
 80056c4:	0018      	movs	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b004      	add	sp, #16
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	23ae      	movs	r3, #174	@ 0xae
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	58d3      	ldr	r3, [r2, r3]
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	23ae      	movs	r3, #174	@ 0xae
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	58d3      	ldr	r3, [r2, r3]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d019      	beq.n	800571e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	7c1b      	ldrb	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	2381      	movs	r3, #129	@ 0x81
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	58d2      	ldr	r2, [r2, r3]
 80056fa:	2380      	movs	r3, #128	@ 0x80
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	2101      	movs	r1, #1
 8005702:	f001 febc 	bl	800747e <USBD_LL_PrepareReceive>
 8005706:	e008      	b.n	800571a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	2381      	movs	r3, #129	@ 0x81
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	58d2      	ldr	r2, [r2, r3]
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	2340      	movs	r3, #64	@ 0x40
 8005714:	2101      	movs	r1, #1
 8005716:	f001 feb2 	bl	800747e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e000      	b.n	8005720 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800571e:	2302      	movs	r3, #2
  }
}
 8005720:	0018      	movs	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	b004      	add	sp, #16
 8005726:	bd80      	pop	{r7, pc}

08005728 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	1dfb      	adds	r3, r7, #7
 8005734:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800573c:	2302      	movs	r3, #2
 800573e:	e020      	b.n	8005782 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	23ad      	movs	r3, #173	@ 0xad
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	58d3      	ldr	r3, [r2, r3]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	23ad      	movs	r3, #173	@ 0xad
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	2100      	movs	r1, #0
 8005754:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	23ac      	movs	r3, #172	@ 0xac
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	23a7      	movs	r3, #167	@ 0xa7
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	2101      	movs	r1, #1
 800576e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1dfa      	adds	r2, r7, #7
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	0018      	movs	r0, r3
 800577c:	f001 fcac 	bl	80070d8 <USBD_LL_Init>

  return USBD_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	0018      	movs	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	b004      	add	sp, #16
 8005788:	bd80      	pop	{r7, pc}

0800578a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005794:	200f      	movs	r0, #15
 8005796:	183b      	adds	r3, r7, r0
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	23ad      	movs	r3, #173	@ 0xad
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80057ac:	183b      	adds	r3, r7, r0
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	e003      	b.n	80057bc <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057b4:	230f      	movs	r3, #15
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	2202      	movs	r2, #2
 80057ba:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80057bc:	230f      	movs	r3, #15
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	781b      	ldrb	r3, [r3, #0]
}
 80057c2:	0018      	movs	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b004      	add	sp, #16
 80057c8:	bd80      	pop	{r7, pc}

080057ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	0018      	movs	r0, r3
 80057d6:	f001 fce3 	bl	80071a0 <USBD_LL_Start>

  return USBD_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	0018      	movs	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	b002      	add	sp, #8
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	0018      	movs	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b002      	add	sp, #8
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80057f6:	b590      	push	{r4, r7, lr}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	000a      	movs	r2, r1
 8005800:	1cfb      	adds	r3, r7, #3
 8005802:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005804:	240f      	movs	r4, #15
 8005806:	193b      	adds	r3, r7, r4
 8005808:	2202      	movs	r2, #2
 800580a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	23ad      	movs	r3, #173	@ 0xad
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	58d3      	ldr	r3, [r2, r3]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00e      	beq.n	8005836 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	23ad      	movs	r3, #173	@ 0xad
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	58d3      	ldr	r3, [r2, r3]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	1cfa      	adds	r2, r7, #3
 8005824:	7811      	ldrb	r1, [r2, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	0010      	movs	r0, r2
 800582a:	4798      	blx	r3
 800582c:	1e03      	subs	r3, r0, #0
 800582e:	d102      	bne.n	8005836 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005830:	193b      	adds	r3, r7, r4
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005836:	230f      	movs	r3, #15
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	781b      	ldrb	r3, [r3, #0]
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	b005      	add	sp, #20
 8005842:	bd90      	pop	{r4, r7, pc}

08005844 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	000a      	movs	r2, r1
 800584e:	1cfb      	adds	r3, r7, #3
 8005850:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	23ad      	movs	r3, #173	@ 0xad
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	58d3      	ldr	r3, [r2, r3]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	1cfa      	adds	r2, r7, #3
 800585e:	7811      	ldrb	r1, [r2, #0]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	0010      	movs	r0, r2
 8005864:	4798      	blx	r3

  return USBD_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	0018      	movs	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	b002      	add	sp, #8
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	22aa      	movs	r2, #170	@ 0xaa
 800587e:	0092      	lsls	r2, r2, #2
 8005880:	4694      	mov	ip, r2
 8005882:	4463      	add	r3, ip
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	0011      	movs	r1, r2
 8005888:	0018      	movs	r0, r3
 800588a:	f001 f810 	bl	80068ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	23a5      	movs	r3, #165	@ 0xa5
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	2101      	movs	r1, #1
 8005896:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a23      	ldr	r2, [pc, #140]	@ (8005928 <USBD_LL_SetupStage+0xb8>)
 800589c:	5a9b      	ldrh	r3, [r3, r2]
 800589e:	0019      	movs	r1, r3
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	23a6      	movs	r3, #166	@ 0xa6
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	23aa      	movs	r3, #170	@ 0xaa
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	5cd3      	ldrb	r3, [r2, r3]
 80058b0:	001a      	movs	r2, r3
 80058b2:	231f      	movs	r3, #31
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d019      	beq.n	80058ee <USBD_LL_SetupStage+0x7e>
 80058ba:	d822      	bhi.n	8005902 <USBD_LL_SetupStage+0x92>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <USBD_LL_SetupStage+0x56>
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d00a      	beq.n	80058da <USBD_LL_SetupStage+0x6a>
 80058c4:	e01d      	b.n	8005902 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	22aa      	movs	r2, #170	@ 0xaa
 80058ca:	0092      	lsls	r2, r2, #2
 80058cc:	189a      	adds	r2, r3, r2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	0011      	movs	r1, r2
 80058d2:	0018      	movs	r0, r3
 80058d4:	f000 fa10 	bl	8005cf8 <USBD_StdDevReq>
      break;
 80058d8:	e020      	b.n	800591c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	22aa      	movs	r2, #170	@ 0xaa
 80058de:	0092      	lsls	r2, r2, #2
 80058e0:	189a      	adds	r2, r3, r2
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	0011      	movs	r1, r2
 80058e6:	0018      	movs	r0, r3
 80058e8:	f000 fa78 	bl	8005ddc <USBD_StdItfReq>
      break;
 80058ec:	e016      	b.n	800591c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	22aa      	movs	r2, #170	@ 0xaa
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	189a      	adds	r2, r3, r2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0011      	movs	r1, r2
 80058fa:	0018      	movs	r0, r3
 80058fc:	f000 fac5 	bl	8005e8a <USBD_StdEPReq>
      break;
 8005900:	e00c      	b.n	800591c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	23aa      	movs	r3, #170	@ 0xaa
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	5cd3      	ldrb	r3, [r2, r3]
 800590a:	227f      	movs	r2, #127	@ 0x7f
 800590c:	4393      	bics	r3, r2
 800590e:	b2da      	uxtb	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	0011      	movs	r1, r2
 8005914:	0018      	movs	r0, r3
 8005916:	f001 fcca 	bl	80072ae <USBD_LL_StallEP>
      break;
 800591a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	0018      	movs	r0, r3
 8005920:	46bd      	mov	sp, r7
 8005922:	b002      	add	sp, #8
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	000002ae 	.word	0x000002ae

0800592c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	200b      	movs	r0, #11
 8005938:	183b      	adds	r3, r7, r0
 800593a:	1c0a      	adds	r2, r1, #0
 800593c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800593e:	183b      	adds	r3, r7, r0
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d154      	bne.n	80059f0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3355      	adds	r3, #85	@ 0x55
 800594a:	33ff      	adds	r3, #255	@ 0xff
 800594c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	23a5      	movs	r3, #165	@ 0xa5
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	58d3      	ldr	r3, [r2, r3]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d139      	bne.n	80059ce <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	429a      	cmp	r2, r3
 8005964:	d919      	bls.n	800599a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800597c:	429a      	cmp	r2, r3
 800597e:	d203      	bcs.n	8005988 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005984:	b29b      	uxth	r3, r3
 8005986:	e002      	b.n	800598e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800598c:	b29b      	uxth	r3, r3
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	001a      	movs	r2, r3
 8005994:	f001 f898 	bl	8006ac8 <USBD_CtlContinueRx>
 8005998:	e045      	b.n	8005a26 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	23ad      	movs	r3, #173	@ 0xad
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	58d3      	ldr	r3, [r2, r3]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00d      	beq.n	80059c4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	23a7      	movs	r3, #167	@ 0xa7
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d107      	bne.n	80059c4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	23ad      	movs	r3, #173	@ 0xad
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	58d3      	ldr	r3, [r2, r3]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	0010      	movs	r0, r2
 80059c2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	0018      	movs	r0, r3
 80059c8:	f001 f891 	bl	8006aee <USBD_CtlSendStatus>
 80059cc:	e02b      	b.n	8005a26 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	23a5      	movs	r3, #165	@ 0xa5
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	58d3      	ldr	r3, [r2, r3]
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	d125      	bne.n	8005a26 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	23a5      	movs	r3, #165	@ 0xa5
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	2100      	movs	r1, #0
 80059e2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2100      	movs	r1, #0
 80059e8:	0018      	movs	r0, r3
 80059ea:	f001 fc60 	bl	80072ae <USBD_LL_StallEP>
 80059ee:	e01a      	b.n	8005a26 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	23ad      	movs	r3, #173	@ 0xad
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	58d3      	ldr	r3, [r2, r3]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d011      	beq.n	8005a22 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	23a7      	movs	r3, #167	@ 0xa7
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d10b      	bne.n	8005a22 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	23ad      	movs	r3, #173	@ 0xad
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	58d3      	ldr	r3, [r2, r3]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	220b      	movs	r2, #11
 8005a16:	18ba      	adds	r2, r7, r2
 8005a18:	7811      	ldrb	r1, [r2, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	0010      	movs	r0, r2
 8005a1e:	4798      	blx	r3
 8005a20:	e001      	b.n	8005a26 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a22:	2302      	movs	r3, #2
 8005a24:	e000      	b.n	8005a28 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	0018      	movs	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b006      	add	sp, #24
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	200b      	movs	r0, #11
 8005a3c:	183b      	adds	r3, r7, r0
 8005a3e:	1c0a      	adds	r2, r1, #0
 8005a40:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a42:	183b      	adds	r3, r7, r0
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d000      	beq.n	8005a4c <USBD_LL_DataInStage+0x1c>
 8005a4a:	e08e      	b.n	8005b6a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3314      	adds	r3, #20
 8005a50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	23a5      	movs	r3, #165	@ 0xa5
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	58d3      	ldr	r3, [r2, r3]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d164      	bne.n	8005b28 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d915      	bls.n	8005a96 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	1ad2      	subs	r2, r2, r3
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f000 ffe9 	bl	8006a5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2100      	movs	r1, #0
 8005a90:	f001 fcf5 	bl	800747e <USBD_LL_PrepareReceive>
 8005a94:	e059      	b.n	8005b4a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	0010      	movs	r0, r2
 8005aa2:	f7fa fbb7 	bl	8000214 <__aeabi_uidivmod>
 8005aa6:	1e0b      	subs	r3, r1, #0
 8005aa8:	d11f      	bne.n	8005aea <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d319      	bcc.n	8005aea <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	68f9      	ldr	r1, [r7, #12]
 8005abc:	23a6      	movs	r3, #166	@ 0xa6
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d211      	bcs.n	8005aea <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2100      	movs	r1, #0
 8005acc:	0018      	movs	r0, r3
 8005ace:	f000 ffc4 	bl	8006a5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	23a6      	movs	r3, #166	@ 0xa6
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	2100      	movs	r1, #0
 8005ada:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	f001 fccb 	bl	800747e <USBD_LL_PrepareReceive>
 8005ae8:	e02f      	b.n	8005b4a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	23ad      	movs	r3, #173	@ 0xad
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	58d3      	ldr	r3, [r2, r3]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00d      	beq.n	8005b14 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	23a7      	movs	r3, #167	@ 0xa7
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d107      	bne.n	8005b14 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	23ad      	movs	r3, #173	@ 0xad
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	58d3      	ldr	r3, [r2, r3]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	0010      	movs	r0, r2
 8005b12:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2180      	movs	r1, #128	@ 0x80
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f001 fbc8 	bl	80072ae <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f000 fff8 	bl	8006b16 <USBD_CtlReceiveStatus>
 8005b26:	e010      	b.n	8005b4a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	23a5      	movs	r3, #165	@ 0xa5
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	58d3      	ldr	r3, [r2, r3]
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d005      	beq.n	8005b40 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	23a5      	movs	r3, #165	@ 0xa5
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d104      	bne.n	8005b4a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2180      	movs	r1, #128	@ 0x80
 8005b44:	0018      	movs	r0, r3
 8005b46:	f001 fbb2 	bl	80072ae <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	23a8      	movs	r3, #168	@ 0xa8
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	5cd3      	ldrb	r3, [r2, r3]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d124      	bne.n	8005ba0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f7ff fe43 	bl	80057e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	23a8      	movs	r3, #168	@ 0xa8
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	2100      	movs	r1, #0
 8005b66:	54d1      	strb	r1, [r2, r3]
 8005b68:	e01a      	b.n	8005ba0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	23ad      	movs	r3, #173	@ 0xad
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	58d3      	ldr	r3, [r2, r3]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d011      	beq.n	8005b9c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	23a7      	movs	r3, #167	@ 0xa7
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d10b      	bne.n	8005b9c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	23ad      	movs	r3, #173	@ 0xad
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	58d3      	ldr	r3, [r2, r3]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	220b      	movs	r2, #11
 8005b90:	18ba      	adds	r2, r7, r2
 8005b92:	7811      	ldrb	r1, [r2, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	0010      	movs	r0, r2
 8005b98:	4798      	blx	r3
 8005b9a:	e001      	b.n	8005ba0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e000      	b.n	8005ba2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	b006      	add	sp, #24
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	2340      	movs	r3, #64	@ 0x40
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2100      	movs	r1, #0
 8005bba:	f001 fb16 	bl	80071ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	23ac      	movs	r3, #172	@ 0xac
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	23b2      	movs	r3, #178	@ 0xb2
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	2140      	movs	r1, #64	@ 0x40
 8005bd0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	2340      	movs	r3, #64	@ 0x40
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2180      	movs	r1, #128	@ 0x80
 8005bda:	f001 fb06 	bl	80071ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2240      	movs	r2, #64	@ 0x40
 8005be8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	23a7      	movs	r3, #167	@ 0xa7
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	23a5      	movs	r3, #165	@ 0xa5
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	23a9      	movs	r3, #169	@ 0xa9
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	23ae      	movs	r3, #174	@ 0xae
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	58d3      	ldr	r3, [r2, r3]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	23ad      	movs	r3, #173	@ 0xad
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	58d3      	ldr	r3, [r2, r3]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	b2d9      	uxtb	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	4790      	blx	r2
  }

  return USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b002      	add	sp, #8
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	000a      	movs	r2, r1
 8005c44:	1cfb      	adds	r3, r7, #3
 8005c46:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	1cfa      	adds	r2, r7, #3
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b002      	add	sp, #8
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	23a7      	movs	r3, #167	@ 0xa7
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	5cd1      	ldrb	r1, [r2, r3]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a06      	ldr	r2, [pc, #24]	@ (8005c88 <USBD_LL_Suspend+0x2c>)
 8005c70:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	23a7      	movs	r3, #167	@ 0xa7
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	2104      	movs	r1, #4
 8005c7a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b002      	add	sp, #8
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	0000029d 	.word	0x0000029d

08005c8c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	23a7      	movs	r3, #167	@ 0xa7
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	5cd3      	ldrb	r3, [r2, r3]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d106      	bne.n	8005cae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a05      	ldr	r2, [pc, #20]	@ (8005cb8 <USBD_LL_Resume+0x2c>)
 8005ca4:	5c99      	ldrb	r1, [r3, r2]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	23a7      	movs	r3, #167	@ 0xa7
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	0000029d 	.word	0x0000029d

08005cbc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	23a7      	movs	r3, #167	@ 0xa7
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	5cd3      	ldrb	r3, [r2, r3]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d10e      	bne.n	8005cee <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	23ad      	movs	r3, #173	@ 0xad
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	58d3      	ldr	r3, [r2, r3]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	23ad      	movs	r3, #173	@ 0xad
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	58d3      	ldr	r3, [r2, r3]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	0010      	movs	r0, r2
 8005cec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b002      	add	sp, #8
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d02:	230f      	movs	r3, #15
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	001a      	movs	r2, r3
 8005d10:	2360      	movs	r3, #96	@ 0x60
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b40      	cmp	r3, #64	@ 0x40
 8005d16:	d004      	beq.n	8005d22 <USBD_StdDevReq+0x2a>
 8005d18:	d84f      	bhi.n	8005dba <USBD_StdDevReq+0xc2>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <USBD_StdDevReq+0x3e>
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d14b      	bne.n	8005dba <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	23ad      	movs	r3, #173	@ 0xad
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	58d3      	ldr	r3, [r2, r3]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	0010      	movs	r0, r2
 8005d32:	4798      	blx	r3
      break;
 8005d34:	e048      	b.n	8005dc8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d835      	bhi.n	8005daa <USBD_StdDevReq+0xb2>
 8005d3e:	009a      	lsls	r2, r3, #2
 8005d40:	4b25      	ldr	r3, [pc, #148]	@ (8005dd8 <USBD_StdDevReq+0xe0>)
 8005d42:	18d3      	adds	r3, r2, r3
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	0011      	movs	r1, r2
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f000 fa52 	bl	80061f8 <USBD_GetDescriptor>
          break;
 8005d54:	e030      	b.n	8005db8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f000 fbfd 	bl	800655c <USBD_SetAddress>
          break;
 8005d62:	e029      	b.n	8005db8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0011      	movs	r1, r2
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 fc4a 	bl	8006604 <USBD_SetConfig>
          break;
 8005d70:	e022      	b.n	8005db8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0011      	movs	r1, r2
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 fce7 	bl	800674c <USBD_GetConfig>
          break;
 8005d7e:	e01b      	b.n	8005db8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0011      	movs	r1, r2
 8005d86:	0018      	movs	r0, r3
 8005d88:	f000 fd1b 	bl	80067c2 <USBD_GetStatus>
          break;
 8005d8c:	e014      	b.n	8005db8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	0011      	movs	r1, r2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 fd4e 	bl	8006836 <USBD_SetFeature>
          break;
 8005d9a:	e00d      	b.n	8005db8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	0011      	movs	r1, r2
 8005da2:	0018      	movs	r0, r3
 8005da4:	f000 fd5d 	bl	8006862 <USBD_ClrFeature>
          break;
 8005da8:	e006      	b.n	8005db8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	0011      	movs	r1, r2
 8005db0:	0018      	movs	r0, r3
 8005db2:	f000 fdb4 	bl	800691e <USBD_CtlError>
          break;
 8005db6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005db8:	e006      	b.n	8005dc8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	0011      	movs	r1, r2
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f000 fdac 	bl	800691e <USBD_CtlError>
      break;
 8005dc6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005dc8:	230f      	movs	r3, #15
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	781b      	ldrb	r3, [r3, #0]
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b004      	add	sp, #16
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			@ (mov r8, r8)
 8005dd8:	080076b4 	.word	0x080076b4

08005ddc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005ddc:	b5b0      	push	{r4, r5, r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005de6:	230f      	movs	r3, #15
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	001a      	movs	r2, r3
 8005df4:	2360      	movs	r3, #96	@ 0x60
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b40      	cmp	r3, #64	@ 0x40
 8005dfa:	d004      	beq.n	8005e06 <USBD_StdItfReq+0x2a>
 8005dfc:	d839      	bhi.n	8005e72 <USBD_StdItfReq+0x96>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <USBD_StdItfReq+0x2a>
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d135      	bne.n	8005e72 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	23a7      	movs	r3, #167	@ 0xa7
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	5cd3      	ldrb	r3, [r2, r3]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d825      	bhi.n	8005e60 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	889b      	ldrh	r3, [r3, #4]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d819      	bhi.n	8005e52 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	23ad      	movs	r3, #173	@ 0xad
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	58d3      	ldr	r3, [r2, r3]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	250f      	movs	r5, #15
 8005e2a:	197c      	adds	r4, r7, r5
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	0010      	movs	r0, r2
 8005e32:	4798      	blx	r3
 8005e34:	0003      	movs	r3, r0
 8005e36:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	88db      	ldrh	r3, [r3, #6]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d116      	bne.n	8005e6e <USBD_StdItfReq+0x92>
 8005e40:	197b      	adds	r3, r7, r5
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d112      	bne.n	8005e6e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f000 fe4f 	bl	8006aee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e50:	e00d      	b.n	8005e6e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	0011      	movs	r1, r2
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 fd60 	bl	800691e <USBD_CtlError>
          break;
 8005e5e:	e006      	b.n	8005e6e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	0011      	movs	r1, r2
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 fd59 	bl	800691e <USBD_CtlError>
          break;
 8005e6c:	e000      	b.n	8005e70 <USBD_StdItfReq+0x94>
          break;
 8005e6e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005e70:	e006      	b.n	8005e80 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f000 fd50 	bl	800691e <USBD_CtlError>
      break;
 8005e7e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b004      	add	sp, #16
 8005e88:	bdb0      	pop	{r4, r5, r7, pc}

08005e8a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005e8a:	b5b0      	push	{r4, r5, r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e94:	230f      	movs	r3, #15
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	889a      	ldrh	r2, [r3, #4]
 8005ea0:	230e      	movs	r3, #14
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	001a      	movs	r2, r3
 8005eac:	2360      	movs	r3, #96	@ 0x60
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b40      	cmp	r3, #64	@ 0x40
 8005eb2:	d006      	beq.n	8005ec2 <USBD_StdEPReq+0x38>
 8005eb4:	d900      	bls.n	8005eb8 <USBD_StdEPReq+0x2e>
 8005eb6:	e190      	b.n	80061da <USBD_StdEPReq+0x350>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00c      	beq.n	8005ed6 <USBD_StdEPReq+0x4c>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d000      	beq.n	8005ec2 <USBD_StdEPReq+0x38>
 8005ec0:	e18b      	b.n	80061da <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	23ad      	movs	r3, #173	@ 0xad
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	58d3      	ldr	r3, [r2, r3]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	0010      	movs	r0, r2
 8005ed2:	4798      	blx	r3
      break;
 8005ed4:	e188      	b.n	80061e8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	001a      	movs	r2, r3
 8005edc:	2360      	movs	r3, #96	@ 0x60
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d10f      	bne.n	8005f04 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	23ad      	movs	r3, #173	@ 0xad
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	58d3      	ldr	r3, [r2, r3]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	250f      	movs	r5, #15
 8005ef0:	197c      	adds	r4, r7, r5
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	0010      	movs	r0, r2
 8005ef8:	4798      	blx	r3
 8005efa:	0003      	movs	r3, r0
 8005efc:	7023      	strb	r3, [r4, #0]

        return ret;
 8005efe:	197b      	adds	r3, r7, r5
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	e174      	b.n	80061ee <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d007      	beq.n	8005f1c <USBD_StdEPReq+0x92>
 8005f0c:	dd00      	ble.n	8005f10 <USBD_StdEPReq+0x86>
 8005f0e:	e15c      	b.n	80061ca <USBD_StdEPReq+0x340>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d100      	bne.n	8005f16 <USBD_StdEPReq+0x8c>
 8005f14:	e092      	b.n	800603c <USBD_StdEPReq+0x1b2>
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d04b      	beq.n	8005fb2 <USBD_StdEPReq+0x128>
 8005f1a:	e156      	b.n	80061ca <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	23a7      	movs	r3, #167	@ 0xa7
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	5cd3      	ldrb	r3, [r2, r3]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d002      	beq.n	8005f2e <USBD_StdEPReq+0xa4>
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d01d      	beq.n	8005f68 <USBD_StdEPReq+0xde>
 8005f2c:	e039      	b.n	8005fa2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f2e:	220e      	movs	r2, #14
 8005f30:	18bb      	adds	r3, r7, r2
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d010      	beq.n	8005f5a <USBD_StdEPReq+0xd0>
 8005f38:	18bb      	adds	r3, r7, r2
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b80      	cmp	r3, #128	@ 0x80
 8005f3e:	d00c      	beq.n	8005f5a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f40:	18bb      	adds	r3, r7, r2
 8005f42:	781a      	ldrb	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	0011      	movs	r1, r2
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f001 f9b0 	bl	80072ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2180      	movs	r1, #128	@ 0x80
 8005f52:	0018      	movs	r0, r3
 8005f54:	f001 f9ab 	bl	80072ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f58:	e02a      	b.n	8005fb0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	0011      	movs	r1, r2
 8005f60:	0018      	movs	r0, r3
 8005f62:	f000 fcdc 	bl	800691e <USBD_CtlError>
              break;
 8005f66:	e023      	b.n	8005fb0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	885b      	ldrh	r3, [r3, #2]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d113      	bne.n	8005f98 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8005f70:	220e      	movs	r2, #14
 8005f72:	18bb      	adds	r3, r7, r2
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00e      	beq.n	8005f98 <USBD_StdEPReq+0x10e>
 8005f7a:	18bb      	adds	r3, r7, r2
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b80      	cmp	r3, #128	@ 0x80
 8005f80:	d00a      	beq.n	8005f98 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	88db      	ldrh	r3, [r3, #6]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005f8a:	18bb      	adds	r3, r7, r2
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	0011      	movs	r1, r2
 8005f92:	0018      	movs	r0, r3
 8005f94:	f001 f98b 	bl	80072ae <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f000 fda7 	bl	8006aee <USBD_CtlSendStatus>

              break;
 8005fa0:	e006      	b.n	8005fb0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	0011      	movs	r1, r2
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f000 fcb8 	bl	800691e <USBD_CtlError>
              break;
 8005fae:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8005fb0:	e112      	b.n	80061d8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	23a7      	movs	r3, #167	@ 0xa7
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	5cd3      	ldrb	r3, [r2, r3]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d002      	beq.n	8005fc4 <USBD_StdEPReq+0x13a>
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d01d      	beq.n	8005ffe <USBD_StdEPReq+0x174>
 8005fc2:	e032      	b.n	800602a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fc4:	220e      	movs	r2, #14
 8005fc6:	18bb      	adds	r3, r7, r2
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d010      	beq.n	8005ff0 <USBD_StdEPReq+0x166>
 8005fce:	18bb      	adds	r3, r7, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b80      	cmp	r3, #128	@ 0x80
 8005fd4:	d00c      	beq.n	8005ff0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005fd6:	18bb      	adds	r3, r7, r2
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	0011      	movs	r1, r2
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f001 f965 	bl	80072ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2180      	movs	r1, #128	@ 0x80
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f001 f960 	bl	80072ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fee:	e024      	b.n	800603a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	0011      	movs	r1, r2
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f000 fc91 	bl	800691e <USBD_CtlError>
              break;
 8005ffc:	e01d      	b.n	800603a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	885b      	ldrh	r3, [r3, #2]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d118      	bne.n	8006038 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006006:	210e      	movs	r1, #14
 8006008:	187b      	adds	r3, r7, r1
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	227f      	movs	r2, #127	@ 0x7f
 800600e:	4013      	ands	r3, r2
 8006010:	d006      	beq.n	8006020 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006012:	187b      	adds	r3, r7, r1
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	0011      	movs	r1, r2
 800601a:	0018      	movs	r0, r3
 800601c:	f001 f972 	bl	8007304 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	0018      	movs	r0, r3
 8006024:	f000 fd63 	bl	8006aee <USBD_CtlSendStatus>
              }
              break;
 8006028:	e006      	b.n	8006038 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	0011      	movs	r1, r2
 8006030:	0018      	movs	r0, r3
 8006032:	f000 fc74 	bl	800691e <USBD_CtlError>
              break;
 8006036:	e000      	b.n	800603a <USBD_StdEPReq+0x1b0>
              break;
 8006038:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800603a:	e0cd      	b.n	80061d8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	23a7      	movs	r3, #167	@ 0xa7
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	5cd3      	ldrb	r3, [r2, r3]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d002      	beq.n	800604e <USBD_StdEPReq+0x1c4>
 8006048:	2b03      	cmp	r3, #3
 800604a:	d03c      	beq.n	80060c6 <USBD_StdEPReq+0x23c>
 800604c:	e0b5      	b.n	80061ba <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800604e:	220e      	movs	r2, #14
 8006050:	18bb      	adds	r3, r7, r2
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <USBD_StdEPReq+0x1e4>
 8006058:	18bb      	adds	r3, r7, r2
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b80      	cmp	r3, #128	@ 0x80
 800605e:	d006      	beq.n	800606e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	0011      	movs	r1, r2
 8006066:	0018      	movs	r0, r3
 8006068:	f000 fc59 	bl	800691e <USBD_CtlError>
                break;
 800606c:	e0ac      	b.n	80061c8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800606e:	220e      	movs	r2, #14
 8006070:	18bb      	adds	r3, r7, r2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b25b      	sxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	da0c      	bge.n	8006094 <USBD_StdEPReq+0x20a>
 800607a:	18bb      	adds	r3, r7, r2
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	227f      	movs	r2, #127	@ 0x7f
 8006080:	401a      	ands	r2, r3
 8006082:	0013      	movs	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	189b      	adds	r3, r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	3310      	adds	r3, #16
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	18d3      	adds	r3, r2, r3
 8006090:	3304      	adds	r3, #4
 8006092:	e00d      	b.n	80060b0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006094:	230e      	movs	r3, #14
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	227f      	movs	r2, #127	@ 0x7f
 800609c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800609e:	0013      	movs	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	189b      	adds	r3, r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	3351      	adds	r3, #81	@ 0x51
 80060a8:	33ff      	adds	r3, #255	@ 0xff
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	18d3      	adds	r3, r2, r3
 80060ae:	3304      	adds	r3, #4
 80060b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	0018      	movs	r0, r3
 80060c0:	f000 fcab 	bl	8006a1a <USBD_CtlSendData>
              break;
 80060c4:	e080      	b.n	80061c8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80060c6:	220e      	movs	r2, #14
 80060c8:	18bb      	adds	r3, r7, r2
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	b25b      	sxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	da14      	bge.n	80060fc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060d2:	18bb      	adds	r3, r7, r2
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	220f      	movs	r2, #15
 80060d8:	401a      	ands	r2, r3
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	0013      	movs	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	189b      	adds	r3, r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	18cb      	adds	r3, r1, r3
 80060e6:	3318      	adds	r3, #24
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11e      	bne.n	800612c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	0011      	movs	r1, r2
 80060f4:	0018      	movs	r0, r3
 80060f6:	f000 fc12 	bl	800691e <USBD_CtlError>
                  break;
 80060fa:	e065      	b.n	80061c8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060fc:	230e      	movs	r3, #14
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	220f      	movs	r2, #15
 8006104:	401a      	ands	r2, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	23ac      	movs	r3, #172	@ 0xac
 800610a:	0059      	lsls	r1, r3, #1
 800610c:	0013      	movs	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	189b      	adds	r3, r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	18c3      	adds	r3, r0, r3
 8006116:	185b      	adds	r3, r3, r1
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	0011      	movs	r1, r2
 8006124:	0018      	movs	r0, r3
 8006126:	f000 fbfa 	bl	800691e <USBD_CtlError>
                  break;
 800612a:	e04d      	b.n	80061c8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800612c:	220e      	movs	r2, #14
 800612e:	18bb      	adds	r3, r7, r2
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	b25b      	sxtb	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	da0c      	bge.n	8006152 <USBD_StdEPReq+0x2c8>
 8006138:	18bb      	adds	r3, r7, r2
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	227f      	movs	r2, #127	@ 0x7f
 800613e:	401a      	ands	r2, r3
 8006140:	0013      	movs	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	189b      	adds	r3, r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	3310      	adds	r3, #16
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	18d3      	adds	r3, r2, r3
 800614e:	3304      	adds	r3, #4
 8006150:	e00d      	b.n	800616e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006152:	230e      	movs	r3, #14
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	227f      	movs	r2, #127	@ 0x7f
 800615a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800615c:	0013      	movs	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	189b      	adds	r3, r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	3351      	adds	r3, #81	@ 0x51
 8006166:	33ff      	adds	r3, #255	@ 0xff
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	18d3      	adds	r3, r2, r3
 800616c:	3304      	adds	r3, #4
 800616e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006170:	220e      	movs	r2, #14
 8006172:	18bb      	adds	r3, r7, r2
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <USBD_StdEPReq+0x2f8>
 800617a:	18bb      	adds	r3, r7, r2
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b80      	cmp	r3, #128	@ 0x80
 8006180:	d103      	bne.n	800618a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e010      	b.n	80061ac <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800618a:	230e      	movs	r3, #14
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	781a      	ldrb	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	0011      	movs	r1, r2
 8006194:	0018      	movs	r0, r3
 8006196:	f001 f8e0 	bl	800735a <USBD_LL_IsStallEP>
 800619a:	1e03      	subs	r3, r0, #0
 800619c:	d003      	beq.n	80061a6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2201      	movs	r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	e002      	b.n	80061ac <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	0018      	movs	r0, r3
 80061b4:	f000 fc31 	bl	8006a1a <USBD_CtlSendData>
              break;
 80061b8:	e006      	b.n	80061c8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	0011      	movs	r1, r2
 80061c0:	0018      	movs	r0, r3
 80061c2:	f000 fbac 	bl	800691e <USBD_CtlError>
              break;
 80061c6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80061c8:	e006      	b.n	80061d8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	0011      	movs	r1, r2
 80061d0:	0018      	movs	r0, r3
 80061d2:	f000 fba4 	bl	800691e <USBD_CtlError>
          break;
 80061d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80061d8:	e006      	b.n	80061e8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	0011      	movs	r1, r2
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 fb9c 	bl	800691e <USBD_CtlError>
      break;
 80061e6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80061e8:	230f      	movs	r3, #15
 80061ea:	18fb      	adds	r3, r7, r3
 80061ec:	781b      	ldrb	r3, [r3, #0]
}
 80061ee:	0018      	movs	r0, r3
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b004      	add	sp, #16
 80061f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080061f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006202:	2308      	movs	r3, #8
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	2200      	movs	r2, #0
 8006208:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800620e:	230b      	movs	r3, #11
 8006210:	18fb      	adds	r3, r7, r3
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	885b      	ldrh	r3, [r3, #2]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b07      	cmp	r3, #7
 8006220:	d900      	bls.n	8006224 <USBD_GetDescriptor+0x2c>
 8006222:	e159      	b.n	80064d8 <USBD_GetDescriptor+0x2e0>
 8006224:	009a      	lsls	r2, r3, #2
 8006226:	4bcb      	ldr	r3, [pc, #812]	@ (8006554 <USBD_GetDescriptor+0x35c>)
 8006228:	18d3      	adds	r3, r2, r3
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	23ac      	movs	r3, #172	@ 0xac
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	58d3      	ldr	r3, [r2, r3]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	7c12      	ldrb	r2, [r2, #16]
 800623c:	2108      	movs	r1, #8
 800623e:	1879      	adds	r1, r7, r1
 8006240:	0010      	movs	r0, r2
 8006242:	4798      	blx	r3
 8006244:	0003      	movs	r3, r0
 8006246:	60fb      	str	r3, [r7, #12]
      break;
 8006248:	e153      	b.n	80064f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7c1b      	ldrb	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10f      	bne.n	8006272 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	23ad      	movs	r3, #173	@ 0xad
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	58d3      	ldr	r3, [r2, r3]
 800625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625c:	2208      	movs	r2, #8
 800625e:	18ba      	adds	r2, r7, r2
 8006260:	0010      	movs	r0, r2
 8006262:	4798      	blx	r3
 8006264:	0003      	movs	r3, r0
 8006266:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
 800626c:	2202      	movs	r2, #2
 800626e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006270:	e13f      	b.n	80064f2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	23ad      	movs	r3, #173	@ 0xad
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	58d3      	ldr	r3, [r2, r3]
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	2208      	movs	r2, #8
 800627e:	18ba      	adds	r2, r7, r2
 8006280:	0010      	movs	r0, r2
 8006282:	4798      	blx	r3
 8006284:	0003      	movs	r3, r0
 8006286:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	2202      	movs	r2, #2
 800628e:	701a      	strb	r2, [r3, #0]
      break;
 8006290:	e12f      	b.n	80064f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	885b      	ldrh	r3, [r3, #2]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b05      	cmp	r3, #5
 800629a:	d900      	bls.n	800629e <USBD_GetDescriptor+0xa6>
 800629c:	e0d0      	b.n	8006440 <USBD_GetDescriptor+0x248>
 800629e:	009a      	lsls	r2, r3, #2
 80062a0:	4bad      	ldr	r3, [pc, #692]	@ (8006558 <USBD_GetDescriptor+0x360>)
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	23ac      	movs	r3, #172	@ 0xac
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	58d3      	ldr	r3, [r2, r3]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	23ac      	movs	r3, #172	@ 0xac
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	58d3      	ldr	r3, [r2, r3]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	7c12      	ldrb	r2, [r2, #16]
 80062c4:	2108      	movs	r1, #8
 80062c6:	1879      	adds	r1, r7, r1
 80062c8:	0010      	movs	r0, r2
 80062ca:	4798      	blx	r3
 80062cc:	0003      	movs	r3, r0
 80062ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062d0:	e0c3      	b.n	800645a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	0011      	movs	r1, r2
 80062d8:	0018      	movs	r0, r3
 80062da:	f000 fb20 	bl	800691e <USBD_CtlError>
            err++;
 80062de:	210b      	movs	r1, #11
 80062e0:	187b      	adds	r3, r7, r1
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	3201      	adds	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
          break;
 80062ea:	e0b6      	b.n	800645a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	23ac      	movs	r3, #172	@ 0xac
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	58d3      	ldr	r3, [r2, r3]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	23ac      	movs	r3, #172	@ 0xac
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	58d3      	ldr	r3, [r2, r3]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	7c12      	ldrb	r2, [r2, #16]
 8006308:	2108      	movs	r1, #8
 800630a:	1879      	adds	r1, r7, r1
 800630c:	0010      	movs	r0, r2
 800630e:	4798      	blx	r3
 8006310:	0003      	movs	r3, r0
 8006312:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006314:	e0a1      	b.n	800645a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	0011      	movs	r1, r2
 800631c:	0018      	movs	r0, r3
 800631e:	f000 fafe 	bl	800691e <USBD_CtlError>
            err++;
 8006322:	210b      	movs	r1, #11
 8006324:	187b      	adds	r3, r7, r1
 8006326:	781a      	ldrb	r2, [r3, #0]
 8006328:	187b      	adds	r3, r7, r1
 800632a:	3201      	adds	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
          break;
 800632e:	e094      	b.n	800645a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	23ac      	movs	r3, #172	@ 0xac
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	58d3      	ldr	r3, [r2, r3]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00d      	beq.n	800635a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	23ac      	movs	r3, #172	@ 0xac
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	58d3      	ldr	r3, [r2, r3]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	7c12      	ldrb	r2, [r2, #16]
 800634c:	2108      	movs	r1, #8
 800634e:	1879      	adds	r1, r7, r1
 8006350:	0010      	movs	r0, r2
 8006352:	4798      	blx	r3
 8006354:	0003      	movs	r3, r0
 8006356:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006358:	e07f      	b.n	800645a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	0011      	movs	r1, r2
 8006360:	0018      	movs	r0, r3
 8006362:	f000 fadc 	bl	800691e <USBD_CtlError>
            err++;
 8006366:	210b      	movs	r1, #11
 8006368:	187b      	adds	r3, r7, r1
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	187b      	adds	r3, r7, r1
 800636e:	3201      	adds	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]
          break;
 8006372:	e072      	b.n	800645a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	23ac      	movs	r3, #172	@ 0xac
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	58d3      	ldr	r3, [r2, r3]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00d      	beq.n	800639e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	23ac      	movs	r3, #172	@ 0xac
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	58d3      	ldr	r3, [r2, r3]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	7c12      	ldrb	r2, [r2, #16]
 8006390:	2108      	movs	r1, #8
 8006392:	1879      	adds	r1, r7, r1
 8006394:	0010      	movs	r0, r2
 8006396:	4798      	blx	r3
 8006398:	0003      	movs	r3, r0
 800639a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800639c:	e05d      	b.n	800645a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0011      	movs	r1, r2
 80063a4:	0018      	movs	r0, r3
 80063a6:	f000 faba 	bl	800691e <USBD_CtlError>
            err++;
 80063aa:	210b      	movs	r1, #11
 80063ac:	187b      	adds	r3, r7, r1
 80063ae:	781a      	ldrb	r2, [r3, #0]
 80063b0:	187b      	adds	r3, r7, r1
 80063b2:	3201      	adds	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
          break;
 80063b6:	e050      	b.n	800645a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	23ac      	movs	r3, #172	@ 0xac
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	58d3      	ldr	r3, [r2, r3]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	23ac      	movs	r3, #172	@ 0xac
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	58d3      	ldr	r3, [r2, r3]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	7c12      	ldrb	r2, [r2, #16]
 80063d4:	2108      	movs	r1, #8
 80063d6:	1879      	adds	r1, r7, r1
 80063d8:	0010      	movs	r0, r2
 80063da:	4798      	blx	r3
 80063dc:	0003      	movs	r3, r0
 80063de:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063e0:	e03b      	b.n	800645a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	0011      	movs	r1, r2
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 fa98 	bl	800691e <USBD_CtlError>
            err++;
 80063ee:	210b      	movs	r1, #11
 80063f0:	187b      	adds	r3, r7, r1
 80063f2:	781a      	ldrb	r2, [r3, #0]
 80063f4:	187b      	adds	r3, r7, r1
 80063f6:	3201      	adds	r2, #1
 80063f8:	701a      	strb	r2, [r3, #0]
          break;
 80063fa:	e02e      	b.n	800645a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	23ac      	movs	r3, #172	@ 0xac
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	58d3      	ldr	r3, [r2, r3]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00d      	beq.n	8006426 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	23ac      	movs	r3, #172	@ 0xac
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	58d3      	ldr	r3, [r2, r3]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	7c12      	ldrb	r2, [r2, #16]
 8006418:	2108      	movs	r1, #8
 800641a:	1879      	adds	r1, r7, r1
 800641c:	0010      	movs	r0, r2
 800641e:	4798      	blx	r3
 8006420:	0003      	movs	r3, r0
 8006422:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006424:	e019      	b.n	800645a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	0011      	movs	r1, r2
 800642c:	0018      	movs	r0, r3
 800642e:	f000 fa76 	bl	800691e <USBD_CtlError>
            err++;
 8006432:	210b      	movs	r1, #11
 8006434:	187b      	adds	r3, r7, r1
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	187b      	adds	r3, r7, r1
 800643a:	3201      	adds	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
          break;
 800643e:	e00c      	b.n	800645a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	0011      	movs	r1, r2
 8006446:	0018      	movs	r0, r3
 8006448:	f000 fa69 	bl	800691e <USBD_CtlError>
          err++;
 800644c:	210b      	movs	r1, #11
 800644e:	187b      	adds	r3, r7, r1
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	187b      	adds	r3, r7, r1
 8006454:	3201      	adds	r2, #1
 8006456:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006458:	e04b      	b.n	80064f2 <USBD_GetDescriptor+0x2fa>
 800645a:	e04a      	b.n	80064f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	7c1b      	ldrb	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10b      	bne.n	800647c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	23ad      	movs	r3, #173	@ 0xad
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	58d3      	ldr	r3, [r2, r3]
 800646c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646e:	2208      	movs	r2, #8
 8006470:	18ba      	adds	r2, r7, r2
 8006472:	0010      	movs	r0, r2
 8006474:	4798      	blx	r3
 8006476:	0003      	movs	r3, r0
 8006478:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800647a:	e03a      	b.n	80064f2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	0011      	movs	r1, r2
 8006482:	0018      	movs	r0, r3
 8006484:	f000 fa4b 	bl	800691e <USBD_CtlError>
        err++;
 8006488:	210b      	movs	r1, #11
 800648a:	187b      	adds	r3, r7, r1
 800648c:	781a      	ldrb	r2, [r3, #0]
 800648e:	187b      	adds	r3, r7, r1
 8006490:	3201      	adds	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]
      break;
 8006494:	e02d      	b.n	80064f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	7c1b      	ldrb	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10f      	bne.n	80064be <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	23ad      	movs	r3, #173	@ 0xad
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	58d3      	ldr	r3, [r2, r3]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a8:	2208      	movs	r2, #8
 80064aa:	18ba      	adds	r2, r7, r2
 80064ac:	0010      	movs	r0, r2
 80064ae:	4798      	blx	r3
 80064b0:	0003      	movs	r3, r0
 80064b2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	2207      	movs	r2, #7
 80064ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064bc:	e019      	b.n	80064f2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	0011      	movs	r1, r2
 80064c4:	0018      	movs	r0, r3
 80064c6:	f000 fa2a 	bl	800691e <USBD_CtlError>
        err++;
 80064ca:	210b      	movs	r1, #11
 80064cc:	187b      	adds	r3, r7, r1
 80064ce:	781a      	ldrb	r2, [r3, #0]
 80064d0:	187b      	adds	r3, r7, r1
 80064d2:	3201      	adds	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
      break;
 80064d6:	e00c      	b.n	80064f2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	0011      	movs	r1, r2
 80064de:	0018      	movs	r0, r3
 80064e0:	f000 fa1d 	bl	800691e <USBD_CtlError>
      err++;
 80064e4:	210b      	movs	r1, #11
 80064e6:	187b      	adds	r3, r7, r1
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	187b      	adds	r3, r7, r1
 80064ec:	3201      	adds	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
      break;
 80064f0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80064f2:	230b      	movs	r3, #11
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d127      	bne.n	800654c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80064fc:	2108      	movs	r1, #8
 80064fe:	187b      	adds	r3, r7, r1
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d019      	beq.n	800653a <USBD_GetDescriptor+0x342>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	88db      	ldrh	r3, [r3, #6]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d015      	beq.n	800653a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	88da      	ldrh	r2, [r3, #6]
 8006512:	187b      	adds	r3, r7, r1
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	1c18      	adds	r0, r3, #0
 8006518:	1c11      	adds	r1, r2, #0
 800651a:	b28a      	uxth	r2, r1
 800651c:	b283      	uxth	r3, r0
 800651e:	429a      	cmp	r2, r3
 8006520:	d900      	bls.n	8006524 <USBD_GetDescriptor+0x32c>
 8006522:	1c01      	adds	r1, r0, #0
 8006524:	b28a      	uxth	r2, r1
 8006526:	2108      	movs	r1, #8
 8006528:	187b      	adds	r3, r7, r1
 800652a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800652c:	187b      	adds	r3, r7, r1
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	68f9      	ldr	r1, [r7, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	0018      	movs	r0, r3
 8006536:	f000 fa70 	bl	8006a1a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	88db      	ldrh	r3, [r3, #6]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d105      	bne.n	800654e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	0018      	movs	r0, r3
 8006546:	f000 fad2 	bl	8006aee <USBD_CtlSendStatus>
 800654a:	e000      	b.n	800654e <USBD_GetDescriptor+0x356>
    return;
 800654c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800654e:	46bd      	mov	sp, r7
 8006550:	b004      	add	sp, #16
 8006552:	bd80      	pop	{r7, pc}
 8006554:	080076dc 	.word	0x080076dc
 8006558:	080076fc 	.word	0x080076fc

0800655c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	889b      	ldrh	r3, [r3, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d13d      	bne.n	80065ea <USBD_SetAddress+0x8e>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	88db      	ldrh	r3, [r3, #6]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d139      	bne.n	80065ea <USBD_SetAddress+0x8e>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	885b      	ldrh	r3, [r3, #2]
 800657a:	2b7f      	cmp	r3, #127	@ 0x7f
 800657c:	d835      	bhi.n	80065ea <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	885b      	ldrh	r3, [r3, #2]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	230f      	movs	r3, #15
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	217f      	movs	r1, #127	@ 0x7f
 800658a:	400a      	ands	r2, r1
 800658c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	23a7      	movs	r3, #167	@ 0xa7
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	5cd3      	ldrb	r3, [r2, r3]
 8006596:	2b03      	cmp	r3, #3
 8006598:	d106      	bne.n	80065a8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 f9bc 	bl	800691e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a6:	e027      	b.n	80065f8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	240f      	movs	r4, #15
 80065ac:	193a      	adds	r2, r7, r4
 80065ae:	4914      	ldr	r1, [pc, #80]	@ (8006600 <USBD_SetAddress+0xa4>)
 80065b0:	7812      	ldrb	r2, [r2, #0]
 80065b2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065b4:	193b      	adds	r3, r7, r4
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	0011      	movs	r1, r2
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 fefc 	bl	80073ba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	0018      	movs	r0, r3
 80065c6:	f000 fa92 	bl	8006aee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065ca:	193b      	adds	r3, r7, r4
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	23a7      	movs	r3, #167	@ 0xa7
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	2102      	movs	r1, #2
 80065da:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065dc:	e00c      	b.n	80065f8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	23a7      	movs	r3, #167	@ 0xa7
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	2101      	movs	r1, #1
 80065e6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e8:	e006      	b.n	80065f8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	0011      	movs	r1, r2
 80065f0:	0018      	movs	r0, r3
 80065f2:	f000 f994 	bl	800691e <USBD_CtlError>
  }
}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	46c0      	nop			@ (mov r8, r8)
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b005      	add	sp, #20
 80065fe:	bd90      	pop	{r4, r7, pc}
 8006600:	0000029e 	.word	0x0000029e

08006604 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	885b      	ldrh	r3, [r3, #2]
 8006612:	b2da      	uxtb	r2, r3
 8006614:	4b4c      	ldr	r3, [pc, #304]	@ (8006748 <USBD_SetConfig+0x144>)
 8006616:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006618:	4b4b      	ldr	r3, [pc, #300]	@ (8006748 <USBD_SetConfig+0x144>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d906      	bls.n	800662e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	0011      	movs	r1, r2
 8006626:	0018      	movs	r0, r3
 8006628:	f000 f979 	bl	800691e <USBD_CtlError>
 800662c:	e088      	b.n	8006740 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	23a7      	movs	r3, #167	@ 0xa7
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	5cd3      	ldrb	r3, [r2, r3]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d002      	beq.n	8006640 <USBD_SetConfig+0x3c>
 800663a:	2b03      	cmp	r3, #3
 800663c:	d029      	beq.n	8006692 <USBD_SetConfig+0x8e>
 800663e:	e071      	b.n	8006724 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006640:	4b41      	ldr	r3, [pc, #260]	@ (8006748 <USBD_SetConfig+0x144>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01f      	beq.n	8006688 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006648:	4b3f      	ldr	r3, [pc, #252]	@ (8006748 <USBD_SetConfig+0x144>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	001a      	movs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	23a7      	movs	r3, #167	@ 0xa7
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	2103      	movs	r1, #3
 800665a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800665c:	4b3a      	ldr	r3, [pc, #232]	@ (8006748 <USBD_SetConfig+0x144>)
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	0011      	movs	r1, r2
 8006664:	0018      	movs	r0, r3
 8006666:	f7ff f8c6 	bl	80057f6 <USBD_SetClassConfig>
 800666a:	0003      	movs	r3, r0
 800666c:	2b02      	cmp	r3, #2
 800666e:	d106      	bne.n	800667e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	0011      	movs	r1, r2
 8006676:	0018      	movs	r0, r3
 8006678:	f000 f951 	bl	800691e <USBD_CtlError>
            return;
 800667c:	e060      	b.n	8006740 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	0018      	movs	r0, r3
 8006682:	f000 fa34 	bl	8006aee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006686:	e05b      	b.n	8006740 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	0018      	movs	r0, r3
 800668c:	f000 fa2f 	bl	8006aee <USBD_CtlSendStatus>
        break;
 8006690:	e056      	b.n	8006740 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006692:	4b2d      	ldr	r3, [pc, #180]	@ (8006748 <USBD_SetConfig+0x144>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d115      	bne.n	80066c6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	23a7      	movs	r3, #167	@ 0xa7
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	2102      	movs	r1, #2
 80066a2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80066a4:	4b28      	ldr	r3, [pc, #160]	@ (8006748 <USBD_SetConfig+0x144>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	001a      	movs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80066ae:	4b26      	ldr	r3, [pc, #152]	@ (8006748 <USBD_SetConfig+0x144>)
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	0011      	movs	r1, r2
 80066b6:	0018      	movs	r0, r3
 80066b8:	f7ff f8c4 	bl	8005844 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	0018      	movs	r0, r3
 80066c0:	f000 fa15 	bl	8006aee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80066c4:	e03c      	b.n	8006740 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80066c6:	4b20      	ldr	r3, [pc, #128]	@ (8006748 <USBD_SetConfig+0x144>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	001a      	movs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d022      	beq.n	800671a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	0011      	movs	r1, r2
 80066de:	0018      	movs	r0, r3
 80066e0:	f7ff f8b0 	bl	8005844 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80066e4:	4b18      	ldr	r3, [pc, #96]	@ (8006748 <USBD_SetConfig+0x144>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	001a      	movs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80066ee:	4b16      	ldr	r3, [pc, #88]	@ (8006748 <USBD_SetConfig+0x144>)
 80066f0:	781a      	ldrb	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0011      	movs	r1, r2
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7ff f87d 	bl	80057f6 <USBD_SetClassConfig>
 80066fc:	0003      	movs	r3, r0
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d106      	bne.n	8006710 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	0011      	movs	r1, r2
 8006708:	0018      	movs	r0, r3
 800670a:	f000 f908 	bl	800691e <USBD_CtlError>
            return;
 800670e:	e017      	b.n	8006740 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	0018      	movs	r0, r3
 8006714:	f000 f9eb 	bl	8006aee <USBD_CtlSendStatus>
        break;
 8006718:	e012      	b.n	8006740 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	0018      	movs	r0, r3
 800671e:	f000 f9e6 	bl	8006aee <USBD_CtlSendStatus>
        break;
 8006722:	e00d      	b.n	8006740 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	0011      	movs	r1, r2
 800672a:	0018      	movs	r0, r3
 800672c:	f000 f8f7 	bl	800691e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006730:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <USBD_SetConfig+0x144>)
 8006732:	781a      	ldrb	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	0011      	movs	r1, r2
 8006738:	0018      	movs	r0, r3
 800673a:	f7ff f883 	bl	8005844 <USBD_ClrClassConfig>
        break;
 800673e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006740:	46bd      	mov	sp, r7
 8006742:	b002      	add	sp, #8
 8006744:	bd80      	pop	{r7, pc}
 8006746:	46c0      	nop			@ (mov r8, r8)
 8006748:	2000019c 	.word	0x2000019c

0800674c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	88db      	ldrh	r3, [r3, #6]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d006      	beq.n	800676c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	0011      	movs	r1, r2
 8006764:	0018      	movs	r0, r3
 8006766:	f000 f8da 	bl	800691e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800676a:	e026      	b.n	80067ba <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	23a7      	movs	r3, #167	@ 0xa7
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	5cd3      	ldrb	r3, [r2, r3]
 8006774:	2b02      	cmp	r3, #2
 8006776:	dc02      	bgt.n	800677e <USBD_GetConfig+0x32>
 8006778:	2b00      	cmp	r3, #0
 800677a:	dc03      	bgt.n	8006784 <USBD_GetConfig+0x38>
 800677c:	e016      	b.n	80067ac <USBD_GetConfig+0x60>
 800677e:	2b03      	cmp	r3, #3
 8006780:	d00c      	beq.n	800679c <USBD_GetConfig+0x50>
 8006782:	e013      	b.n	80067ac <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3308      	adds	r3, #8
 800678e:	0019      	movs	r1, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	0018      	movs	r0, r3
 8006796:	f000 f940 	bl	8006a1a <USBD_CtlSendData>
        break;
 800679a:	e00e      	b.n	80067ba <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1d19      	adds	r1, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	0018      	movs	r0, r3
 80067a6:	f000 f938 	bl	8006a1a <USBD_CtlSendData>
        break;
 80067aa:	e006      	b.n	80067ba <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0011      	movs	r1, r2
 80067b2:	0018      	movs	r0, r3
 80067b4:	f000 f8b3 	bl	800691e <USBD_CtlError>
        break;
 80067b8:	46c0      	nop			@ (mov r8, r8)
}
 80067ba:	46c0      	nop			@ (mov r8, r8)
 80067bc:	46bd      	mov	sp, r7
 80067be:	b002      	add	sp, #8
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	23a7      	movs	r3, #167	@ 0xa7
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	5cd3      	ldrb	r3, [r2, r3]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d822      	bhi.n	8006820 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	88db      	ldrh	r3, [r3, #6]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d006      	beq.n	80067f0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	0011      	movs	r1, r2
 80067e8:	0018      	movs	r0, r3
 80067ea:	f000 f898 	bl	800691e <USBD_CtlError>
        break;
 80067ee:	e01e      	b.n	800682e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	23a9      	movs	r3, #169	@ 0xa9
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	58d3      	ldr	r3, [r2, r3]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	2202      	movs	r2, #2
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	330c      	adds	r3, #12
 8006812:	0019      	movs	r1, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	0018      	movs	r0, r3
 800681a:	f000 f8fe 	bl	8006a1a <USBD_CtlSendData>
      break;
 800681e:	e006      	b.n	800682e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0011      	movs	r1, r2
 8006826:	0018      	movs	r0, r3
 8006828:	f000 f879 	bl	800691e <USBD_CtlError>
      break;
 800682c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	46bd      	mov	sp, r7
 8006832:	b002      	add	sp, #8
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	885b      	ldrh	r3, [r3, #2]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d108      	bne.n	800685a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	23a9      	movs	r3, #169	@ 0xa9
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	2101      	movs	r1, #1
 8006850:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	0018      	movs	r0, r3
 8006856:	f000 f94a 	bl	8006aee <USBD_CtlSendStatus>
  }
}
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	46bd      	mov	sp, r7
 800685e:	b002      	add	sp, #8
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	23a7      	movs	r3, #167	@ 0xa7
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	5cd3      	ldrb	r3, [r2, r3]
 8006874:	3b01      	subs	r3, #1
 8006876:	2b02      	cmp	r3, #2
 8006878:	d80d      	bhi.n	8006896 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	885b      	ldrh	r3, [r3, #2]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d110      	bne.n	80068a4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	23a9      	movs	r3, #169	@ 0xa9
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	2100      	movs	r1, #0
 800688a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	0018      	movs	r0, r3
 8006890:	f000 f92d 	bl	8006aee <USBD_CtlSendStatus>
      }
      break;
 8006894:	e006      	b.n	80068a4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	0011      	movs	r1, r2
 800689c:	0018      	movs	r0, r3
 800689e:	f000 f83e 	bl	800691e <USBD_CtlError>
      break;
 80068a2:	e000      	b.n	80068a6 <USBD_ClrFeature+0x44>
      break;
 80068a4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80068a6:	46c0      	nop			@ (mov r8, r8)
 80068a8:	46bd      	mov	sp, r7
 80068aa:	b002      	add	sp, #8
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781a      	ldrb	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	785a      	ldrb	r2, [r3, #1]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	3302      	adds	r3, #2
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	001a      	movs	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	3303      	adds	r3, #3
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	b29b      	uxth	r3, r3
 80068da:	18d3      	adds	r3, r2, r3
 80068dc:	b29a      	uxth	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	3304      	adds	r3, #4
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	001a      	movs	r2, r3
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	3305      	adds	r3, #5
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	18d3      	adds	r3, r2, r3
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	3306      	adds	r3, #6
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	001a      	movs	r2, r3
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	3307      	adds	r3, #7
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	b29b      	uxth	r3, r3
 800690e:	18d3      	adds	r3, r2, r3
 8006910:	b29a      	uxth	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	80da      	strh	r2, [r3, #6]

}
 8006916:	46c0      	nop			@ (mov r8, r8)
 8006918:	46bd      	mov	sp, r7
 800691a:	b002      	add	sp, #8
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2180      	movs	r1, #128	@ 0x80
 800692c:	0018      	movs	r0, r3
 800692e:	f000 fcbe 	bl	80072ae <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2100      	movs	r1, #0
 8006936:	0018      	movs	r0, r3
 8006938:	f000 fcb9 	bl	80072ae <USBD_LL_StallEP>
}
 800693c:	46c0      	nop			@ (mov r8, r8)
 800693e:	46bd      	mov	sp, r7
 8006940:	b002      	add	sp, #8
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006950:	2417      	movs	r4, #23
 8006952:	193b      	adds	r3, r7, r4
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d03c      	beq.n	80069d8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	0018      	movs	r0, r3
 8006962:	f000 f83d 	bl	80069e0 <USBD_GetLen>
 8006966:	0003      	movs	r3, r0
 8006968:	3301      	adds	r3, #1
 800696a:	b29b      	uxth	r3, r3
 800696c:	18db      	adds	r3, r3, r3
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006974:	193b      	adds	r3, r7, r4
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	193a      	adds	r2, r7, r4
 800697a:	1c59      	adds	r1, r3, #1
 800697c:	7011      	strb	r1, [r2, #0]
 800697e:	001a      	movs	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	189b      	adds	r3, r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	7812      	ldrb	r2, [r2, #0]
 8006988:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800698a:	193b      	adds	r3, r7, r4
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	193a      	adds	r2, r7, r4
 8006990:	1c59      	adds	r1, r3, #1
 8006992:	7011      	strb	r1, [r2, #0]
 8006994:	001a      	movs	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	189b      	adds	r3, r3, r2
 800699a:	2203      	movs	r2, #3
 800699c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800699e:	e017      	b.n	80069d0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	60fa      	str	r2, [r7, #12]
 80069a6:	2417      	movs	r4, #23
 80069a8:	193a      	adds	r2, r7, r4
 80069aa:	7812      	ldrb	r2, [r2, #0]
 80069ac:	1939      	adds	r1, r7, r4
 80069ae:	1c50      	adds	r0, r2, #1
 80069b0:	7008      	strb	r0, [r1, #0]
 80069b2:	0011      	movs	r1, r2
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	1852      	adds	r2, r2, r1
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80069bc:	193b      	adds	r3, r7, r4
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	193a      	adds	r2, r7, r4
 80069c2:	1c59      	adds	r1, r3, #1
 80069c4:	7011      	strb	r1, [r2, #0]
 80069c6:	001a      	movs	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	189b      	adds	r3, r3, r2
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e3      	bne.n	80069a0 <USBD_GetString+0x5c>
    }
  }
}
 80069d8:	46c0      	nop			@ (mov r8, r8)
 80069da:	46bd      	mov	sp, r7
 80069dc:	b007      	add	sp, #28
 80069de:	bd90      	pop	{r4, r7, pc}

080069e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069e8:	230f      	movs	r3, #15
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	2200      	movs	r2, #0
 80069ee:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80069f0:	e008      	b.n	8006a04 <USBD_GetLen+0x24>
  {
    len++;
 80069f2:	210f      	movs	r1, #15
 80069f4:	187b      	adds	r3, r7, r1
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	187b      	adds	r3, r7, r1
 80069fa:	3201      	adds	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
    buf++;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3301      	adds	r3, #1
 8006a02:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f2      	bne.n	80069f2 <USBD_GetLen+0x12>
  }

  return len;
 8006a0c:	230f      	movs	r3, #15
 8006a0e:	18fb      	adds	r3, r7, r3
 8006a10:	781b      	ldrb	r3, [r3, #0]
}
 8006a12:	0018      	movs	r0, r3
 8006a14:	46bd      	mov	sp, r7
 8006a16:	b004      	add	sp, #16
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	1dbb      	adds	r3, r7, #6
 8006a26:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	23a5      	movs	r3, #165	@ 0xa5
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	2102      	movs	r1, #2
 8006a30:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006a32:	1dbb      	adds	r3, r7, #6
 8006a34:	881a      	ldrh	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006a3a:	1dbb      	adds	r3, r7, #6
 8006a3c:	881a      	ldrh	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a42:	1dbb      	adds	r3, r7, #6
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	f000 fce0 	bl	8007410 <USBD_LL_Transmit>

  return USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	0018      	movs	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	b004      	add	sp, #16
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	1dbb      	adds	r3, r7, #6
 8006a66:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a68:	1dbb      	adds	r3, r7, #6
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	2100      	movs	r1, #0
 8006a72:	f000 fccd 	bl	8007410 <USBD_LL_Transmit>

  return USBD_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	0018      	movs	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b004      	add	sp, #16
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	1dbb      	adds	r3, r7, #6
 8006a8c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	23a5      	movs	r3, #165	@ 0xa5
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	2103      	movs	r1, #3
 8006a96:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8006a98:	1dbb      	adds	r3, r7, #6
 8006a9a:	8819      	ldrh	r1, [r3, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	23ae      	movs	r3, #174	@ 0xae
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8006aa4:	1dbb      	adds	r3, r7, #6
 8006aa6:	8819      	ldrh	r1, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	23b0      	movs	r3, #176	@ 0xb0
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ab0:	1dbb      	adds	r3, r7, #6
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	2100      	movs	r1, #0
 8006aba:	f000 fce0 	bl	800747e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b004      	add	sp, #16
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	1dbb      	adds	r3, r7, #6
 8006ad4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ad6:	1dbb      	adds	r3, r7, #6
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	2100      	movs	r1, #0
 8006ae0:	f000 fccd 	bl	800747e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b004      	add	sp, #16
 8006aec:	bd80      	pop	{r7, pc}

08006aee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	23a5      	movs	r3, #165	@ 0xa5
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	2104      	movs	r1, #4
 8006afe:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	2300      	movs	r3, #0
 8006b04:	2200      	movs	r2, #0
 8006b06:	2100      	movs	r1, #0
 8006b08:	f000 fc82 	bl	8007410 <USBD_LL_Transmit>

  return USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	0018      	movs	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	b002      	add	sp, #8
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b082      	sub	sp, #8
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	23a5      	movs	r3, #165	@ 0xa5
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	2105      	movs	r1, #5
 8006b26:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2100      	movs	r1, #0
 8006b30:	f000 fca5 	bl	800747e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b002      	add	sp, #8
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b44:	4914      	ldr	r1, [pc, #80]	@ (8006b98 <MX_USB_DEVICE_Init+0x58>)
 8006b46:	4b15      	ldr	r3, [pc, #84]	@ (8006b9c <MX_USB_DEVICE_Init+0x5c>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f7fe fdec 	bl	8005728 <USBD_Init>
 8006b50:	1e03      	subs	r3, r0, #0
 8006b52:	d001      	beq.n	8006b58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b54:	f7f9 fbf0 	bl	8000338 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b58:	4a11      	ldr	r2, [pc, #68]	@ (8006ba0 <MX_USB_DEVICE_Init+0x60>)
 8006b5a:	4b10      	ldr	r3, [pc, #64]	@ (8006b9c <MX_USB_DEVICE_Init+0x5c>)
 8006b5c:	0011      	movs	r1, r2
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7fe fe13 	bl	800578a <USBD_RegisterClass>
 8006b64:	1e03      	subs	r3, r0, #0
 8006b66:	d001      	beq.n	8006b6c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006b68:	f7f9 fbe6 	bl	8000338 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ba4 <MX_USB_DEVICE_Init+0x64>)
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <MX_USB_DEVICE_Init+0x5c>)
 8006b70:	0011      	movs	r1, r2
 8006b72:	0018      	movs	r0, r3
 8006b74:	f7fe fd28 	bl	80055c8 <USBD_CDC_RegisterInterface>
 8006b78:	1e03      	subs	r3, r0, #0
 8006b7a:	d001      	beq.n	8006b80 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8006b7c:	f7f9 fbdc 	bl	8000338 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b80:	4b06      	ldr	r3, [pc, #24]	@ (8006b9c <MX_USB_DEVICE_Init+0x5c>)
 8006b82:	0018      	movs	r0, r3
 8006b84:	f7fe fe21 	bl	80057ca <USBD_Start>
 8006b88:	1e03      	subs	r3, r0, #0
 8006b8a:	d001      	beq.n	8006b90 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8006b8c:	f7f9 fbd4 	bl	8000338 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b90:	46c0      	nop			@ (mov r8, r8)
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	46c0      	nop			@ (mov r8, r8)
 8006b98:	2000012c 	.word	0x2000012c
 8006b9c:	200001a0 	.word	0x200001a0
 8006ba0:	20000018 	.word	0x20000018
 8006ba4:	2000011c 	.word	0x2000011c

08006ba8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bac:	4907      	ldr	r1, [pc, #28]	@ (8006bcc <CDC_Init_FS+0x24>)
 8006bae:	4b08      	ldr	r3, [pc, #32]	@ (8006bd0 <CDC_Init_FS+0x28>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7fe fd23 	bl	80055fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bb8:	4a06      	ldr	r2, [pc, #24]	@ (8006bd4 <CDC_Init_FS+0x2c>)
 8006bba:	4b05      	ldr	r3, [pc, #20]	@ (8006bd0 <CDC_Init_FS+0x28>)
 8006bbc:	0011      	movs	r1, r2
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f7fe fd39 	bl	8005636 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006bc4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000864 	.word	0x20000864
 8006bd0:	200001a0 	.word	0x200001a0
 8006bd4:	20000464 	.word	0x20000464

08006bd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bde:	0018      	movs	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6039      	str	r1, [r7, #0]
 8006bec:	0011      	movs	r1, r2
 8006bee:	1dfb      	adds	r3, r7, #7
 8006bf0:	1c02      	adds	r2, r0, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	1c0a      	adds	r2, r1, #0
 8006bf8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006bfa:	1dfb      	adds	r3, r7, #7
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b23      	cmp	r3, #35	@ 0x23
 8006c00:	d804      	bhi.n	8006c0c <CDC_Control_FS+0x28>
 8006c02:	009a      	lsls	r2, r3, #2
 8006c04:	4b04      	ldr	r3, [pc, #16]	@ (8006c18 <CDC_Control_FS+0x34>)
 8006c06:	18d3      	adds	r3, r2, r3
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c0c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8006c0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c10:	0018      	movs	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	b002      	add	sp, #8
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	08007714 	.word	0x08007714

08006c1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	4b06      	ldr	r3, [pc, #24]	@ (8006c44 <CDC_Receive_FS+0x28>)
 8006c2a:	0011      	movs	r1, r2
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f7fe fd02 	bl	8005636 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c32:	4b04      	ldr	r3, [pc, #16]	@ (8006c44 <CDC_Receive_FS+0x28>)
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7fe fd49 	bl	80056cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c3a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b002      	add	sp, #8
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	200001a0 	.word	0x200001a0

08006c48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c48:	b5b0      	push	{r4, r5, r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	000a      	movs	r2, r1
 8006c52:	1cbb      	adds	r3, r7, #2
 8006c54:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8006c56:	230f      	movs	r3, #15
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006c5e:	4a11      	ldr	r2, [pc, #68]	@ (8006ca4 <CDC_Transmit_FS+0x5c>)
 8006c60:	23ae      	movs	r3, #174	@ 0xae
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	58d3      	ldr	r3, [r2, r3]
 8006c66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	2385      	movs	r3, #133	@ 0x85
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	58d3      	ldr	r3, [r2, r3]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e010      	b.n	8006c9a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c78:	1cbb      	adds	r3, r7, #2
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <CDC_Transmit_FS+0x5c>)
 8006c80:	0018      	movs	r0, r3
 8006c82:	f7fe fcbc 	bl	80055fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c86:	250f      	movs	r5, #15
 8006c88:	197c      	adds	r4, r7, r5
 8006c8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <CDC_Transmit_FS+0x5c>)
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f7fe fce6 	bl	800565e <USBD_CDC_TransmitPacket>
 8006c92:	0003      	movs	r3, r0
 8006c94:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8006c96:	197b      	adds	r3, r7, r5
 8006c98:	781b      	ldrb	r3, [r3, #0]
}
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	b004      	add	sp, #16
 8006ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ca2:	46c0      	nop			@ (mov r8, r8)
 8006ca4:	200001a0 	.word	0x200001a0

08006ca8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	0002      	movs	r2, r0
 8006cb0:	6039      	str	r1, [r7, #0]
 8006cb2:	1dfb      	adds	r3, r7, #7
 8006cb4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2212      	movs	r2, #18
 8006cba:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006cbc:	4b02      	ldr	r3, [pc, #8]	@ (8006cc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b002      	add	sp, #8
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	46c0      	nop			@ (mov r8, r8)
 8006cc8:	20000148 	.word	0x20000148

08006ccc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	0002      	movs	r2, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	1dfb      	adds	r3, r7, #7
 8006cd8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2204      	movs	r2, #4
 8006cde:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ce0:	4b02      	ldr	r3, [pc, #8]	@ (8006cec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b002      	add	sp, #8
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	46c0      	nop			@ (mov r8, r8)
 8006cec:	2000015c 	.word	0x2000015c

08006cf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	0002      	movs	r2, r0
 8006cf8:	6039      	str	r1, [r7, #0]
 8006cfa:	1dfb      	adds	r3, r7, #7
 8006cfc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006cfe:	1dfb      	adds	r3, r7, #7
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	4908      	ldr	r1, [pc, #32]	@ (8006d2c <USBD_FS_ProductStrDescriptor+0x3c>)
 8006d0a:	4b09      	ldr	r3, [pc, #36]	@ (8006d30 <USBD_FS_ProductStrDescriptor+0x40>)
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f7ff fe19 	bl	8006944 <USBD_GetString>
 8006d12:	e005      	b.n	8006d20 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	4905      	ldr	r1, [pc, #20]	@ (8006d2c <USBD_FS_ProductStrDescriptor+0x3c>)
 8006d18:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <USBD_FS_ProductStrDescriptor+0x40>)
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f7ff fe12 	bl	8006944 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d20:	4b02      	ldr	r3, [pc, #8]	@ (8006d2c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006d22:	0018      	movs	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b002      	add	sp, #8
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	46c0      	nop			@ (mov r8, r8)
 8006d2c:	20000c64 	.word	0x20000c64
 8006d30:	0800763c 	.word	0x0800763c

08006d34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	0002      	movs	r2, r0
 8006d3c:	6039      	str	r1, [r7, #0]
 8006d3e:	1dfb      	adds	r3, r7, #7
 8006d40:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	4904      	ldr	r1, [pc, #16]	@ (8006d58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d46:	4b05      	ldr	r3, [pc, #20]	@ (8006d5c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f7ff fdfb 	bl	8006944 <USBD_GetString>
  return USBD_StrDesc;
 8006d4e:	4b02      	ldr	r3, [pc, #8]	@ (8006d58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b002      	add	sp, #8
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000c64 	.word	0x20000c64
 8006d5c:	08007654 	.word	0x08007654

08006d60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	0002      	movs	r2, r0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	1dfb      	adds	r3, r7, #7
 8006d6c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	221a      	movs	r2, #26
 8006d72:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d74:	f000 f84c 	bl	8006e10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d78:	4b02      	ldr	r3, [pc, #8]	@ (8006d84 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b002      	add	sp, #8
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	46c0      	nop			@ (mov r8, r8)
 8006d84:	20000160 	.word	0x20000160

08006d88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	0002      	movs	r2, r0
 8006d90:	6039      	str	r1, [r7, #0]
 8006d92:	1dfb      	adds	r3, r7, #7
 8006d94:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8006d96:	1dfb      	adds	r3, r7, #7
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	4908      	ldr	r1, [pc, #32]	@ (8006dc4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006da4:	0018      	movs	r0, r3
 8006da6:	f7ff fdcd 	bl	8006944 <USBD_GetString>
 8006daa:	e005      	b.n	8006db8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	4905      	ldr	r1, [pc, #20]	@ (8006dc4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006db0:	4b05      	ldr	r3, [pc, #20]	@ (8006dc8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006db2:	0018      	movs	r0, r3
 8006db4:	f7ff fdc6 	bl	8006944 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006db8:	4b02      	ldr	r3, [pc, #8]	@ (8006dc4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8006dba:	0018      	movs	r0, r3
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	b002      	add	sp, #8
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	46c0      	nop			@ (mov r8, r8)
 8006dc4:	20000c64 	.word	0x20000c64
 8006dc8:	08007668 	.word	0x08007668

08006dcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	0002      	movs	r2, r0
 8006dd4:	6039      	str	r1, [r7, #0]
 8006dd6:	1dfb      	adds	r3, r7, #7
 8006dd8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006dda:	1dfb      	adds	r3, r7, #7
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4908      	ldr	r1, [pc, #32]	@ (8006e08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006de6:	4b09      	ldr	r3, [pc, #36]	@ (8006e0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7ff fdab 	bl	8006944 <USBD_GetString>
 8006dee:	e005      	b.n	8006dfc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	4905      	ldr	r1, [pc, #20]	@ (8006e08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006df4:	4b05      	ldr	r3, [pc, #20]	@ (8006e0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006df6:	0018      	movs	r0, r3
 8006df8:	f7ff fda4 	bl	8006944 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dfc:	4b02      	ldr	r3, [pc, #8]	@ (8006e08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8006dfe:	0018      	movs	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b002      	add	sp, #8
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			@ (mov r8, r8)
 8006e08:	20000c64 	.word	0x20000c64
 8006e0c:	08007674 	.word	0x08007674

08006e10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e16:	4b10      	ldr	r3, [pc, #64]	@ (8006e58 <Get_SerialNum+0x48>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e5c <Get_SerialNum+0x4c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e22:	4b0f      	ldr	r3, [pc, #60]	@ (8006e60 <Get_SerialNum+0x50>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	18d3      	adds	r3, r2, r3
 8006e2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e36:	490b      	ldr	r1, [pc, #44]	@ (8006e64 <Get_SerialNum+0x54>)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2208      	movs	r2, #8
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f000 f815 	bl	8006e6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e42:	4909      	ldr	r1, [pc, #36]	@ (8006e68 <Get_SerialNum+0x58>)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2204      	movs	r2, #4
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f000 f80f 	bl	8006e6c <IntToUnicode>
  }
}
 8006e4e:	46c0      	nop			@ (mov r8, r8)
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b004      	add	sp, #16
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	46c0      	nop			@ (mov r8, r8)
 8006e58:	1ffff7ac 	.word	0x1ffff7ac
 8006e5c:	1ffff7b0 	.word	0x1ffff7b0
 8006e60:	1ffff7b4 	.word	0x1ffff7b4
 8006e64:	20000162 	.word	0x20000162
 8006e68:	20000172 	.word	0x20000172

08006e6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	1dfb      	adds	r3, r7, #7
 8006e78:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8006e7a:	2117      	movs	r1, #23
 8006e7c:	187b      	adds	r3, r7, r1
 8006e7e:	2200      	movs	r2, #0
 8006e80:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8006e82:	187b      	adds	r3, r7, r1
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	e02f      	b.n	8006eea <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	0f1b      	lsrs	r3, r3, #28
 8006e8e:	2b09      	cmp	r3, #9
 8006e90:	d80d      	bhi.n	8006eae <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	0f1b      	lsrs	r3, r3, #28
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	2317      	movs	r3, #23
 8006e9a:	18fb      	adds	r3, r7, r3
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	0019      	movs	r1, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	185b      	adds	r3, r3, r1
 8006ea6:	3230      	adds	r2, #48	@ 0x30
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e00c      	b.n	8006ec8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	0f1b      	lsrs	r3, r3, #28
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	2317      	movs	r3, #23
 8006eb6:	18fb      	adds	r3, r7, r3
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	0019      	movs	r1, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	185b      	adds	r3, r3, r1
 8006ec2:	3237      	adds	r2, #55	@ 0x37
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ece:	2117      	movs	r1, #23
 8006ed0:	187b      	adds	r3, r7, r1
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	18d3      	adds	r3, r2, r3
 8006edc:	2200      	movs	r2, #0
 8006ede:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ee0:	187b      	adds	r3, r7, r1
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	187b      	adds	r3, r7, r1
 8006ee6:	3201      	adds	r2, #1
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	2317      	movs	r3, #23
 8006eec:	18fa      	adds	r2, r7, r3
 8006eee:	1dfb      	adds	r3, r7, #7
 8006ef0:	7812      	ldrb	r2, [r2, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d3c8      	bcc.n	8006e8a <IntToUnicode+0x1e>
  }
}
 8006ef8:	46c0      	nop			@ (mov r8, r8)
 8006efa:	46c0      	nop			@ (mov r8, r8)
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b006      	add	sp, #24
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a0e      	ldr	r2, [pc, #56]	@ (8006f4c <HAL_PCD_MspInit+0x48>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d115      	bne.n	8006f42 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006f16:	4b0e      	ldr	r3, [pc, #56]	@ (8006f50 <HAL_PCD_MspInit+0x4c>)
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <HAL_PCD_MspInit+0x4c>)
 8006f1c:	2180      	movs	r1, #128	@ 0x80
 8006f1e:	0409      	lsls	r1, r1, #16
 8006f20:	430a      	orrs	r2, r1
 8006f22:	61da      	str	r2, [r3, #28]
 8006f24:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <HAL_PCD_MspInit+0x4c>)
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	2380      	movs	r3, #128	@ 0x80
 8006f2a:	041b      	lsls	r3, r3, #16
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006f32:	2200      	movs	r2, #0
 8006f34:	2100      	movs	r1, #0
 8006f36:	201f      	movs	r0, #31
 8006f38:	f7f9 fbca 	bl	80006d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006f3c:	201f      	movs	r0, #31
 8006f3e:	f7f9 fbdc 	bl	80006fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	46bd      	mov	sp, r7
 8006f46:	b004      	add	sp, #16
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	46c0      	nop			@ (mov r8, r8)
 8006f4c:	40005c00 	.word	0x40005c00
 8006f50:	40021000 	.word	0x40021000

08006f54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	23b6      	movs	r3, #182	@ 0xb6
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	58d2      	ldr	r2, [r2, r3]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	21a6      	movs	r1, #166	@ 0xa6
 8006f68:	0089      	lsls	r1, r1, #2
 8006f6a:	468c      	mov	ip, r1
 8006f6c:	4463      	add	r3, ip
 8006f6e:	0019      	movs	r1, r3
 8006f70:	0010      	movs	r0, r2
 8006f72:	f7fe fc7d 	bl	8005870 <USBD_LL_SetupStage>
}
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	b002      	add	sp, #8
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f7e:	b590      	push	{r4, r7, lr}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	000a      	movs	r2, r1
 8006f88:	1cfb      	adds	r3, r7, #3
 8006f8a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	23b6      	movs	r3, #182	@ 0xb6
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	58d4      	ldr	r4, [r2, r3]
 8006f94:	1cfb      	adds	r3, r7, #3
 8006f96:	781a      	ldrb	r2, [r3, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	23b2      	movs	r3, #178	@ 0xb2
 8006f9c:	0059      	lsls	r1, r3, #1
 8006f9e:	0013      	movs	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	18c3      	adds	r3, r0, r3
 8006fa8:	185b      	adds	r3, r3, r1
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	1cfb      	adds	r3, r7, #3
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	0020      	movs	r0, r4
 8006fb4:	f7fe fcba 	bl	800592c <USBD_LL_DataOutStage>
}
 8006fb8:	46c0      	nop			@ (mov r8, r8)
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b003      	add	sp, #12
 8006fbe:	bd90      	pop	{r4, r7, pc}

08006fc0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	000a      	movs	r2, r1
 8006fca:	1cfb      	adds	r3, r7, #3
 8006fcc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	23b6      	movs	r3, #182	@ 0xb6
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	58d0      	ldr	r0, [r2, r3]
 8006fd6:	1cfb      	adds	r3, r7, #3
 8006fd8:	781a      	ldrb	r2, [r3, #0]
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	0013      	movs	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	189b      	adds	r3, r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	18cb      	adds	r3, r1, r3
 8006fe6:	3324      	adds	r3, #36	@ 0x24
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	1cfb      	adds	r3, r7, #3
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	0019      	movs	r1, r3
 8006ff0:	f7fe fd1e 	bl	8005a30 <USBD_LL_DataInStage>
}
 8006ff4:	46c0      	nop			@ (mov r8, r8)
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b002      	add	sp, #8
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	23b6      	movs	r3, #182	@ 0xb6
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	58d3      	ldr	r3, [r2, r3]
 800700c:	0018      	movs	r0, r3
 800700e:	f7fe fe55 	bl	8005cbc <USBD_LL_SOF>
}
 8007012:	46c0      	nop			@ (mov r8, r8)
 8007014:	46bd      	mov	sp, r7
 8007016:	b002      	add	sp, #8
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007022:	230f      	movs	r3, #15
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	2201      	movs	r2, #1
 8007028:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	795b      	ldrb	r3, [r3, #5]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d001      	beq.n	8007036 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007032:	f7f9 f981 	bl	8000338 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	23b6      	movs	r3, #182	@ 0xb6
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	58d2      	ldr	r2, [r2, r3]
 800703e:	230f      	movs	r3, #15
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	0019      	movs	r1, r3
 8007046:	0010      	movs	r0, r2
 8007048:	f7fe fdf7 	bl	8005c3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	23b6      	movs	r3, #182	@ 0xb6
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	58d3      	ldr	r3, [r2, r3]
 8007054:	0018      	movs	r0, r3
 8007056:	f7fe fda8 	bl	8005baa <USBD_LL_Reset>
}
 800705a:	46c0      	nop			@ (mov r8, r8)
 800705c:	46bd      	mov	sp, r7
 800705e:	b004      	add	sp, #16
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	23b6      	movs	r3, #182	@ 0xb6
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	58d3      	ldr	r3, [r2, r3]
 8007074:	0018      	movs	r0, r3
 8007076:	f7fe fdf1 	bl	8005c5c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7a5b      	ldrb	r3, [r3, #9]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007082:	4b05      	ldr	r3, [pc, #20]	@ (8007098 <HAL_PCD_SuspendCallback+0x34>)
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	4b04      	ldr	r3, [pc, #16]	@ (8007098 <HAL_PCD_SuspendCallback+0x34>)
 8007088:	2106      	movs	r1, #6
 800708a:	430a      	orrs	r2, r1
 800708c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800708e:	46c0      	nop			@ (mov r8, r8)
 8007090:	46bd      	mov	sp, r7
 8007092:	b002      	add	sp, #8
 8007094:	bd80      	pop	{r7, pc}
 8007096:	46c0      	nop			@ (mov r8, r8)
 8007098:	e000ed00 	.word	0xe000ed00

0800709c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7a5b      	ldrb	r3, [r3, #9]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070ac:	4b09      	ldr	r3, [pc, #36]	@ (80070d4 <HAL_PCD_ResumeCallback+0x38>)
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	4b08      	ldr	r3, [pc, #32]	@ (80070d4 <HAL_PCD_ResumeCallback+0x38>)
 80070b2:	2106      	movs	r1, #6
 80070b4:	438a      	bics	r2, r1
 80070b6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80070b8:	f000 fa42 	bl	8007540 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	23b6      	movs	r3, #182	@ 0xb6
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	58d3      	ldr	r3, [r2, r3]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7fe fde1 	bl	8005c8c <USBD_LL_Resume>
}
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b002      	add	sp, #8
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	46c0      	nop			@ (mov r8, r8)
 80070d4:	e000ed00 	.word	0xe000ed00

080070d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80070e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007198 <USBD_LL_Init+0xc0>)
 80070e2:	23b6      	movs	r3, #182	@ 0xb6
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	23b0      	movs	r3, #176	@ 0xb0
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4929      	ldr	r1, [pc, #164]	@ (8007198 <USBD_LL_Init+0xc0>)
 80070f2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80070f4:	4b28      	ldr	r3, [pc, #160]	@ (8007198 <USBD_LL_Init+0xc0>)
 80070f6:	4a29      	ldr	r2, [pc, #164]	@ (800719c <USBD_LL_Init+0xc4>)
 80070f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80070fa:	4b27      	ldr	r3, [pc, #156]	@ (8007198 <USBD_LL_Init+0xc0>)
 80070fc:	2208      	movs	r2, #8
 80070fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007100:	4b25      	ldr	r3, [pc, #148]	@ (8007198 <USBD_LL_Init+0xc0>)
 8007102:	2202      	movs	r2, #2
 8007104:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007106:	4b24      	ldr	r3, [pc, #144]	@ (8007198 <USBD_LL_Init+0xc0>)
 8007108:	2202      	movs	r2, #2
 800710a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800710c:	4b22      	ldr	r3, [pc, #136]	@ (8007198 <USBD_LL_Init+0xc0>)
 800710e:	2200      	movs	r2, #0
 8007110:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007112:	4b21      	ldr	r3, [pc, #132]	@ (8007198 <USBD_LL_Init+0xc0>)
 8007114:	2200      	movs	r2, #0
 8007116:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007118:	4b1f      	ldr	r3, [pc, #124]	@ (8007198 <USBD_LL_Init+0xc0>)
 800711a:	2200      	movs	r2, #0
 800711c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800711e:	4b1e      	ldr	r3, [pc, #120]	@ (8007198 <USBD_LL_Init+0xc0>)
 8007120:	0018      	movs	r0, r3
 8007122:	f7f9 fb07 	bl	8000734 <HAL_PCD_Init>
 8007126:	1e03      	subs	r3, r0, #0
 8007128:	d001      	beq.n	800712e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800712a:	f7f9 f905 	bl	8000338 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	23b0      	movs	r3, #176	@ 0xb0
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	58d0      	ldr	r0, [r2, r3]
 8007136:	2318      	movs	r3, #24
 8007138:	2200      	movs	r2, #0
 800713a:	2100      	movs	r1, #0
 800713c:	f7fb f8b8 	bl	80022b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	23b0      	movs	r3, #176	@ 0xb0
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	58d0      	ldr	r0, [r2, r3]
 8007148:	2358      	movs	r3, #88	@ 0x58
 800714a:	2200      	movs	r2, #0
 800714c:	2180      	movs	r1, #128	@ 0x80
 800714e:	f7fb f8af 	bl	80022b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	23b0      	movs	r3, #176	@ 0xb0
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	58d0      	ldr	r0, [r2, r3]
 800715a:	23c0      	movs	r3, #192	@ 0xc0
 800715c:	2200      	movs	r2, #0
 800715e:	2181      	movs	r1, #129	@ 0x81
 8007160:	f7fb f8a6 	bl	80022b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	23b0      	movs	r3, #176	@ 0xb0
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	58d0      	ldr	r0, [r2, r3]
 800716c:	2388      	movs	r3, #136	@ 0x88
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	2200      	movs	r2, #0
 8007172:	2101      	movs	r1, #1
 8007174:	f7fb f89c 	bl	80022b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	23b0      	movs	r3, #176	@ 0xb0
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	58d0      	ldr	r0, [r2, r3]
 8007180:	2380      	movs	r3, #128	@ 0x80
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	2200      	movs	r2, #0
 8007186:	2182      	movs	r1, #130	@ 0x82
 8007188:	f7fb f892 	bl	80022b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	0018      	movs	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	b002      	add	sp, #8
 8007194:	bd80      	pop	{r7, pc}
 8007196:	46c0      	nop			@ (mov r8, r8)
 8007198:	20000e64 	.word	0x20000e64
 800719c:	40005c00 	.word	0x40005c00

080071a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a8:	210f      	movs	r1, #15
 80071aa:	187b      	adds	r3, r7, r1
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b0:	260e      	movs	r6, #14
 80071b2:	19bb      	adds	r3, r7, r6
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	23b0      	movs	r3, #176	@ 0xb0
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	58d3      	ldr	r3, [r2, r3]
 80071c0:	000d      	movs	r5, r1
 80071c2:	187c      	adds	r4, r7, r1
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7f9 fba9 	bl	800091c <HAL_PCD_Start>
 80071ca:	0003      	movs	r3, r0
 80071cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071ce:	19bc      	adds	r4, r7, r6
 80071d0:	197b      	adds	r3, r7, r5
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	0018      	movs	r0, r3
 80071d6:	f000 f9ba 	bl	800754e <USBD_Get_USB_Status>
 80071da:	0003      	movs	r3, r0
 80071dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80071de:	19bb      	adds	r3, r7, r6
 80071e0:	781b      	ldrb	r3, [r3, #0]
}
 80071e2:	0018      	movs	r0, r3
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b005      	add	sp, #20
 80071e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	000c      	movs	r4, r1
 80071f4:	0010      	movs	r0, r2
 80071f6:	0019      	movs	r1, r3
 80071f8:	1cfb      	adds	r3, r7, #3
 80071fa:	1c22      	adds	r2, r4, #0
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	1cbb      	adds	r3, r7, #2
 8007200:	1c02      	adds	r2, r0, #0
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	003b      	movs	r3, r7
 8007206:	1c0a      	adds	r2, r1, #0
 8007208:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800720a:	260f      	movs	r6, #15
 800720c:	19bb      	adds	r3, r7, r6
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007212:	250e      	movs	r5, #14
 8007214:	197b      	adds	r3, r7, r5
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	23b0      	movs	r3, #176	@ 0xb0
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	58d0      	ldr	r0, [r2, r3]
 8007222:	19bc      	adds	r4, r7, r6
 8007224:	1cbb      	adds	r3, r7, #2
 8007226:	781d      	ldrb	r5, [r3, #0]
 8007228:	003b      	movs	r3, r7
 800722a:	881a      	ldrh	r2, [r3, #0]
 800722c:	1cfb      	adds	r3, r7, #3
 800722e:	7819      	ldrb	r1, [r3, #0]
 8007230:	002b      	movs	r3, r5
 8007232:	f7f9 fd07 	bl	8000c44 <HAL_PCD_EP_Open>
 8007236:	0003      	movs	r3, r0
 8007238:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800723a:	250e      	movs	r5, #14
 800723c:	197c      	adds	r4, r7, r5
 800723e:	19bb      	adds	r3, r7, r6
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	0018      	movs	r0, r3
 8007244:	f000 f983 	bl	800754e <USBD_Get_USB_Status>
 8007248:	0003      	movs	r3, r0
 800724a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800724c:	197b      	adds	r3, r7, r5
 800724e:	781b      	ldrb	r3, [r3, #0]
}
 8007250:	0018      	movs	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	b005      	add	sp, #20
 8007256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007258 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	000a      	movs	r2, r1
 8007262:	1cfb      	adds	r3, r7, #3
 8007264:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007266:	210f      	movs	r1, #15
 8007268:	187b      	adds	r3, r7, r1
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800726e:	260e      	movs	r6, #14
 8007270:	19bb      	adds	r3, r7, r6
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	23b0      	movs	r3, #176	@ 0xb0
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	58d2      	ldr	r2, [r2, r3]
 800727e:	000d      	movs	r5, r1
 8007280:	187c      	adds	r4, r7, r1
 8007282:	1cfb      	adds	r3, r7, #3
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	0019      	movs	r1, r3
 8007288:	0010      	movs	r0, r2
 800728a:	f7f9 fd4a 	bl	8000d22 <HAL_PCD_EP_Close>
 800728e:	0003      	movs	r3, r0
 8007290:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007292:	19bc      	adds	r4, r7, r6
 8007294:	197b      	adds	r3, r7, r5
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	0018      	movs	r0, r3
 800729a:	f000 f958 	bl	800754e <USBD_Get_USB_Status>
 800729e:	0003      	movs	r3, r0
 80072a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80072a2:	19bb      	adds	r3, r7, r6
 80072a4:	781b      	ldrb	r3, [r3, #0]
}
 80072a6:	0018      	movs	r0, r3
 80072a8:	46bd      	mov	sp, r7
 80072aa:	b005      	add	sp, #20
 80072ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072ae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	000a      	movs	r2, r1
 80072b8:	1cfb      	adds	r3, r7, #3
 80072ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072bc:	210f      	movs	r1, #15
 80072be:	187b      	adds	r3, r7, r1
 80072c0:	2200      	movs	r2, #0
 80072c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c4:	260e      	movs	r6, #14
 80072c6:	19bb      	adds	r3, r7, r6
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	23b0      	movs	r3, #176	@ 0xb0
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	58d2      	ldr	r2, [r2, r3]
 80072d4:	000d      	movs	r5, r1
 80072d6:	187c      	adds	r4, r7, r1
 80072d8:	1cfb      	adds	r3, r7, #3
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	0019      	movs	r1, r3
 80072de:	0010      	movs	r0, r2
 80072e0:	f7f9 fdfc 	bl	8000edc <HAL_PCD_EP_SetStall>
 80072e4:	0003      	movs	r3, r0
 80072e6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e8:	19bc      	adds	r4, r7, r6
 80072ea:	197b      	adds	r3, r7, r5
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	0018      	movs	r0, r3
 80072f0:	f000 f92d 	bl	800754e <USBD_Get_USB_Status>
 80072f4:	0003      	movs	r3, r0
 80072f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80072f8:	19bb      	adds	r3, r7, r6
 80072fa:	781b      	ldrb	r3, [r3, #0]
}
 80072fc:	0018      	movs	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	b005      	add	sp, #20
 8007302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007304 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	000a      	movs	r2, r1
 800730e:	1cfb      	adds	r3, r7, #3
 8007310:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007312:	210f      	movs	r1, #15
 8007314:	187b      	adds	r3, r7, r1
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800731a:	260e      	movs	r6, #14
 800731c:	19bb      	adds	r3, r7, r6
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	23b0      	movs	r3, #176	@ 0xb0
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	58d2      	ldr	r2, [r2, r3]
 800732a:	000d      	movs	r5, r1
 800732c:	187c      	adds	r4, r7, r1
 800732e:	1cfb      	adds	r3, r7, #3
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	0019      	movs	r1, r3
 8007334:	0010      	movs	r0, r2
 8007336:	f7f9 fe2d 	bl	8000f94 <HAL_PCD_EP_ClrStall>
 800733a:	0003      	movs	r3, r0
 800733c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800733e:	19bc      	adds	r4, r7, r6
 8007340:	197b      	adds	r3, r7, r5
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	0018      	movs	r0, r3
 8007346:	f000 f902 	bl	800754e <USBD_Get_USB_Status>
 800734a:	0003      	movs	r3, r0
 800734c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800734e:	19bb      	adds	r3, r7, r6
 8007350:	781b      	ldrb	r3, [r3, #0]
}
 8007352:	0018      	movs	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	b005      	add	sp, #20
 8007358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800735a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	000a      	movs	r2, r1
 8007364:	1cfb      	adds	r3, r7, #3
 8007366:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	23b0      	movs	r3, #176	@ 0xb0
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	58d3      	ldr	r3, [r2, r3]
 8007370:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007372:	1cfb      	adds	r3, r7, #3
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b25b      	sxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	da0c      	bge.n	8007396 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800737c:	1cfb      	adds	r3, r7, #3
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	227f      	movs	r2, #127	@ 0x7f
 8007382:	401a      	ands	r2, r3
 8007384:	68f9      	ldr	r1, [r7, #12]
 8007386:	0013      	movs	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	189b      	adds	r3, r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	18cb      	adds	r3, r1, r3
 8007390:	3312      	adds	r3, #18
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	e00d      	b.n	80073b2 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007396:	1cfb      	adds	r3, r7, #3
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	227f      	movs	r2, #127	@ 0x7f
 800739c:	401a      	ands	r2, r3
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	23a9      	movs	r3, #169	@ 0xa9
 80073a2:	0059      	lsls	r1, r3, #1
 80073a4:	0013      	movs	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	189b      	adds	r3, r3, r2
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	18c3      	adds	r3, r0, r3
 80073ae:	185b      	adds	r3, r3, r1
 80073b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073b2:	0018      	movs	r0, r3
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b004      	add	sp, #16
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	000a      	movs	r2, r1
 80073c4:	1cfb      	adds	r3, r7, #3
 80073c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c8:	210f      	movs	r1, #15
 80073ca:	187b      	adds	r3, r7, r1
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d0:	260e      	movs	r6, #14
 80073d2:	19bb      	adds	r3, r7, r6
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	23b0      	movs	r3, #176	@ 0xb0
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	58d2      	ldr	r2, [r2, r3]
 80073e0:	000d      	movs	r5, r1
 80073e2:	187c      	adds	r4, r7, r1
 80073e4:	1cfb      	adds	r3, r7, #3
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	0019      	movs	r1, r3
 80073ea:	0010      	movs	r0, r2
 80073ec:	f7f9 fc00 	bl	8000bf0 <HAL_PCD_SetAddress>
 80073f0:	0003      	movs	r3, r0
 80073f2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f4:	19bc      	adds	r4, r7, r6
 80073f6:	197b      	adds	r3, r7, r5
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 f8a7 	bl	800754e <USBD_Get_USB_Status>
 8007400:	0003      	movs	r3, r0
 8007402:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007404:	19bb      	adds	r3, r7, r6
 8007406:	781b      	ldrb	r3, [r3, #0]
}
 8007408:	0018      	movs	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	b005      	add	sp, #20
 800740e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007410 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	0008      	movs	r0, r1
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	0019      	movs	r1, r3
 800741e:	230b      	movs	r3, #11
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	1c02      	adds	r2, r0, #0
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	2408      	movs	r4, #8
 8007428:	193b      	adds	r3, r7, r4
 800742a:	1c0a      	adds	r2, r1, #0
 800742c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742e:	2117      	movs	r1, #23
 8007430:	187b      	adds	r3, r7, r1
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007436:	2516      	movs	r5, #22
 8007438:	197b      	adds	r3, r7, r5
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	23b0      	movs	r3, #176	@ 0xb0
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	58d0      	ldr	r0, [r2, r3]
 8007446:	193b      	adds	r3, r7, r4
 8007448:	881d      	ldrh	r5, [r3, #0]
 800744a:	000e      	movs	r6, r1
 800744c:	187c      	adds	r4, r7, r1
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	230b      	movs	r3, #11
 8007452:	18fb      	adds	r3, r7, r3
 8007454:	7819      	ldrb	r1, [r3, #0]
 8007456:	002b      	movs	r3, r5
 8007458:	f7f9 fd04 	bl	8000e64 <HAL_PCD_EP_Transmit>
 800745c:	0003      	movs	r3, r0
 800745e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007460:	2516      	movs	r5, #22
 8007462:	197c      	adds	r4, r7, r5
 8007464:	19bb      	adds	r3, r7, r6
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	0018      	movs	r0, r3
 800746a:	f000 f870 	bl	800754e <USBD_Get_USB_Status>
 800746e:	0003      	movs	r3, r0
 8007470:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007472:	197b      	adds	r3, r7, r5
 8007474:	781b      	ldrb	r3, [r3, #0]
}
 8007476:	0018      	movs	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	b007      	add	sp, #28
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800747e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800747e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007480:	b087      	sub	sp, #28
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	0008      	movs	r0, r1
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	0019      	movs	r1, r3
 800748c:	230b      	movs	r3, #11
 800748e:	18fb      	adds	r3, r7, r3
 8007490:	1c02      	adds	r2, r0, #0
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	2408      	movs	r4, #8
 8007496:	193b      	adds	r3, r7, r4
 8007498:	1c0a      	adds	r2, r1, #0
 800749a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800749c:	2117      	movs	r1, #23
 800749e:	187b      	adds	r3, r7, r1
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a4:	2516      	movs	r5, #22
 80074a6:	197b      	adds	r3, r7, r5
 80074a8:	2200      	movs	r2, #0
 80074aa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	23b0      	movs	r3, #176	@ 0xb0
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	58d0      	ldr	r0, [r2, r3]
 80074b4:	193b      	adds	r3, r7, r4
 80074b6:	881d      	ldrh	r5, [r3, #0]
 80074b8:	000e      	movs	r6, r1
 80074ba:	187c      	adds	r4, r7, r1
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	230b      	movs	r3, #11
 80074c0:	18fb      	adds	r3, r7, r3
 80074c2:	7819      	ldrb	r1, [r3, #0]
 80074c4:	002b      	movs	r3, r5
 80074c6:	f7f9 fc7d 	bl	8000dc4 <HAL_PCD_EP_Receive>
 80074ca:	0003      	movs	r3, r0
 80074cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ce:	2516      	movs	r5, #22
 80074d0:	197c      	adds	r4, r7, r5
 80074d2:	19bb      	adds	r3, r7, r6
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	0018      	movs	r0, r3
 80074d8:	f000 f839 	bl	800754e <USBD_Get_USB_Status>
 80074dc:	0003      	movs	r3, r0
 80074de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80074e0:	197b      	adds	r3, r7, r5
 80074e2:	781b      	ldrb	r3, [r3, #0]
}
 80074e4:	0018      	movs	r0, r3
 80074e6:	46bd      	mov	sp, r7
 80074e8:	b007      	add	sp, #28
 80074ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	000a      	movs	r2, r1
 80074f6:	1cfb      	adds	r3, r7, #3
 80074f8:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	23b0      	movs	r3, #176	@ 0xb0
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	58d2      	ldr	r2, [r2, r3]
 8007502:	1cfb      	adds	r3, r7, #3
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	0019      	movs	r1, r3
 8007508:	0010      	movs	r0, r2
 800750a:	f7f9 fc92 	bl	8000e32 <HAL_PCD_EP_GetRxCount>
 800750e:	0003      	movs	r3, r0
}
 8007510:	0018      	movs	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	b002      	add	sp, #8
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007520:	4b02      	ldr	r3, [pc, #8]	@ (800752c <USBD_static_malloc+0x14>)
}
 8007522:	0018      	movs	r0, r3
 8007524:	46bd      	mov	sp, r7
 8007526:	b002      	add	sp, #8
 8007528:	bd80      	pop	{r7, pc}
 800752a:	46c0      	nop			@ (mov r8, r8)
 800752c:	20001140 	.word	0x20001140

08007530 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

}
 8007538:	46c0      	nop			@ (mov r8, r8)
 800753a:	46bd      	mov	sp, r7
 800753c:	b002      	add	sp, #8
 800753e:	bd80      	pop	{r7, pc}

08007540 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007544:	f7f8 fe8c 	bl	8000260 <SystemClock_Config>
}
 8007548:	46c0      	nop			@ (mov r8, r8)
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	0002      	movs	r2, r0
 8007556:	1dfb      	adds	r3, r7, #7
 8007558:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755a:	230f      	movs	r3, #15
 800755c:	18fb      	adds	r3, r7, r3
 800755e:	2200      	movs	r2, #0
 8007560:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007562:	1dfb      	adds	r3, r7, #7
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b03      	cmp	r3, #3
 8007568:	d017      	beq.n	800759a <USBD_Get_USB_Status+0x4c>
 800756a:	dc1b      	bgt.n	80075a4 <USBD_Get_USB_Status+0x56>
 800756c:	2b02      	cmp	r3, #2
 800756e:	d00f      	beq.n	8007590 <USBD_Get_USB_Status+0x42>
 8007570:	dc18      	bgt.n	80075a4 <USBD_Get_USB_Status+0x56>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <USBD_Get_USB_Status+0x2e>
 8007576:	2b01      	cmp	r3, #1
 8007578:	d005      	beq.n	8007586 <USBD_Get_USB_Status+0x38>
 800757a:	e013      	b.n	80075a4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800757c:	230f      	movs	r3, #15
 800757e:	18fb      	adds	r3, r7, r3
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
    break;
 8007584:	e013      	b.n	80075ae <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007586:	230f      	movs	r3, #15
 8007588:	18fb      	adds	r3, r7, r3
 800758a:	2202      	movs	r2, #2
 800758c:	701a      	strb	r2, [r3, #0]
    break;
 800758e:	e00e      	b.n	80075ae <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007590:	230f      	movs	r3, #15
 8007592:	18fb      	adds	r3, r7, r3
 8007594:	2201      	movs	r2, #1
 8007596:	701a      	strb	r2, [r3, #0]
    break;
 8007598:	e009      	b.n	80075ae <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800759a:	230f      	movs	r3, #15
 800759c:	18fb      	adds	r3, r7, r3
 800759e:	2202      	movs	r2, #2
 80075a0:	701a      	strb	r2, [r3, #0]
    break;
 80075a2:	e004      	b.n	80075ae <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80075a4:	230f      	movs	r3, #15
 80075a6:	18fb      	adds	r3, r7, r3
 80075a8:	2202      	movs	r2, #2
 80075aa:	701a      	strb	r2, [r3, #0]
    break;
 80075ac:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80075ae:	230f      	movs	r3, #15
 80075b0:	18fb      	adds	r3, r7, r3
 80075b2:	781b      	ldrb	r3, [r3, #0]
}
 80075b4:	0018      	movs	r0, r3
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b004      	add	sp, #16
 80075ba:	bd80      	pop	{r7, pc}

080075bc <memset>:
 80075bc:	0003      	movs	r3, r0
 80075be:	1882      	adds	r2, r0, r2
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d100      	bne.n	80075c6 <memset+0xa>
 80075c4:	4770      	bx	lr
 80075c6:	7019      	strb	r1, [r3, #0]
 80075c8:	3301      	adds	r3, #1
 80075ca:	e7f9      	b.n	80075c0 <memset+0x4>

080075cc <__libc_init_array>:
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	2600      	movs	r6, #0
 80075d0:	4c0c      	ldr	r4, [pc, #48]	@ (8007604 <__libc_init_array+0x38>)
 80075d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007608 <__libc_init_array+0x3c>)
 80075d4:	1b64      	subs	r4, r4, r5
 80075d6:	10a4      	asrs	r4, r4, #2
 80075d8:	42a6      	cmp	r6, r4
 80075da:	d109      	bne.n	80075f0 <__libc_init_array+0x24>
 80075dc:	2600      	movs	r6, #0
 80075de:	f000 f819 	bl	8007614 <_init>
 80075e2:	4c0a      	ldr	r4, [pc, #40]	@ (800760c <__libc_init_array+0x40>)
 80075e4:	4d0a      	ldr	r5, [pc, #40]	@ (8007610 <__libc_init_array+0x44>)
 80075e6:	1b64      	subs	r4, r4, r5
 80075e8:	10a4      	asrs	r4, r4, #2
 80075ea:	42a6      	cmp	r6, r4
 80075ec:	d105      	bne.n	80075fa <__libc_init_array+0x2e>
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	00b3      	lsls	r3, r6, #2
 80075f2:	58eb      	ldr	r3, [r5, r3]
 80075f4:	4798      	blx	r3
 80075f6:	3601      	adds	r6, #1
 80075f8:	e7ee      	b.n	80075d8 <__libc_init_array+0xc>
 80075fa:	00b3      	lsls	r3, r6, #2
 80075fc:	58eb      	ldr	r3, [r5, r3]
 80075fe:	4798      	blx	r3
 8007600:	3601      	adds	r6, #1
 8007602:	e7f2      	b.n	80075ea <__libc_init_array+0x1e>
 8007604:	080077a4 	.word	0x080077a4
 8007608:	080077a4 	.word	0x080077a4
 800760c:	080077a8 	.word	0x080077a8
 8007610:	080077a4 	.word	0x080077a4

08007614 <_init>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	46c0      	nop			@ (mov r8, r8)
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr

08007620 <_fini>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	46c0      	nop			@ (mov r8, r8)
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr
